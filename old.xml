<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2016-02-08 12:56"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>The Maintenance Coder</title>
<link>https://maintenancecoder.wordpress.com</link>
<description>Hell is your own code - 12 months later</description>
<pubDate>Mon, 08 Feb 2016 12:56:06 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>https://maintenancecoder.wordpress.com</wp:base_blog_url>
<wp:author>
  <wp:author_login>Jim Burger</wp:author_login>
  <wp:author_email>the-burge@outlook.com</wp:author_email>
  <wp:author_display_name><![CDATA[Jim Burger]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>309</wp:term_id>
  <wp:category_nicename>reviews</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Reviews]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>2301</wp:term_id>
  <wp:category_nicename>software-development</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Software Development]]></wp:cat_name>
  <wp:category_description><![CDATA[All things software development related]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>2427</wp:term_id>
  <wp:category_nicename>net</wp:category_nicename>
  <wp:category_parent>software-development</wp:category_parent>
  <wp:cat_name><![CDATA[.NET]]></wp:cat_name>
  <wp:category_description><![CDATA[.NET related articles]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>54</wp:term_id>
  <wp:category_nicename>general</wp:category_nicename>
  <wp:category_parent>software-development</wp:category_parent>
  <wp:cat_name><![CDATA[General]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>2427</wp:term_id>
  <wp:tag_slug>net</wp:tag_slug>
  <wp:tag_name><![CDATA[.NET]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>141</wp:term_id>
  <wp:tag_slug>ajax</wp:tag_slug>
  <wp:tag_name><![CDATA[AJAX]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2290</wp:term_id>
  <wp:tag_slug>architecture</wp:tag_slug>
  <wp:tag_name><![CDATA[Architecture]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>9817</wp:term_id>
  <wp:tag_slug>asp</wp:tag_slug>
  <wp:tag_name><![CDATA[ASP]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>48992345</wp:term_id>
  <wp:tag_slug>asp-mvc-3</wp:tag_slug>
  <wp:tag_name><![CDATA[ASP MVC 3]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>10216727</wp:term_id>
  <wp:tag_slug>back2basics</wp:tag_slug>
  <wp:tag_name><![CDATA[Back2Basics]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>75400</wp:term_id>
  <wp:tag_slug>bdd</wp:tag_slug>
  <wp:tag_name><![CDATA[BDD]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>16995</wp:term_id>
  <wp:tag_slug>change-management</wp:tag_slug>
  <wp:tag_name><![CDATA[Change management]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>40513538</wp:term_id>
  <wp:tag_slug>check-in-policies</wp:tag_slug>
  <wp:tag_name><![CDATA[Check In Policies]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>514761</wp:term_id>
  <wp:tag_slug>clr</wp:tag_slug>
  <wp:tag_name><![CDATA[CLR]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>332</wp:term_id>
  <wp:tag_slug>coding</wp:tag_slug>
  <wp:tag_name><![CDATA[Coding]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>11414</wp:term_id>
  <wp:tag_slug>com</wp:tag_slug>
  <wp:tag_name><![CDATA[COM]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>45809</wp:term_id>
  <wp:tag_slug>configuration</wp:tag_slug>
  <wp:tag_name><![CDATA[Configuration]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>21681582</wp:term_id>
  <wp:tag_slug>content-controls</wp:tag_slug>
  <wp:tag_name><![CDATA[Content Controls]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2363040</wp:term_id>
  <wp:tag_slug>cors</wp:tag_slug>
  <wp:tag_name><![CDATA[CORS]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>20740</wp:term_id>
  <wp:tag_slug>csharp</wp:tag_slug>
  <wp:tag_name><![CDATA[CSharp]]></wp:tag_name>
  <wp:tag_description><![CDATA[C# Programming Language]]></wp:tag_description>
</wp:tag>
<wp:tag>
  <wp:term_id>38696409</wp:term_id>
  <wp:tag_slug>documentgeneration</wp:tag_slug>
  <wp:tag_name><![CDATA[DocumentGeneration]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1294027</wp:term_id>
  <wp:tag_slug>fsharp</wp:tag_slug>
  <wp:tag_name><![CDATA[FSharp]]></wp:tag_name>
  <wp:tag_description><![CDATA[F# Programming Language]]></wp:tag_description>
</wp:tag>
<wp:tag>
  <wp:term_id>116486</wp:term_id>
  <wp:tag_slug>functional-programming</wp:tag_slug>
  <wp:tag_name><![CDATA[functional programming]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>10518</wp:term_id>
  <wp:tag_slug>http</wp:tag_slug>
  <wp:tag_name><![CDATA[HTTP]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>133657</wp:term_id>
  <wp:tag_slug>kata</wp:tag_slug>
  <wp:tag_name><![CDATA[kata]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2761</wp:term_id>
  <wp:tag_slug>languages</wp:tag_slug>
  <wp:tag_name><![CDATA[Languages]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1821</wp:term_id>
  <wp:tag_slug>laptop</wp:tag_slug>
  <wp:tag_name><![CDATA[Laptop]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>366</wp:term_id>
  <wp:tag_slug>memes</wp:tag_slug>
  <wp:tag_name><![CDATA[Memes]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>295211</wp:term_id>
  <wp:tag_slug>openxml</wp:tag_slug>
  <wp:tag_name><![CDATA[OpenXml]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>38696408</wp:term_id>
  <wp:tag_slug>openxmlsdk</wp:tag_slug>
  <wp:tag_name><![CDATA[OpenXMLSdk]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>178495</wp:term_id>
  <wp:tag_slug>powershell</wp:tag_slug>
  <wp:tag_name><![CDATA[Powershell]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>141911</wp:term_id>
  <wp:tag_slug>prototyping</wp:tag_slug>
  <wp:tag_name><![CDATA[Prototyping]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>99869</wp:term_id>
  <wp:tag_slug>resharper</wp:tag_slug>
  <wp:tag_name><![CDATA[Resharper]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>15314</wp:term_id>
  <wp:tag_slug>rest</wp:tag_slug>
  <wp:tag_name><![CDATA[REST]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1745</wp:term_id>
  <wp:tag_slug>review</wp:tag_slug>
  <wp:tag_name><![CDATA[Review]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>53511</wp:term_id>
  <wp:tag_slug>source-control</wp:tag_slug>
  <wp:tag_name><![CDATA[Source control]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>164684</wp:term_id>
  <wp:tag_slug>svn</wp:tag_slug>
  <wp:tag_name><![CDATA[SVN]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>76604</wp:term_id>
  <wp:tag_slug>tdd</wp:tag_slug>
  <wp:tag_name><![CDATA[TDD]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>202925</wp:term_id>
  <wp:tag_slug>telerik</wp:tag_slug>
  <wp:tag_name><![CDATA[Telerik]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>342877</wp:term_id>
  <wp:tag_slug>tfs</wp:tag_slug>
  <wp:tag_name><![CDATA[TFS]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>540</wp:term_id>
  <wp:tag_slug>themes</wp:tag_slug>
  <wp:tag_name><![CDATA[Themes]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1981</wp:term_id>
  <wp:tag_slug>tools</wp:tag_slug>
  <wp:tag_name><![CDATA[Tools]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2774581</wp:term_id>
  <wp:tag_slug>vb9</wp:tag_slug>
  <wp:tag_name><![CDATA[VB9]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>833</wp:term_id>
  <wp:tag_slug>vbscript</wp:tag_slug>
  <wp:tag_name><![CDATA[VBScript]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>18060</wp:term_id>
  <wp:tag_slug>vim</wp:tag_slug>
  <wp:tag_name><![CDATA[vim]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6678</wp:term_id>
  <wp:tag_slug>visual-studio</wp:tag_slug>
  <wp:tag_name><![CDATA[Visual Studio]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>162</wp:term_id>
  <wp:tag_slug>word</wp:tag_slug>
  <wp:tag_name><![CDATA[Word]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>363132</wp:term_id>
  <wp:tag_slug>xss</wp:tag_slug>
  <wp:tag_name><![CDATA[XSS]]></wp:tag_name>
</wp:tag>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s2.wp.com/i/buttonw-com.png</url>
		<title>The Maintenance Coder</title>
		<link>https://maintenancecoder.wordpress.com</link>
	</image>
	<item>
  <title>About</title>
  <link>https://maintenancecoder.wordpress.com/about/</link>
  <pubDate>Wed, 16 Dec 2009 06:49:51 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[Thanks for reading my blog!

I've been coding for nearly 20 years, most recently in .NET. I'm no expert, but I share what I learn.


]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2</wp:post_id>
  <wp:post_date>2009-12-16 06:49:51</wp:post_date>
  <wp:post_date_gmt>2009-12-16 06:49:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[11285636]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>nervoustych-xml.txt</title>
  <link>https://maintenancecoder.wordpress.com/nervoustych-xml-txt/</link>
  <pubDate>Wed, 16 Dec 2009 07:11:35 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2009/12/nervoustych-xml.txt</guid>
  <description/>
  <content:encoded><![CDATA[http://maintenancecoder.files.wordpress.com/2009/12/nervoustych-xml.txt]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3</wp:post_id>
  <wp:post_date>2009-12-16 07:11:35</wp:post_date>
  <wp:post_date_gmt>2009-12-16 07:11:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>nervoustych-xml-txt</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2009/12/nervoustych-xml.txt</wp:attachment_url>
</item>
<item>
  <title>nervoustych-wxr.txt</title>
  <link>https://maintenancecoder.wordpress.com/nervoustych-wxr-txt/</link>
  <pubDate>Wed, 16 Dec 2009 07:12:10 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2009/12/nervoustych-wxr.txt</guid>
  <description/>
  <content:encoded><![CDATA[http://maintenancecoder.files.wordpress.com/2009/12/nervoustych-wxr.txt]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4</wp:post_id>
  <wp:post_date>2009-12-16 07:12:10</wp:post_date>
  <wp:post_date_gmt>2009-12-16 07:12:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>nervoustych-wxr-txt</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2009/12/nervoustych-wxr.txt</wp:attachment_url>
</item>
<item>
  <title>wordpress-2009-12-16-xml.txt</title>
  <link>https://maintenancecoder.wordpress.com/wordpress-2009-12-16-xml-txt/</link>
  <pubDate>Wed, 16 Dec 2009 07:35:46 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2009/12/wordpress-2009-12-16-xml.txt</guid>
  <description/>
  <content:encoded><![CDATA[http://maintenancecoder.files.wordpress.com/2009/12/wordpress-2009-12-16-xml.txt]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>9</wp:post_id>
  <wp:post_date>2009-12-16 07:35:46</wp:post_date>
  <wp:post_date_gmt>2009-12-16 07:35:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>wordpress-2009-12-16-xml-txt</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2009/12/wordpress-2009-12-16-xml.txt</wp:attachment_url>
</item>
<item>
  <title>1post-xml.txt</title>
  <link>https://maintenancecoder.wordpress.com/1post-xml-txt/</link>
  <pubDate>Wed, 16 Dec 2009 07:57:23 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2009/12/1post-xml.txt</guid>
  <description/>
  <content:encoded><![CDATA[http://maintenancecoder.files.wordpress.com/2009/12/1post-xml.txt]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>10</wp:post_id>
  <wp:post_date>2009-12-16 07:57:23</wp:post_date>
  <wp:post_date_gmt>2009-12-16 07:57:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>1post-xml-txt</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2009/12/1post-xml.txt</wp:attachment_url>
</item>
<item>
  <title>Throw your code away</title>
  <link>https://maintenancecoder.wordpress.com/2009/10/01/permalinkguide84ab527-a146-430d-852d-04646ad1ba5b/</link>
  <pubDate>Thu, 01 Oct 2009 03:54:06 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">/blog/PermaLink,guid,e84ab527-a146-430d-852d-04646ad1ba5b.aspx</guid>
  <description/>
  <content:encoded><![CDATA[So every now and again I hear about developers doing a thing called <em>prototyping. </em>It sounds intriguing enough, you code out a bunch of functionality <strong>quickly. </strong>What happens next is even more intriguing: apparently the idea is to now go and use this code as the basis for your production code. Not rewrite it per se, actually reuse this rapidly, sloppily developed code and ultimately deploy it.

If this is your idea of prototyping, you're <strong>doing it wrong.</strong>

This, dear readers, is a prototype:
<a href="http://www.flickr.com/photos/daveoflogic/3579407924/"> <img style="display:inline;border-width:0;" title="2004 Ferrari 612 Scalietti - 1:3 Wind Tunnel Prototype. Photo taken by daveoflogic. Courtesy of Flickr" src="http://farm4.static.flickr.com/3305/3579407924_898fbfe1e0_m_d.jpg" border="0" alt="2004 Ferrari 612 Scalietti - 1:3 Wind Tunnel Prototype. Photo taken by daveoflogic. Courtesy of Flickr" width="244" height="184" /></a>

Now you could try selling this car, I’m sure somebody would buy it, but it won’t drive on any road. What is the point of such a thing? It is a 1:3 scale model presumably made from some cheap plastic like material, that was never intended to hit the roads. It isn’t made according to any design standards to do with structural integrity, there are no seats, and no steering wheel. There is no engine, it doesn’t move, it just sits there. It doesn’t even look good, in fact it looks terrible.

Prototyping as an engineering practice is about what you learn, not what you create. In the above case the point is learning about the aerodynamic properties of the cars shape. Nothing more. You wont see the car manufacturer take this object and turn it into a road vehicle. The very thing that makes it a prototype makes it unsuitable for the true purpose of the final product.

They key feature of any prototype is that they make assumptions about their environment; for code this means things like hard-coded connection strings, XML test data instead of SQL tables, Balsamiq UIs, OO design principles are thrown out the window, faking out unneeded side effects and so forth.

Taking this code and using it is a mistake, because invariably you will forget to remove all the assumptions and leave something behind. You might also paint yourself into an architectural corner you could have otherwise avoided. The point is folks: <strong>tomorrow never comes. </strong>The attitude of, “I’ll just refactor this later into something that is more suitable for production” is based around the fallacious idea that you will have time later.

What happens is that when someone sees this prototype who doesn’t really know its in fact made from duct tape* and balsa wood, <strong>they assume that you're finished and give you more work to do.</strong>

Failing that, we often fall into the trap of convincing ourselves that this piece of work is done, and we can get to building some more cool functionality. Lets face it, discovering new things and producing cool new features is the fun part of what we do. It's tempting to leave things at the prototype stage and build other components around them.

Recently I was asked, if you prototype without TDD then are you in fact practicing <em>real</em> TDD? My reaction to that is that depends on what you do *after* you throw away your prototype. You shouldn’t be doing prototyping and production coding at the same time, regardless of your thoughts on TDD. Throw your prototypes in the bin where they belong.

As an aside, I recently became aware of <a href="http://www.21apps.com/development/daily-tdd-kata/">TDD</a> <a href="http://www.21apps.com/development/daily-tdd-kata/">Kata</a> which in effect, is a way of using a prototype (read throwaway) <strong>problem domain,</strong> to learn something about the act of TDD itself. Also very useful by the sounds, I might try it out.

* Some people clearly make a living out of being <a href="http://www.joelonsoftware.com/items/2009/09/23.html">duct</a> <a href="http://www.joelonsoftware.com/items/2009/09/23.html">tape coders</a>. I just feel sorry for the legions of ‘maintenance developers’ that invariably follow in the wake of their greatness.]]></content:encoded>
  <excerpt:encoded><![CDATA[So every now and again I hear about developers doing a thing called prototyping.]]></excerpt:encoded>
  <wp:post_id>12</wp:post_id>
  <wp:post_date>2009-10-01 03:54:06</wp:post_date>
  <wp:post_date_gmt>2009-10-01 03:54:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>permalinkguide84ab527-a146-430d-852d-04646ad1ba5b</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="coding"><![CDATA[Coding]]></category>
  <category domain="post_tag" nicename="prototyping"><![CDATA[Prototyping]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[12]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[12]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What me, cheap?</title>
  <link>https://maintenancecoder.wordpress.com/2009/03/11/permalinkguid2bef4dc3-0ea9-4c55-b77f-846c54431fca/</link>
  <pubDate>Tue, 10 Mar 2009 23:03:46 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">/blog/PermaLink,guid,2bef4dc3-0ea9-4c55-b77f-846c54431fca.aspx</guid>
  <description/>
  <content:encoded><![CDATA[In <a href="http://www.lostechies.com/blogs/jimmy_bogard/archive/2009/03/08/why-are-we-so-cheap-with-software.aspx"></a><a href="http://www.lostechies.com/blogs/jimmy_bogard/archive/2009/03/08/why-are-we-so-cheap-with-software.aspx">a recent post,</a> <a href="http://www.lostechies.com/blogs/jimmy_bogard/default.aspx">Jimmy</a><a href="http://www.lostechies.com/blogs/jimmy_bogard/default.aspx">Bogard</a> goes on the offensive and asks why are we, as developers so cheap when it comes to buying  tools for software development?

Jimmy points out as soon as a dev wants to use a productivity tool, the requisition department seems to kick in and find a reason why not to spend money on it. Sometimes that department is the developers LHS of their brain kicking in, other times it's a whole team of accountants waving their bottom lines at the dev team in dismay.

I’m going to defend my frugality. And the LHS of my brain. <strong>I’m not cheap</strong>, I just have a <a href="http://www.secretgeek.net/lft.asp">low</a> <a href="http://www.secretgeek.net/lft.asp">tolerance for frustration</a>, <a href="http://blogoscoped.com/archive/2005-08-24-n14.html">am</a> <a href="http://blogoscoped.com/archive/2005-08-24-n14.html">lazy &amp; dumb</a>, and have a surplus of free stuff <a href="http://sourceforge.net/">available</a><a>to</a><a href="http://codeplex.com">me</a>. <a href="http://ayende.com/Blog/archive/2009/02/06/closing-the-xheo-saga.aspx">Like</a> <a href="http://ayende.com/Blog/archive/2009/02/06/closing-the-xheo-saga.aspx">many others,</a> I’ve also been burned by snake oil merchants more times than I care to remember. If that makes me cheap then chuck me in the deep fryer and throw me to the capitalists.

<img style="display:inline;margin:0;" title="Alfred E Neuman on the face of a US three dollar bill" src="http://farm1.static.flickr.com/218/469212512_907d717827.jpg" alt="Alfred E Neuman on the face of a US three dollar bill" width="472" height="314" />

Jimmy is completely correct though, the issue lies with the people <strong>who set the budgets </strong>for tooling. Their job is to save the company money on paper, so when asked for a fancy diff tool, they automatically extrapolate that cost over every desktop and come up with some scary figure.

I think this could represent the incorrect approach. Give each developer control over the tools they are going to need to automate their daily work. They are as power tools are to a tradesperson. Each developer will need different tools. Let them sort out the overlap and find the bulk deals if they exist.

I’ll tell you what I consider cheap:
<ol>
	<li>Employers who expect developers to ‘just do it’. Serious development requires serious power tools.</li>
	<li>Employers who don’t allow developers to augment their own tool set. ‘You will use the standard toolkit and NOT deviate from it.’</li>
	<li>Developers who think that their employers should fork out for every tool that their heart desires.</li>
</ol>
I know point three is going to put some noses out of joint. I don’t care. I’ve long been a believer that a developer should be in charge of their own toolkit. In a very real sense, this means you are in charge of your own productivity. I also believe that a developer should be given a regular tool allowance by their
employer. Tools break or become obsolete; they need replacing or upgrading. The best person to decide when and what, is the developer.

Finally, in the case of a dispute, a developer should be encouraged to buy the tool of their dreams, and upon proving its worth to the employer, be reimbursed. Oh…and besides all that…. I don’t personally see what’s wrong with being cheap anyhow ;)]]></content:encoded>
  <excerpt:encoded><![CDATA[In a recent post, JimmyBogard goes on the offensive and asks why are we, as developers so cheap when it comes to buying  tools for software development?]]></excerpt:encoded>
  <wp:post_id>13</wp:post_id>
  <wp:post_date>2009-03-11 08:33:46</wp:post_date>
  <wp:post_date_gmt>2009-03-10 23:03:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>permalinkguid2bef4dc3-0ea9-4c55-b77f-846c54431fca</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="tools"><![CDATA[Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[13]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[13]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>My –isms</title>
  <link>https://maintenancecoder.wordpress.com/2009/02/10/my-isms/</link>
  <pubDate>Mon, 09 Feb 2009 16:36:02 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">/blog/PermaLink,guid,826827b3-3f22-47cf-a034-5c127578977c.aspx</guid>
  <description/>
  <content:encoded><![CDATA[<h3>
</h3>
<h3>I AM<p></p>
</h3>
<p>Dogmatic about <a href="http://www.pragprog.com/">pragmatism</a>.&nbsp;</p>
<p>Cynical of <a href="http://www.i-cynic.com/whatis.asp">cynicism</a>.</p>
<p>Prone to <a href="http://imgs.xkcd.com/comics/conspiracy_theories.png">scepticism</a>.</p>
<p>Attracted to <a href="http://en.wikipedia.org/wiki/Absurdism"><span class="mceItemHidden"><span class="hiddenSpellError">absurdism</span></span></a>.</p>
<p>Suspicious of <a href="http://www.imdb.com/title/tt0094291/">capitalism</a>.</p>
<p></p><hr>
<p></p>
<p>My feeble attempt at a blog meme. Go <a href="http://www.morewords.com/ends-with/ism/">here</a> and</p>
<p>pick 5 of your –isms. Its poetry made easy :P</p>
<p>If you’ve read this and have a blog of your own - consider yourself tagged!</p>
<p>        <img src="http://www.nervoustych.com/blog/aggbug.ashx?id=826827b3-3f22-47cf-a034-5c127578977c" width="0" height="0"></p><p><br></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>826827</wp:post_id>
  <wp:post_date>2009-02-10 02:06:02</wp:post_date>
  <wp:post_date_gmt>2009-02-09 16:36:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>my-isms</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="memes"><![CDATA[Memes]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[permalinkguid826827b3-3f22-47cf-a034-5c127578977c]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[826827]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[826827]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Giving a damn about the broken windows</title>
  <link>https://maintenancecoder.wordpress.com/2009/02/09/giving-a-damn-about-the-broken-windows/</link>
  <pubDate>Sun, 08 Feb 2009 22:58:27 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">/blog/PermaLink,guid,cfae6577-d301-42bb-a4bc-7952586c7249.aspx</guid>
  <description/>
  <content:encoded><![CDATA[Leon Bambrick has written some great posts lately, and two things have really struck a chord with me. Firstly, in 6 ways to become a better programmer in 8 minutes <a href="http://www.secretgeek.net/6min_program.asp">(or was it the other way around)</a> he drives home the point that attempting to increase code coverage in your project by 1% is a Good Thing. Especially given the fact that its likely that your code coverage is 0% hmm? The biggest gain in unit testing probably arises from that first attempt to bring your code base under some semblance of control.

Secondly, <a href="http://www.secretgeek.net/give_take.asp">in an earlier post</a> he finishes up by espousing the importance of passion.
<blockquote>You've got to give a shit about the code you write and the people who use it. If you

don't care about it, you're never going to enjoy it properly.</blockquote>
“Give a shit” about your code – otherwise coming to work is pointless. Go home and find out how to care about the project before coming back. I care about unit testing, because I care about my code. It saddens me to think that most code bases out there have a code coverage of 0%. More so, it saddens me that there are people who don’t even try to understand unit testing and how it can work for you, and not against you.

IMNSHO if you haven’t wrapped your head around unit testing by now, then <a href="http://www.codinghorror.com/blog/archives/000640.html">you’re are not doing your job properly</a>. You can’t possibly remember all the permutations of a complex problem, nor can you verify them all. So when you figure one out, you should verify it, code it and check it in.

It is also a shame that <a href="http://www.joelonsoftware.com/items/2009/01/31.html">prominent members</a> of the coding community can’t get their story straight. There are still plenty of people out there who just don’t seem to get it. Even with a test suite in place, it may become neglected. Progressively it too, falls into the category of legacy code.

So how do we improve the efficacy of our test suite if we have one? First and foremost:

<strong>Have tests run as part of the build, and fail the build if the tests do not pass.</strong>

This is a no brainer. There are so many benefits to having tests and automating them that I cannot begin to summarize them here.&nbsp; <a href="http://martinfowler.com/articles/continuousIntegration.html#MakeYourBuildSelf-testing">Just</a><a href="http://www.codeproject.com/KB/architecture/onunittesting.aspx">do</a><a href="http://www.codeproject.com/KB/architecture/onunittesting.aspx">it.</a> Of course this is no good, if other team members aren’t compelled to fix the build. Which lead Leon to the conclusion that some form of build monitor is a definite improvement. If you don’t have a <a href="http://www.thinkgeek.com/geektoys/warfare/8bc4/?cpg=ab">laser</a> <a href="http://www.thinkgeek.com/geektoys/warfare/8bc4/?cpg=ab">guided USB missile launcher</a> pointed at the person who broke the build, then your still fighting an uphill battle to <strong>make people care</strong>.

So, failing office warfare, you can try lowering the cognitive effort of understanding unit testing in the first place. The testing newbie usually finds learning about mock objects, test fakes, test runners and testing frameworks up front all a bit too much.

<strong>Writing neat test code helps testing newbies.</strong> I like to impose the following rules on myself.
<ol>
	<li>Use plain English when naming test classes, methods and variables</li>
	<li>Avoid obnoxious acronyms</li>
	<li>Clearly name test fakes and mocks</li>
	<li>Differentiate between the ‘expected’ and the ‘actual’ value</li>
	<li>Minimize the asserts in your tests</li>
	<li>Use language features to full effect to improve readability</li>
	<li>Refactor your tests as ruthlessly as your code</li>
</ol>
<h3>Use plain English when naming</h3>
Testing is about specification, and should read as such. Having a class called FooFixture makes sense to some, but everybody understands WhenEmailingACustomer. Similarly, a test named ShouldThrowWhenNullParm(), is too obscure. Should throw what exception? Which ‘parm’… schnitzel or olive parm? Avoid such cryptograms and defer to a more English style. ShouldThrowANullReferenceExceptionWhenProvidedANullFooParameter might be a little long, but at least it doesn’t need deciphering.&nbsp; Hell, we are all coding on <a href="http://www.codinghorror.com/blog/archives/000012.html">24” widescreens and better</a> right? :P

Some people say that the code should document the test and the method name is a little superfluous. Sorry, but I say: <strong>nuts</strong>. I want to skim a list of test methods and fixtures to learn how a program works, as well as what it does, without reading the code, and so should my team members.

I also advocate using underscores, to further improve readability, however I realise this is a personal preference. For example:

[sourcecode language="csharp"]
[TestClass]
public&amp;nbsp;class Concerning_the_person_controller
  {
  [TestMethod]
  public&amp;nbsp;void It_should_retrieve_the_tallest_person_from_the_person_model()
  {
     //TODO: Write a READABLE test
  }
}
[/sourcecode]

<h3>Avoid acronyms </h3>

I’m a fan of marking the “system under test” and I used to use the acronym, SUT to do so. However, I’ve come full circle and realized that having a CreateSUT method is taking it all too far. You will only serve to confuse the masses who aren’t up to speed on the latest BDD TLA.
<h3>Clearly name fakes and mocks</h3>
<em>You</em> might remember that you faked out the FooService in the TestInitialize (Setup) method, but by the 5th test, I can guarantee you that the testing newbie will have forgotten. Keep reminding yourself and others by sticking ‘fake’ in the name of the variable somewhere. Please do name the fake class as such also. If you are going to hide behind an interface, call it out explicitly. Remember, you are coding a specification.

[sourcecode language="csharp"]
[TestClass]
public class Concerning_the_person_controller
{
  [TestMethod]
  public void It_should_retrieve_the_tallest_person_from_the_person_model()
  {
    IPersonModel fakePersonModel = new FakePersonModel();
    //...
  }
}
[/sourcecode]

<h3>Differentiate the expected and actual value </h3>

Similarly, if you are going to cache an expected or actual value, make it clear to what its purpose is. People who haven’t memorized every overload of Assert.AreEqual will quickly forget where what goes where. Keep reminding them with verbose naming.

[sourcecode language="csharp"]
[TestClass]
public class Concerning_the_person_controller
{
  [TestMethod]
  public void It_should_retrieve_the_tallest_person_from_the_person_model()
  {
    IPersonModel fakePersonModel = new fakePersonModel();
    var expectedPerson = new Person() {
      FirstName = &quot;Joe&quot;,
      LastName = &quot;Hill&quot;,
      Height = 203.00,
    };

    fakePersonModel.Persons.Add(expectedPerson);
    //..
  }
}
[/sourcecode]

<h3>Minimize your asserts </h3>

I’m no ‘1 assert per test’ nazi; sometimes it makes sense to group asserts. However, aiming to keep them to a minimum will further help the readability. Newbie's (and refactoring tools) don’t always realise that Asserts are really potential method exit points so keeping them close to the bottom of the test helps a lot too.

[sourcecode language="csharp"]
[TestClass]
public class Concerning_the_person_controller
{
  [TestMethod]
  public void it_should_retrieve_the_tallest_person_from_the_person_model()
  {
    IPersonModel fakePersonModel = new FakePersonModel();
    var expectedPerson = new Person();

    var expectedPerson = new Person() {
      FirstName = &quot;Joe&quot;,
      LastName = &quot;Hill&quot;,
      Height = 203.00,
    };

    fakePersonModel.Persons.Add(expectedPerson);
    var personController = new PersonController(fakePersonModel);
    Assert.AreSame(expectedPerson, personController.RetrieveTallestPerson());
  }
}
[/sourcecode]
<h3>Use language features to improve readability</h3>
Extension methods are a boon to readable tests. Practice a little language oriented programming and write a more readable testing interface for your colleagues to grok quicker. Or use a test framework that has done some of the work for you. For instance I have put together a library for internal use that has extension methods for common assertions to make them more English Readable®. Every time I come up with a new sentence, the test drives out development of my internal library, which has a nice side benefit of being useful in other projects.

[sourcecode language="csharp"]
[TestClass]
public class Concerning_the_person_controller
{
  [TestMethod]
  public void It_should_retrieve_the_tallest_person_from_the_person_model()
  {
    IPersonModel fakePersonModel = new FakePersonModel();
    var expectedPerson = new Person
    {
      FirstName = &quot;Joe&quot;,
      LastName = &quot;Hill&quot;,
      Height = 203.00
    };
    fakePersonModel.Persons.Add(expectedPerson);
    var personController = new PersonController(fakePersonModel);
    var actualPerson = personController.RetrieveTallestPerson();
    actualPerson.should().be_the_same_as_the(expectedPerson);
  }
}
[/sourcecode]

You might even consider going one step further and providing a project specific DSL to really capture your intent. However the further you go down this route, the further you might obscure things, so be cautious.
<h3>Refactor your tests as ruthlessly as your code</h3>
Don’t repeat yourself, and refactor your tests when you see opportunity. By all means, take full advantage of the testing framework - as long as it works to your advantage. [TestInitialize/TestCleanup] or [SetUp/TearDown]routines will get missed, but explicit calls to a function will not. Furthermore, allowing for reading ‘top-down’ will win you extra brownie points.

[sourcecode language="csharp"]
[TestClass]
public class Concerning_the_person_controller
{
  private Person TallestPerson;
  private Person FirstPerson;
  private PersonController CreatePersonControllerWithDependencies()
  {
    IPersonModel fakePersonModel = &lt;span style=&quot;color: blue;&quot;&gt;new&lt;/span&gt; FakePersonModel();
    var person = new Person {
      FirstName = &quot;Joe&quot;,
      LastName = &quot;Hill&quot;
      Height = 203.00
   &amp;nbsp;};
    TallestPerson = person;
    fakePersonModel.Persons.Add(person);

    person = new Person {
      FirstName = &quot;John&quot;,
      LastName = &quot;Alfred&quot;,
      Height = 200.00
   &amp;nbsp;};
    FirstPerson = person;
    fakePersonModel.Persons.Add(person);
    return new PersonController(fakePersonModel);
  }

  [TestMethod]
  public void It_should_retrieve_the_tallest_person_from_the_person_model()
  {
    var personController = CreatePersonControllerWithDependencies();
    var actualPerson = personController.RetrieveTallestPerson();

    actualPerson.should().be_the_same_as_the(TallestPerson);
  }

  [TestMethod]
  public void It_should_retrieve_all_people_in_alphabetical_order_of_last_name()
  {
    var personController = CreatePersonControllerWithDependencies();
    var allPeople = personController.RetrieveAllPeople();

    allPeople.Count.should().equal(2);
    allPeople[0].should().be_the_same_as_the(FirstPerson);
  }
}
[/sourcecode]

If you haven’t figured it out already, then what all these suggestions amount to, is this: Treat your tests as well as your production code if you want people to bother keeping them up to date.

It is simply the <a href="http://www.artima.com/intv/fixit.html">broken windows idea from pragmatic programmer</a>.&nbsp; If you haven’t got some sort of mechanism to hold people accountable for build breakages, then simply getting in there and caring enough to fix the broken windows might be all you have left.

Broken windows? Don’t live with them. Give a damn.]]></content:encoded>
  <excerpt:encoded><![CDATA[Leon Bambrick has written some great posts lately, and two things have really struck a chord with me. ]]></excerpt:encoded>
  <wp:post_id>826828</wp:post_id>
  <wp:post_date>2009-02-09 08:28:27</wp:post_date>
  <wp:post_date_gmt>2009-02-08 22:58:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>giving-a-damn-about-the-broken-windows</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="coding"><![CDATA[Coding]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[826828]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[826828]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Software changes</title>
  <link>https://maintenancecoder.wordpress.com/2009/02/05/software-changes/</link>
  <pubDate>Wed, 04 Feb 2009 22:18:51 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">/blog/PermaLink,guid,cb9eace6-83e5-452e-b847-a46ca09dda0b.aspx</guid>
  <description/>
  <content:encoded><![CDATA[How you react and prepare for change is very important; it can make or break a project. Allow for changes that wont come and you’ve written too much code. Forget to allow for other types of change and your application becomes either brittle or unwieldy in the face of change.

Software change <a href="http://www.comp.lancs.ac.uk/computing/resources/IanS/SE7/ElectronicSupplements/SWChange.pdf">has been divided into 3 flavours in the past:</a>
<h2>Re-architecture</h2>
Re-architecture is a more ruthless variety of change that involves changing the very foundations of the software to cope with new requirements. A classic move would be from a single tier application to an n-tier design in order to allow for multiple users.
<h2>Re-engineering</h2>
Re-engineering is essentially refactoring; the process of re-writing software to make it easier to understand, without adding new functionality. Its the type of change

developers love, but project managers hate, and architects put up with. Simplification, removal of duplication, consistency etc. All the good stuff.
<h2>Software Maintenance</h2>
Maintenance is the act of reacting to a change in software requirements, however the fundamental software structure is not changed. This is the change we tend to deal with the most as developers, requirements are forever changing from the end user, to the very platforms we work on. I’m mainly picking on this kind of change, however I’m going to split hairs even further.
<h2>2 Kinds of Requirements Change</h2>
There are possibly more, but I’m thinking of two types in particular:
<ul>
	<li>Changes that are unilateral</li>
	<li>Changes that… aren’t</li>
</ul>
What I mean is this. <strong>If you cannot avoid changing something in all layers of your software in order to accommodate a new or updated requirement, then you have a unilateral change.</strong> An example would be in a typical line of business application.

The product owner would like you to add support for a second telephone number. The software currently supports one. No matter how many layers you have, you will likely need to change all of them to support this change. <strong>Having a PersonDTOFactoryServiceManagerProvider class might get in the way of a good time here.</strong>

In this same application, the user now informs you that the business rules for the concept of “Deferred” has changed. This is a localizable change – handled properly. Good apps will have this sort of logic tucked away in its own layer, and will not need to be replicated in either the UI or the DB. <strong>Badly written, tightly coupled apps will have you writing code in UI event handlers and SQL change scripts.</strong>

Localizable changes happen daily and they cost developers time by the bucket load. I expect them to occur and I lovingly call reacting to these changes as ‘my job’. Unilateral changes on the other hand, tend to come en masse with deadlines attached. <strong>They can be mistakenly given too much weight in the design process as a result.</strong> It’s these changes that can cause a developer to contract a phobia of layers. Personally, I expect these changes to occur almost as often as the former, however I like to call these changes ‘version next’ where at all possible.
<h2>Defence</h2>
<strong>The real issue is defending oneself from change and how much defence to put up, and how much that defence costs you. </strong>The method of protecting yourself from unilateral change, is to minimize the amount of layers you have to deal with when unilateral changes occur. Defending yourself against localizable changes, is often done by increasing the number of layer in your application, mainly to improve the chances of changes only effecting one layer at a time.

“Layer” is a difficult term, and I use it in the sense that they talk to one another via an interface. They do not depend on one another in order to perform their function. Think ‘abstraction layer’.
<h2>Conflict</h2>
The tension between these two types of change could be seen as a manifestation of <a href="http://en.wikipedia.org/wiki/Conway's_Law">Conway’s Law</a>. I also believe that this tension is why n-tier applications tend towards a <a href="http://en.wikipedia.org/wiki/Multitier_architecture">layer count of 3 and above</a>. Adding layers can be the simplest way to turn what appears to be a horrible sweeping change. For instance you can use the <a href="http://en.wikipedia.org/wiki/Multitier_architecture#Comparison_with_the_MVC_architecture">MVC pattern</a> to separate the UI from the DAL. The danger now is that you now have more work to do when a change comes along that will effect the endpoints of your application. If the user demands that second address, then the PersonView, the PersonController, the PersonModel, the PersonService, the AddressRepository, the AddressAdapter and the Address and Person Table will need to be changed. Oh I wish we had only 2 layers again.

However, the moment that the Address needs to be formatted differently, depending on which view the user is using, you will thank yourself for having that PersonController there.
<h2>Conclusion</h2>
It is clear to me that, both types of maintenance changes occur and both need to be allowed for. Dismissing one type over the other is a mistake. Favouring less layers to account for the 50 columns you know the user is going to add is as foolish as over engineering a solution to protect oneself from imaginary gremlins.

Another point is that there are already so many layers in an application, and that can be seen from two perspectives: that one more layer wont hurt, or that one more will be the straw that breaks the camels back. Its up to you.

However, a pragmatist will employ rigorous application of <a href="http://en.wikipedia.org/wiki/YAGNI">YAGNI</a>. Don’t create more layers until you absolutely need them, but do not shy away from creating layers when change is on the horizon. <a href="http://www.codinghorror.com/blog/archives/000705.html">Leaving design decisions as late as possible</a> will ensure you learn to Say No to frivolous layers of abstraction. <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a> (When Used Correctly™), <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">SRP</a> and <a href="http://en.wikipedia.org/wiki/Inversion_of_Control">IOC</a>, will guide the developer to produce code that will cope better with change without over engineering it. Oh, and you’ll be able to join the <a href="http://en.wikipedia.org/wiki/Three-letter_abbreviation">TLA</a> club too.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>826830</wp:post_id>
  <wp:post_date>2009-02-05 07:48:51</wp:post_date>
  <wp:post_date_gmt>2009-02-04 22:18:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>software-changes</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="architecture"><![CDATA[Architecture]]></category>
  <category domain="post_tag" nicename="change-management"><![CDATA[Change management]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[826830]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[826830]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Languages are tools, use them.</title>
  <link>https://maintenancecoder.wordpress.com/2008/10/17/languages-are-tools/</link>
  <pubDate>Thu, 16 Oct 2008 19:08:15 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">/blog/PermaLink,guid,ab0fa2bd-62eb-4f3d-ae1b-e004a0f0528b.aspx</guid>
  <description/>
  <content:encoded><![CDATA[While I think its great that I can use C# to express functional concepts, I also think that for anything more than the odd lambda expression, that I'm using the wrong tool for the job.

If large portions of your code begin with:<code>&lt;Expression&lt;Func&lt;T, R&gt;&gt;</code> Then have a think about what it is you are trying to achieve. Sure, the usage may look fine, the fact remains that you're trying to express concepts at a level of abstraction that C style languages aren't equipped to cope with. Personally I think the well rounded coder would feel more comfortable writing an F# or Scala Library.

Why bang your head against C# to write DSL's when Boo will go out of its way to make it easy for you? Found yourself falling in love with AOP techniques and have consumed 3rd party libraries to get it done? Did you provide an interface layer to decouple that dependency? Why aren't we just naturally breaking out into IronRuby/Python here?

The only reason I use C# 3 to write unit tests these days is there isn't really a viable testing language created yet. A few years ago and beyond we had an excuse. Each language usually had its chosen platform and it didn't play well with others. Using Erlang made sense for telecommunication work, but it would be considered counter productive to write a windows GUI in that language. Similarly, you simply wouldn't bother using VB to write code for massively multithreaded environments.

Today, we have no excuse. The fact is that the Common Language Runtime provides us a mechanism to use the right language for the task at hand, and not only that, compile in a cross language solution, such that the net result is completely seamless to the untrained eye. The 'core strengths' that the average business application developer is available for <a href="http://en.wikipedia.org/wiki/List_of_CLI_Languages">any CLI language</a>.

Today, we are only restricted by those who refuse to learn new languages, when in fact, learning has never been simpler.]]></content:encoded>
  <excerpt:encoded><![CDATA[While I think its great that I can use C# to express functional concepts, I also think that for anything more than the odd lambda expression, that I'm using the wrong tool for the job.]]></excerpt:encoded>
  <wp:post_id>826831</wp:post_id>
  <wp:post_date>2008-10-17 04:38:15</wp:post_date>
  <wp:post_date_gmt>2008-10-16 19:08:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>languages-are-tools</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="clr"><![CDATA[CLR]]></category>
  <category domain="post_tag" nicename="coding"><![CDATA[Coding]]></category>
  <category domain="post_tag" nicename="languages"><![CDATA[Languages]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="tools"><![CDATA[Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[826831]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[826831]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Seriously, Why Test First?</title>
  <link>https://maintenancecoder.wordpress.com/2008/10/01/why-test-first/</link>
  <pubDate>Tue, 30 Sep 2008 22:04:17 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">/blog/PermaLink,guid,ac323066-814e-4ae8-a81f-02d25a4dc648.aspx</guid>
  <description/>
  <content:encoded><![CDATA[Is <a href="http://en.wikipedia.org/wiki/Test_Driven_Development">TDD</a> over the top? Surely I can write my tests 'alongside' my code?

Short answer: No.

Long answer:

To borrow Michael Feathers, author of <a href="http://www.objectmentor.com/resources/articles/WorkingEffectivelyWithLegacyCode.pdf">"Working effectively with Legacy Code"</a> the definition of legacy code is code without tests. By writing a function without a test first, you've just banged out a whole bunch of legacy code. It might not feel like it, but you could have just wasted your precious time.

OK, so lets pretend we have some of this legacy code in front of us. We begin writing some tests to cover it. What you'll find is that many programmers do one of a few things:
<ul>
	<li>Coder A will write four or five tests for every method and generally not have to change their implementation much, if at all.</li>
	<li>Coder B writes less tests overall, but in order to get it there they had to change their code due to recognising some unnecessary coupling or logic.</li>
</ul>
The next few examples are people who would have used TDD or no tests at all...
<ul>
	<li>Coder C used TDD but strangely the end result looks like Coder A's code.</li>
	<li>Coder D thinks unit testing is a waste of time, and has already deployed to production by now and is currently smugly sipping on Kool Aid.</li>
	<li>Coder E only wrote a few tests, each test concerned with what the code should do, not what the code currently does, or how it goes about doing it.</li>
</ul>
Now that we have brutally put everybody in a box with rash generalizations and assumptions, lets come up with a way to throw a cat amongst the pigeons. Generally the best way to do this to a developer, is to ask them to add a new feature to their code.
<ul>
	<li>Coder A when finished, finds that all the old tests wont even compile let alone pass because the new requirements severely altered the required architecture. Time is wasted rewriting all the tests to facilitate the new architectural requirements.</li>
	<li>Coder B finds that only half of the old tests build or pass after implementing the new code. Because they removed some coupling it was easy enough to add, but they wasted time on some old tests that were obsolesced by the new architecture.</li>
	<li>Coder C decides that the existing test suite isn't going to facilitate the new requirements. After they rewrite most of their tests they rewrite the code to satisfy them. Its like much Coder A's experience just in reverse.</li>
	<li>Coder D deploys the new code to production or QA, only to find that the new changes stomped all over old functionality. What do you mean it 'doesn't work'? <em>That's impossible! </em>Time for a week long debugging session.</li>
	<li>Coder E on the other hand writes one more test to the test suite and adds as little code as necessary to make it pass, then brutally refactors anything possible. None of the tests needed rewriting in the process. All user requirements are met and the project is delivered on time and on budget. If your lucky that is...</li>
</ul>
What some people fail to understand, is that using TDD doesn't prevent you from writing bad code. On the contrary, <strong>it can encourage you to over specify things</strong>.

When you over specify, you increase the places in your test suite that depend on how your implementation is structured. The very same thing happens when you write a function, and then a test or write tests 'alongside' your code. This is the mistake that Coder C makes, taking the bull by the tail, instead of the horns.

Coder E has no idea that he/she is in part practicing <a href="http://en.wikipedia.org/wiki/Behavior_Driven_Development">BDD</a>. Its a natural progression from blindly banging out tests to cover every feasible outcome. Eventually you get a feel for tests that give you maximum 'bang for buck'. These tests provide maximum (quality) coverage for the least effort. In other words, we aren't bothering with a test per function. We are writing one test per <em>desired behaviour</em>. OK so every now and again, you head down the wrong track and tear up a few behavioural tests. Usually that's because you misunderstood the requirements, not how to code it, and that's where the value lies.

<strong>If you cant write a behavioural test, then you haven't understood the problem fully</strong>. If you don't understand the users problem, why are you coding?

That's why initially, its tempting to TDD blindly, you can ignore certain aspects of the users problem and just simply code until you think you got it right. Of course there are a few other aspects to BDD that I'm sure you're either aware of, or hopefully discover after reading this, but its important to remember:

BDD isn't something new and funky fresh. Its not the latest soda pop fad. At its heart its simply <strong>TDD</strong><strong> Done Well</strong>.]]></content:encoded>
  <excerpt:encoded><![CDATA[Is TDD over the top? Surely I can write my tests 'alongside' my code?

Short answer: No.]]></excerpt:encoded>
  <wp:post_id>826832</wp:post_id>
  <wp:post_date>2008-10-01 07:34:17</wp:post_date>
  <wp:post_date_gmt>2008-09-30 22:04:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>why-test-first</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="bdd"><![CDATA[BDD]]></category>
  <category domain="post_tag" nicename="coding"><![CDATA[Coding]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[826832]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[826832]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>for the REST of us</title>
  <link>https://maintenancecoder.wordpress.com/2009/03/05/for-the-rest-of-us/</link>
  <pubDate>Wed, 04 Mar 2009 15:43:20 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">/blog/PermaLink,guid,5a5293b4-5f66-4d09-92b0-875777cdf0d8.aspx</guid>
  <description/>
  <content:encoded><![CDATA[Probably the only POST about REST that I GET that PUTs everything in simple terms

so that I don’t feel compelled to DELETE it from my blog reader.

<a href="http://tomayko.com/writings/rest-to-my-wife">http://tomayko.com/writings/rest-to-my-wife</a>

<img src="http://www.nervoustych.com/blog/aggbug.ashx?id=5a5293b4-5f66-4d09-92b0-875777cdf0d8" alt="" width="0" height="0" />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>826833</wp:post_id>
  <wp:post_date>2009-03-05 01:13:20</wp:post_date>
  <wp:post_date_gmt>2009-03-04 15:43:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>for-the-rest-of-us</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="rest"><![CDATA[REST]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[826833]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[826833]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>image001</title>
  <link>https://maintenancecoder.wordpress.com/2011/12/05/getting-started-with-wcf-over-ssl-2/image001/</link>
  <pubDate>Sun, 04 Dec 2011 23:55:31 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/12/image001.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[image001]]></excerpt:encoded>
  <wp:post_id>826840</wp:post_id>
  <wp:post_date>2011-12-05 09:25:31</wp:post_date>
  <wp:post_date_gmt>2011-12-04 23:55:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>image001</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>826839</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/12/image001.png</wp:attachment_url>
</item>
<item>
  <title>image002</title>
  <link>https://maintenancecoder.wordpress.com/2011/12/05/getting-started-with-wcf-over-ssl-2/image002/</link>
  <pubDate>Sun, 04 Dec 2011 23:55:31 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/12/image002.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[image002]]></excerpt:encoded>
  <wp:post_id>826841</wp:post_id>
  <wp:post_date>2011-12-05 09:25:31</wp:post_date>
  <wp:post_date_gmt>2011-12-04 23:55:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>image002</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>826839</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/12/image002.png</wp:attachment_url>
</item>
<item>
  <title>image003</title>
  <link>https://maintenancecoder.wordpress.com/2011/12/05/getting-started-with-wcf-over-ssl-2/image003/</link>
  <pubDate>Sun, 04 Dec 2011 23:55:31 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/12/image003.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[image003]]></excerpt:encoded>
  <wp:post_id>826842</wp:post_id>
  <wp:post_date>2011-12-05 09:25:31</wp:post_date>
  <wp:post_date_gmt>2011-12-04 23:55:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>image003</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>826839</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/12/image003.png</wp:attachment_url>
</item>
<item>
  <title>image004</title>
  <link>https://maintenancecoder.wordpress.com/2011/12/05/getting-started-with-wcf-over-ssl-2/image004/</link>
  <pubDate>Sun, 04 Dec 2011 23:55:32 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/12/image004.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[image004]]></excerpt:encoded>
  <wp:post_id>826843</wp:post_id>
  <wp:post_date>2011-12-05 09:25:32</wp:post_date>
  <wp:post_date_gmt>2011-12-04 23:55:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>image004</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>826839</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/12/image004.jpg</wp:attachment_url>
</item>
<item>
  <title>image005</title>
  <link>https://maintenancecoder.wordpress.com/2011/12/05/getting-started-with-wcf-over-ssl-2/image005/</link>
  <pubDate>Sun, 04 Dec 2011 23:55:32 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/12/image005.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[image005]]></excerpt:encoded>
  <wp:post_id>826844</wp:post_id>
  <wp:post_date>2011-12-05 09:25:32</wp:post_date>
  <wp:post_date_gmt>2011-12-04 23:55:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>image005</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>826839</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/12/image005.jpg</wp:attachment_url>
</item>
<item>
  <title>image006</title>
  <link>https://maintenancecoder.wordpress.com/2011/12/05/getting-started-with-wcf-over-ssl-2/image006/</link>
  <pubDate>Sun, 04 Dec 2011 23:55:33 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/12/image006.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[image006]]></excerpt:encoded>
  <wp:post_id>826845</wp:post_id>
  <wp:post_date>2011-12-05 09:25:33</wp:post_date>
  <wp:post_date_gmt>2011-12-04 23:55:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>image006</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>826839</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/12/image006.jpg</wp:attachment_url>
</item>
<item>
  <title>image007</title>
  <link>https://maintenancecoder.wordpress.com/2011/12/05/getting-started-with-wcf-over-ssl-2/image007/</link>
  <pubDate>Sun, 04 Dec 2011 23:55:33 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/12/image007.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[image007]]></excerpt:encoded>
  <wp:post_id>826846</wp:post_id>
  <wp:post_date>2011-12-05 09:25:33</wp:post_date>
  <wp:post_date_gmt>2011-12-04 23:55:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>image007</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>826839</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/12/image007.png</wp:attachment_url>
</item>
<item>
  <title>image008</title>
  <link>https://maintenancecoder.wordpress.com/2011/12/05/getting-started-with-wcf-over-ssl-2/image008/</link>
  <pubDate>Sun, 04 Dec 2011 23:55:34 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/12/image008.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[image008]]></excerpt:encoded>
  <wp:post_id>826847</wp:post_id>
  <wp:post_date>2011-12-05 09:25:34</wp:post_date>
  <wp:post_date_gmt>2011-12-04 23:55:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>image008</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>826839</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/12/image008.png</wp:attachment_url>
</item>
<item>
  <title>image009</title>
  <link>https://maintenancecoder.wordpress.com/2011/12/05/getting-started-with-wcf-over-ssl-2/image009/</link>
  <pubDate>Sun, 04 Dec 2011 23:55:34 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/12/image009.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[image009]]></excerpt:encoded>
  <wp:post_id>826848</wp:post_id>
  <wp:post_date>2011-12-05 09:25:34</wp:post_date>
  <wp:post_date_gmt>2011-12-04 23:55:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>image009</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>826839</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/12/image009.png</wp:attachment_url>
</item>
<item>
  <title>image010</title>
  <link>https://maintenancecoder.wordpress.com/2011/12/05/getting-started-with-wcf-over-ssl-2/image010/</link>
  <pubDate>Sun, 04 Dec 2011 23:55:34 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/12/image010.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[image010]]></excerpt:encoded>
  <wp:post_id>826849</wp:post_id>
  <wp:post_date>2011-12-05 09:25:34</wp:post_date>
  <wp:post_date_gmt>2011-12-04 23:55:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>image010</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>826839</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/12/image010.png</wp:attachment_url>
</item>
<item>
  <title>image011</title>
  <link>https://maintenancecoder.wordpress.com/2011/12/05/getting-started-with-wcf-over-ssl-2/image011/</link>
  <pubDate>Sun, 04 Dec 2011 23:55:34 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/12/image011.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[image011]]></excerpt:encoded>
  <wp:post_id>826850</wp:post_id>
  <wp:post_date>2011-12-05 09:25:34</wp:post_date>
  <wp:post_date_gmt>2011-12-04 23:55:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>image011</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>826839</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/12/image011.png</wp:attachment_url>
</item>
<item>
  <title>image012</title>
  <link>https://maintenancecoder.wordpress.com/2011/12/05/getting-started-with-wcf-over-ssl-2/image012/</link>
  <pubDate>Sun, 04 Dec 2011 23:55:35 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/12/image012.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[image012]]></excerpt:encoded>
  <wp:post_id>826851</wp:post_id>
  <wp:post_date>2011-12-05 09:25:35</wp:post_date>
  <wp:post_date_gmt>2011-12-04 23:55:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>image012</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>826839</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/12/image012.png</wp:attachment_url>
</item>
<item>
  <title>Changing web services soap:address for SSL enabled IIS web services</title>
  <link>https://maintenancecoder.wordpress.com/?p=826878</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.wordpress.com/?p=826878</guid>
  <description/>
  <content:encoded><![CDATA[SCENARIO:

You have just deployed a shiny WCF Service to https://awesome.website.com/service1.svc/

Browsing to https://awesome.website.com/service1.svc?wsdl works as expected, however when trying to generate a service client (using svcutil) the following error occurs:

[caption id="attachment_826880" align="aligncenter" width="300" caption="command console showing the error with SVCUtil.exe"]<a href="http://maintenancecoder.files.wordpress.com/2011/12/capture1.png"><img class="size-medium wp-image-826880" title="SVCUtil.exe error" src="http://maintenancecoder.files.wordpress.com/2011/12/capture1.png?w=300" alt="Screen capture of a command console showing an error with SVCUtil.exe" width="300" height="63" /></a>[/caption]

You notice that the WSDL contains an incorrect soap:address - its pointing to your websites internal name for instance. This is because WCF populates these addresses from the IIS Site bindings. Setting the HostName is not supported when you create SSL bindings in IIS 7. Setting the HostName is as easy as editing your IIS application.config like so.

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>826878</wp:post_id>
  <wp:post_date>2011-12-15 12:53:38</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[11285636]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>svc</title>
  <link>https://maintenancecoder.wordpress.com/?attachment_id=826879</link>
  <pubDate>Tue, 13 Dec 2011 05:22:58 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/12/capture.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>826879</wp:post_id>
  <wp:post_date>2011-12-13 14:52:58</wp:post_date>
  <wp:post_date_gmt>2011-12-13 05:22:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>capture</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>826878</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/12/capture.png</wp:attachment_url>
</item>
<item>
  <title>SVCUtil.exe error</title>
  <link>https://maintenancecoder.wordpress.com/?attachment_id=826880</link>
  <pubDate>Tue, 13 Dec 2011 05:25:04 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/12/capture1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[command console showing the error with SVCUtil.exe]]></excerpt:encoded>
  <wp:post_id>826880</wp:post_id>
  <wp:post_date>2011-12-13 14:55:04</wp:post_date>
  <wp:post_date_gmt>2011-12-13 05:25:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>capture-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>826878</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/12/capture1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Screen capture of a command console showing an error with SVCUtil.exe]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Container Lifetime and web requests</title>
  <link>https://maintenancecoder.wordpress.com/?p=826883</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.wordpress.com/?p=826883</guid>
  <description/>
  <content:encoded><![CDATA[<p>I recently encountered a strange issue with a WCF service I'm helping to develop. Subsequent requests to a service operation was returning the same results, regardless of input.</p><p>When debugging this service in Visual Studio it worked fine (using the internal web server), but as soon as I deployed it to a staging environment (IIS 7.5, SSL &amp; Message level security turned on) the service started to appear to cache responses.</p><p>To cut a long story short: it was our DI container not creating objects per web request, but per application lifetime. If you use autofac for ASP MVC, you're probably used to it having a per request lifetime: the autofac integration rigs this up for you. If you try this in a web service though, you'll need to go and DIY.</p><p>This <a href="http://nblumhardt.com/2011/01/an-autofac-lifetime-primer/">comprehensive article</a> explains it all better than I can, but if its a case of tl;dr....here is a good takeaway straight from Nicks playbook:</p><p><strong>Don’t resolve from the root container. Always resolve from and then release a lifetime scope.</strong></p><p>...good advice!</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>826883</wp:post_id>
  <wp:post_date>2011-12-22 13:47:05</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Prototyping in node.js on windows</title>
  <link>https://maintenancecoder.wordpress.com/?p=827027</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.wordpress.com/?p=827027</guid>
  <description/>
  <content:encoded><![CDATA[If you've been like me and left jumping on node a little late, now might be a good time. Windows support seems to have settled to a point where you can expect a decent installation experience, a package manager and Azure support.

One of the simplest things you can do with node is serve up single pages, so I'll walk through installing and getting going with a single page, through to an MVC application based on the popular library, express.

From there its up to your imagination, there is a huge selection of quality packages on npmjs.org and you can interface to most kinds of data your likely to want to interface with.

YOU WILL NEED:
<ul>
	<li>A text editor</li>
	<li>The latest node installer from <a href="http://nodejs.org/">http://nodejs.org</a></li>
</ul>
If you have an previous versions of node installed I'd suggest removing them, to be on the safe side. After running the installer, and fire up cmd or powershell. I needed to put the location of NPM on my path to run it from any location. Generally, that will be 'C:\program files(x86)\nodejs\

PROXIES

NPM will use your internet connection to update packages on your system, so if you are behind a proxy I suggest one of the three following approaches:
<ol>
	<li>Create a HTTP_Proxy environment variable and set it to the URL of your proxy (basic auth only AFAIK)  e.g.
HTTP_PROXY = "http://yourdomain\User:P4ssw0rd@10.1.2.2/"</li>
	<li>I needed to turn off HTTPS and use HTTP, to do this run the following command:
npm set registry http://registry.npmjs.org/</li>
</ol>
<div>Confirm that it all works by typing 'node' to bring up the node console:</div>
<div><a href="http://maintenancecoder.files.wordpress.com/2012/01/capture.png"><img class="size-full wp-image" src="http://maintenancecoder.files.wordpress.com/2012/01/capture.png?w=309" alt="Image" /></a></div>
<div></div>
<div>LETS GET NODING</div>
There are a tonne of nodejs 'hello worlds' (or hello ladies) out there , and while thats is great if you want to start diving into the standard libraries that ship with node, becuase before too long, you will wa]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827027</wp:post_id>
  <wp:post_date>2012-01-15 14:29:05</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[11285636]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_060f823dc2c319b0e9cef3d5bda25c34</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Capture</title>
  <link>https://maintenancecoder.wordpress.com/capture-3/</link>
  <pubDate>Fri, 06 Jan 2012 05:56:09 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2012/01/capture.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827168</wp:post_id>
  <wp:post_date>2012-01-06 15:26:09</wp:post_date>
  <wp:post_date_gmt>2012-01-06 05:56:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>capture-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2012/01/capture.png</wp:attachment_url>
</item>
<item>
  <title>API</title>
  <link>https://maintenancecoder.wordpress.com/2013/06/20/exposing-dot-net-to-asp-via-com/api/</link>
  <pubDate>Thu, 20 Jun 2013 02:51:16 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2013/06/api.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827201</wp:post_id>
  <wp:post_date>2013-06-20 12:21:16</wp:post_date>
  <wp:post_date_gmt>2013-06-20 02:51:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>api</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827198</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2013/06/api.png</wp:attachment_url>
</item>
<item>
  <title>A -match made in :heaven</title>
  <link>https://maintenancecoder.wordpress.com/2010/01/06/a-match-made-in-heaven/</link>
  <pubDate>Tue, 05 Jan 2010 15:03:15 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=826879</guid>
  <description/>
  <content:encoded><![CDATA[Today I'm bringing together two of my favourite things. Powershell, and vim.

Don't get me wrong, the <a href="http://technet.microsoft.com/en-us/library/dd315244.aspx">new ISE</a> is fancy. It's <strong>the tool</strong> if you intend to learn how to use powershell, or if you want to debug a hairy script. But you can't code in another programming language and use powershell's awesome feature set from <em>within</em> the ISE. This is something vim is great at; shell integration.

As a bit of a Linux fan I was more than happy to turf the age-old dos shell from vim on windows anyway. Replacing it with shiny powershell v2 goodness is a breeze. Just add the following to your _vimrc.

[sourcecode language="bash"]
set shell=powershell.exe
set shellcmdflag=-Command
set shellpipe=|
set shellredir=&gt;
[/sourcecode]

Now we're all set to perform some vim/powershell tricks...

[sourcecode language="powershell"]
# go fetch the lines in a text file that match expr and insert the line into the current buffer
:r ! gc ~someApp.log | where { $_ -match  'expr' }

# change the readonly flag of the current file
:silent ! set-itemProperty %:p IsReadOnly $false

# select properties on clr objects and dump as csv into the buffer
:r ! ps | select Name, Path | convertTo-csv

# read a csv file and output the only 'name' column into the buffer
:r ! import-csv test.csv | select name
[/sourcecode]

And if you haven't already done so, rig up syntax highlighting, indentation and filetype detection for ps1 files themselves, thanks to <a href="http://www.peterprovost.org/">Peter Provost</a>:
<ul>
	<li><a href="http://www.vim.org/scripts/script.php?script_id=1327">Syntax highlighting</a></li>
	<li><a href="http://www.vim.org/scripts/script.php?script_id=1815">Indentation defaults</a></li>
	<li><a href="http://www.vim.org/scripts/script.php?script_id=1816">Filetype detection</a></li>
</ul>
To mimic the ISE auto completion we can turn on some newer vim features. Vim has built-in keyword completion for a <a href="http://vimdoc.sourceforge.net/htmldoc/version7.html#new-omni-completion">variety of languages</a>. It also has a clever fallback; it can parse syntax highlighting files for language keywords and other important words. To do this, without disturbing other built-in language completion, the following addition to the vimrc works well:

[sourcecode language="bash"]

filetype plugin on
if has(&quot;autocmd&quot;) &amp;&amp; exists(&quot;+omnifunc&quot;)
	autocmd Filetype *
		    	if &amp;omnifunc == &quot;&quot; |
		    		setlocal omnifunc=syntaxcomplete#Complete |
		    	endif
endif
[/sourcecode]

While this is nice, the powershell syntax highlighting file is written too cleverly for omni completion to be truly useful. A quick and dirty hack is to include all the standard cmdlets names in the highlighting file. Perhaps I'll get my head around the vim scripting required to produce ps1complete some other rainy day. For now, we can just  bring in the entire set of cmdlet names into syntax/ps1.vim:

[sourcecode language="powershell"]

:r ! get-command | where { $_.CommandType -eq 'Cmdlet' } | Select Name

[/sourcecode]

(I'll leave it as an exercise for the reader to optimize the powershell required to only bring in the distinct words from the list of cmdlet names as a space delimited string)

[sourcecode language="bash"]
syn keyword ps1Cmdlet Add-Content Add-History...... #etc
[/sourcecode]

If your learning powershell, its still best to use the ISE, this tweak is only useful if you know what you're looking for. For those comfortable with powershell and vim, this can allow you to stay in your favourite editor longer, before requiring the ISE.]]></content:encoded>
  <excerpt:encoded><![CDATA[One of the reasons vim is so popular with the *nix crowd is that it integrates with text based shells so completely. Historically, on windows this meant you could only take advantage of good old dos.]]></excerpt:encoded>
  <wp:post_id>827217</wp:post_id>
  <wp:post_date>2010-01-06 00:33:15</wp:post_date>
  <wp:post_date_gmt>2010-01-05 15:03:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-match-made-in-heaven</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[Powershell]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="vim"><![CDATA[vim]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[826879]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[826879]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>44</wp:comment_id>
    <wp:comment_author><![CDATA[Jason Stangroome]]></wp:comment_author>
    <wp:comment_author_email>jason@codeassassin.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.codeassassin.com</wp:comment_author_url>
    <wp:comment_author_IP>61.8.3.160</wp:comment_author_IP>
    <wp:comment_date>2010-01-06 07:30:00</wp:comment_date>
    <wp:comment_date_gmt>2010-01-05 22:00:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Reader exercise solution:
(Get-Command -CommandType Cmdlet | Select-Object -Unique -ExpandProperty Name) -join ' ']]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-01-05 22:00:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Tools of the trade: source control</title>
  <link>https://maintenancecoder.wordpress.com/2010/01/08/tools-scs/</link>
  <pubDate>Fri, 08 Jan 2010 14:14:42 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=826937</guid>
  <description/>
  <content:encoded><![CDATA[On the road to work this morning I was listening to a <a href="http://www.se-radio.net/podcast/2009-11/episode-150-software-craftsmanship-bob-martin">good podcast</a> from SE radio, on software craftsmanship, with Uncle Bob, and during the discussion he was asked what he thought the tools of the trade were. Among his measured responses, source control systems.

I would encourage anybody not already using source control to pick one, and use it. It wont simply make your code more resilient to breakage. If you are working in a team, it will actually improve your teams communication <em>immediately.</em> What isn't advertised much, is that a good SCS is also a <strong>framework for collaborating</strong> on software. Suddenly conversations flare about merging changes, when to branch and label code, where shall the 'production' branch live, what will the backup strategy be, etc.

Additionally, source control is the medium in which the <a href="http://www.informit.com/articles/article.aspx?p=1235624&amp;seqNum=6">boy scout rule</a> can flourish, preventing the <a href="http://en.wikipedia.org/wiki/Fixing_Broken_Windows#The_book">broken windows</a> from taking over your code base.

I could distill a bullet point summary on how to use a particular variety of source control, but instead I'll just direct you to the <a href="http://svnbook.red-bean.com/">subversion book</a>. The pdf and html versions are free and well worth the read. While learning how to use subversion, it also makes an excellent primer on the concepts of merge based, client/server source control which you can take to most popular systems and get started quickly. Once you've mastered SVN, other systems like git and TFS aren't a big leap in understanding.

As far as clients go, on the mac, I use textmate or vim, both are easily configured to map command line actions with keystrokes. Eclipse based IDEs generally support subversion, as does monodevelop. On windows, visual studio plugins include <a href="http://www.visualsvn.com/visualsvn/">visual svn</a> &amp; <a href="http://ankhsvn.open.collab.net/">ankh</a>. I prefer <a href="http://tortoisesvn.tigris.org/">tortoiseSVN</a>, mainly because it simply extends explorer and gives a UX closer to the command line variety that I know already.

Ultimately, no matter what SCS you pick, or what client tool you choose, something is better than nothing. At the very least, it will get you thinking about the management of your biggest asset, your code.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827218</wp:post_id>
  <wp:post_date>2010-01-08 23:44:42</wp:post_date>
  <wp:post_date_gmt>2010-01-08 14:14:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tools-scs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[826937]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[826937]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Translating lambda expressions</title>
  <link>https://maintenancecoder.wordpress.com/2010/01/27/translating-lambda-expressions/</link>
  <pubDate>Wed, 27 Jan 2010 09:00:28 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=826952</guid>
  <description/>
  <content:encoded><![CDATA[They're the new black of programming languages - lambda expressions - a powerful construct, used &amp; abused to ultimately produce more readable code. I find myself using them most when taking advantage of the Linq libraries.

A naive example In C#:

[sourcecode language="csharp"]
public IQueryable GetActiveUsers() {
 return AllUsers.Where((user) =&gt; user.IsActive; );
}
[/sourcecode]

In VB .NET:

[sourcecode language="vb"]
Public Function GetActiveUsers() as IQueryable(Of User)
 Return AllUsers.Where(Function (user) user.IsActive )
End Function
[/sourcecode]

In F#:

[sourcecode language="fsharp"]
member self.GetActiveUsers =
 AllUsers |&gt; List.filter (fun user -&gt; user.IsActive)
[/sourcecode]

Though lately, there are more cases where lambdas are used to simplify an API that I might be using. Lambdas make for declarative code, describing what you want, not how you want it done. The canonical example is surely the trend away from the record/replay model in mocking frameworks of late:

[sourcecode language="csharp"]
[Test]
public void it_should_launch_nuclear_missles()
{
 IMissleLauncher launcher = new Mock();
 DoomsdayDevice dd = new DoomsdayDevice(launcher.Object);
 dd.ActivateWithMessage(&quot;BROUAHAH&quot;);

 launcher.Verify(l =&gt; l.Launch(Missles.Nuclear));
}
[/sourcecode]

Generally, this type of API uses the syntax tree generated for the lambda expression, to determine the consumers intent, in order to translate that intent to some other function. In the Linq 2 SQL case, the tree is turned into SQL statements.

But not all .NET languages are created equally in the functional programming department, especially when it comes to building expression trees from these pieces of syntactic sugar. VB and C# can interchange them naturally - since they both use the System.Linq.Expressions namespace.

In F#, lambda expressions can also be interpreted via expression trees, using the Quotations namespace. While there is some overlap between the two namespaces, the focus is in different areas.

Right now what this means for multilanguage solutions is that an F# application cannot directly use its lambda function syntax to satisfy C# functions that use expressions. Unfortunately, this puts F# very much at odds with libraries in other .NET languages. More and more, we are seeing clever use of expressions to aid API developers in providing intuitive interfaces, and fiddling about with translating lambda expressions is the last thing a developer really wants to do when consuming an API, presumably to solve some other problem.

However all is not lost, hidden away in the Powerpacks are some experimental functions that allows us to attempt translation in both directions. For those instances where we aren't stretching the boundaries of C#, we can convert F# functions into expressions with the following:

[sourcecode language="fsharp"]
open Microsoft.FSharp.Linq.QuotationEvaluation ;;
open System ;;
let q = &lt;@ fun x -&gt; x = 0 @&gt; ;;
let expr = q.ToLinqExpression() ;;
[/sourcecode]

The powerpack provides a swag of extensions to the FSharp.Core.FuncConvert class in order to allow two way translation between F# and other languages that favour delegates.

From here we can drill into our expression to return more useful variations if required from our C# library. There are a tonne of ways to skin this cat; here in this simplistic example I use an active pattern matching to match expression types.

[sourcecode language="fsharp"]
 let (|MethodCall|Lambda|Unknown|) (expression:Expression) =
     match expression with
     | :? MethodCallExpression as m -&gt;
         MethodCall(m.Arguments)
     | :? LambdaExpression as l -&gt;
         Lambda(l.Body, l.Parameters)
     | _ -&gt; Unknown()

 let toLinqExpression (q:Expr&lt;'a-&gt;'b&gt;) =
     let expr = q.ToLinqExpression()
     let rec convert ex =
         match ex with
         | MethodCall (args) -&gt;
             convert args.[0]
         | Lambda (body, parameters) -&gt;
             Expression.Lambda&lt;func&lt;'a, 'b&gt;&gt;(body, parameters)
         | Unknown -&gt; raise(new NotSupportedException())
             convert expr
[/sourcecode]

<a href="http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fcultivatingcode.com%2f2010%2f01%2f27%2ftranslating-lambda-expressions%2f"><img src="http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fcultivatingcode.com%2f2010%2f01%2f27%2ftranslating-lambda-expressions%2f" border="0" alt="kick it on DotNetKicks.com" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827220</wp:post_id>
  <wp:post_date>2010-01-27 18:30:28</wp:post_date>
  <wp:post_date_gmt>2010-01-27 09:00:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>translating-lambda-expressions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="coding"><![CDATA[Coding]]></category>
  <category domain="post_tag" nicename="fsharp"><![CDATA[FSharp]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[826952]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[826952]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>45</wp:comment_id>
    <wp:comment_author><![CDATA[2010 in review &laquo; Cultivating code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://cultivatingcode.com/2011/01/06/2010-in-review/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.96.145</wp:comment_author_IP>
    <wp:comment_date>2011-01-06 08:35:40</wp:comment_date>
    <wp:comment_date_gmt>2011-01-05 23:05:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Translating lambda expressions January 2010      Comments RSS feed    LikeBe the first to like this post. [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1304644522</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1304644522.8373";s:7:"message";s:48:"Jim Burger changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"Jim Burger";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:14:"1294268740.438";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-01-05 23:05:40</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Five things I don't like about F#</title>
  <link>https://maintenancecoder.wordpress.com/2010/02/04/five-things-i-dont-like-about-f/</link>
  <pubDate>Thu, 04 Feb 2010 08:17:16 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827011</guid>
  <description/>
  <content:encoded><![CDATA[Don't get me wrong --<a href="http://twitter.com/jburger/status/7767727815"> I love F#</a> it's a terse creature capable of solving just about any problem you can throw at -- in no less than three different ways. The list of <a href="http://diditwith.net/CategoryView,category,Why%2BI%2BLove%2BF%23.aspx">things I love</a> about F# is so long that it's simply quicker for me to tell you about the things I hate. I also see a lot of unfounded criticism about whether the language should exist at all, and I was hoping to direct some honest and hopefully useful criticism instead.
<h2>5. Hiding bindings</h2>
Starting with something not so bad at all, some might even call this a feature, is the effect of scope on bindings. You can bind to the same name as something in a wider scope without compilation failure. You just need to expect the outcome. For instance, it is possible to compile the following:

[sourcecode language="fsharp"]
let name = &quot;Jim&quot;
for i in [1..10] do
    let name = name + i.ToString() // I wonder what name I'm talking to?
    printfn &quot;%s&quot; name //oh well I hope its the same as the last line...
printfn &quot;%s&quot; name

//fsi output:

Jim1
Jim2
Jim3
Jim4
Jim5
Jim6
Jim7
Jim8
Jim9
Jim10
Jim
[/sourcecode]

It all makes sense, until you read the last line of output. The answer is that there are actually two different bindings to 'name', one for each scope.

Once you've seen this, it makes plenty of sense, but until you've bumped into this language feature you can be scratching your head for some time.
<h2>4. Explicit interfaces</h2>
So the main sales pitch for F# is that it allows functional programming, but it's also one heck of a swiss army knife. Doing OO in a language like F# is not only OK, its encouraged. However, once I head down this road, I'm compelled to apply good practices - namely SOLID. Interfaces form part of those practices, and though the interface story is well crafted, the last piece in the puzzle is to be able to use them implicitly.

The argument against implicit usage is really quite simple: <strong>YAGNI!</strong>

<strong> </strong>While I'm on board with this line of thinking, I still feel that it would simply be more inline with the general .NET experience, given that so much good stuff is built on C# -- and it relies on implicit interfacing to keep APIs looking neat and tidy. I shouldn't be asked to throw the baby out with the bath water when it comes to using those libraries. It's unfortunate that the following will not compile:

[sourcecode language="fsharp"]
type IFoo =
  abstract Bar : string -&gt; unit

type Foo() =
  interface IFoo with
    member x.Bar name = printfn &quot;Hello %s!&quot; name

module Baz=
  let f = new Foo()
  f.Bar &quot;jimbo&quot; //boom!

[/sourcecode]

While there is some sense in forcing a separation between interface and instance methods I find the purism a little annoying. Object expressions are a nice alternative which might solve some issues - albeit in a different way, remembering that an F# solution is simply going to be engineered differently:

[sourcecode language="fsharp"]
let f =
  {
    new IFoo with
      member x.Bar str = printfn ( &quot;BAZ&quot; + str )
  }
f.Bar &quot;bam&quot;
[/sourcecode]

Another approach is to let the compiler coerce the type for us when we pass it to a function. It baffles me that while the assignment example will not compile, we <em>can </em>do the following...

[sourcecode language="fsharp"]
let executeFoo (f:IFoo) input = f.Bar input
executeFoo (new Foo())
[/sourcecode]
<h2>3. Pain in the class</h2>
OO programming with F# in general is kind of weird and most of my issues lie within this segment of the language specification. Read/write properties feel clunky to me and while they're a bit new, even for C#, autoprops would still rock my world so I can avoid the following code:

[sourcecode language="fsharp"]
type Car()=
  let mutable pedalPosition = 0.0
  member internal self.pedalPosition
    with get() = pedalPosition
    and set(v) = pedalPosition &lt;- v
[/sourcecode]

The functional zealot is going to scream at me for not using an immutable record type. The pragmatist will scream at me for not falling back on C#.<em> </em>I think that if F# is going to let me do things at all, it should let me <em>do it nicely</em>. Ideally, read/write properties would be as simple to declare as read only properties which, are very nice to declare. Maybe this could work:

[sourcecode language="fsharp"]
type Car()=
 member mutable self.PedalPosition : float //read write auto property
 member mutable self.IntakeTemp    : &lt;degC&gt;
 member self.IsCruising = self.PedalPosition &lt; 0.1
 member self.OpenIdleAirControlValve = self.IsCruising &amp;&amp; self.IntakeTemp &lt;= 50.0&lt;degC&gt;
[/sourcecode]

Another weirdness that gets me is the self identifier is not a keyword but a binding. While I get that it is nice, it also allows a team of 5 different developers the opportunity to have a holy war over  the one true self reference. 'this', 'self', 'me', 'it' or 'x'? On top of this -- there are two scopes involved: class level self, and member level self. All told, the power that this gives you is nothing compared to the level of ambiguity you can create.

[sourcecode langauge="fsharp"]
type Person(id) as this =
  do trace &quot;created person with id {0}&quot; this.Id
  member their.Id = id
  member that.FullName = that.LastName + &quot; &quot; + this.FirstName
  member them.LastName = &quot;Burger&quot;
  member they.FirstName = &quot;Jim&quot;
[/sourcecode]

This is one of those moments where the phrase: "With great power comes great responsibility" comes to mind.
<h2>2. Dependency order is important</h2>
This is a biggy, and I'm not sure what they will ever do about this, because it's apparently a pervasive issue. It's an issue that starts out as annoying, and eventually morphs into pain.

At the annoying level, we have to arrange things that make sense to the compiler. In the simplest of cases, any types that you need to use have to be implemented before you call them. In a single code file, that isn't so bad, but it is annoying. It all really takes me back to my C days:

[sourcecode language="fsharp"]
let myFunc x = someOtherFunc y //not defined!!
let someOtherFunc x = x * x
[/sourcecode]

It gets worse, because the same applies at the type level:

[sourcecode language="fsharp"]
namespace Model

type Animal(name, regTag) =
  member x.Name = name
  member x.Registration : RegistrationTag = regTag //not defined!!

type RegistrationTag(dateIssued, number) =
  member x.DateIssued = dateIssued
  member x.Number = number
[/sourcecode]

While at first you think, "OK this is just enforcing some order, that can't be bad", the problem is <em>what if you need a circular reference</em>? Well, to combat that edge case we have  yet another type construct we don't really want or need - <strong>mutually recursive types</strong>.

Say what? It's not nearly as bad as it sounds...

[sourcecode language="fsharp"]
open System.IO
type Folder(path) =
    member x.Files = seq {
        for fileName in Directory.GetFiles(path) do
            yield new File(fileName, path)
    }

and File(filename, parent) =
    member x.Name = filename
    member x.Parent = parent
[/sourcecode]

This defines two types, one referencing the other. Problem solved. Imagine now that these classes are BIG. Too bad I now have more than one type per code file!
<h2>1. Flat projects</h2>
I saved this one till last for two reasons: because it is my biggest beef thus far, but also because it is a symptom of the previous issue. <em>Even files need to be in the correct order</em>, by dependency, for the compiler to cope. Rather than abstracting file order and dependencies, it is coupled to the order of appearance in the project file. Sure you get some UI tools to help deal with it, but its less than ideal.

[caption id="attachment_827027" align="alignnone" width="300" caption="Its a shame that we actually need these at all."]<a href="http://cultivatingcode.files.wordpress.com/2010/02/uienhancements.png"><img class="size-medium wp-image-827027" title="F# UI Enhancements" src="http://cultivatingcode.files.wordpress.com/2010/02/uienhancements.png?w=300" alt="Shows the F# UI Enhancements for handling file order" width="300" height="169" /></a>[/caption]

The final blow is that this means that folders inside projects not a possibility. While I understand the reasons that forced us down this road, I don't understand why it was thought that this is a good enough solution. Personally, I think the use of folders is a necessity in any projects that has more than a handful of files. I fear that F# will never be taken seriously in the mainstream until it has a project experience similar to that of C# and VB.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827221</wp:post_id>
  <wp:post_date>2010-02-04 17:47:16</wp:post_date>
  <wp:post_date_gmt>2010-02-04 08:17:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>five-things-i-dont-like-about-f</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="coding"><![CDATA[Coding]]></category>
  <category domain="post_tag" nicename="fsharp"><![CDATA[FSharp]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827011]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827011]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_037172018581cda5dead07916bfe074a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0a9527f0471f761feb303ebfbf2101d9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>50</wp:comment_id>
    <wp:comment_author><![CDATA[ShuggyCoUk]]></wp:comment_author>
    <wp:comment_author_email>foo@shuggy.co.uk</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>212.187.205.2</wp:comment_author_IP>
    <wp:comment_date>2010-02-12 00:05:30</wp:comment_date>
    <wp:comment_date_gmt>2010-02-11 14:35:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thinking about the ordering thing more what would be nice is a default view, with folders and a way to have the view morph into the flattened, and ordered, mode. Dragging in the ordered mode adjusts compile ordering, adjusting in folder view moves in the file system / source control as you would expect.

Not a trivial feature to add mind you, and you could legitimately argue that a separate non modal dialog for viewing/modifying order is a better design.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-11 14:35:30</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>46</wp:comment_id>
    <wp:comment_author><![CDATA[Chance Coble]]></wp:comment_author>
    <wp:comment_author_email>neuroturing@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url>http://leibnizdream.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>66.68.160.200</wp:comment_author_IP>
    <wp:comment_date>2010-02-05 06:20:56</wp:comment_date>
    <wp:comment_date_gmt>2010-02-04 20:50:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interesting post, thanks for sharing.    

One recommendation I have is to consider using something besides "x" for self reference to objects (e.g. member x.Foo() ...).   I see this convention a lot, and I have found it is a little too easy for someone to add a value called "x" inside of the method, consequently outscoping the "x" referring to the object (related to your point #5 above).  I have found less commonly used names like "me" to be still short but also unique.   
Thanks again for the post.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-04 20:50:56</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>47</wp:comment_id>
    <wp:comment_author><![CDATA[Alex Oleynikov]]></wp:comment_author>
    <wp:comment_author_email>aoleynikov@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>24.151.4.45</wp:comment_author_IP>
    <wp:comment_date>2010-02-10 22:56:53</wp:comment_date>
    <wp:comment_date_gmt>2010-02-10 13:26:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice info.

I am fascinated by the F# and the fresh ideas that the functional programming is bringing to the industry, but I was completely dumbstruck by your last two findings - I had no idea that the order coupling was so rigid.
Not good... It completely shatters my humble hopes of persuading my fellow developers to consider using F# for the next project. :(

Thanks again.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-10 13:26:53</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>48</wp:comment_id>
    <wp:comment_author><![CDATA[Carsten]]></wp:comment_author>
    <wp:comment_author_email>Carsten.Koenig@wiegand-glas.de</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>217.6.193.154</wp:comment_author_IP>
    <wp:comment_date>2010-02-11 15:37:58</wp:comment_date>
    <wp:comment_date_gmt>2010-02-11 06:07:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi,

of course the last two are a pain - but I guess to remove those constraints would be the same as removing the auto-typing features.

Just think of it - why is it in LINQ from foo select bla instead of select bla from foo? Well AFAIK it's just because IntelliSense could not possibly know that bla is before you tell it from what foo it's comming.

Now the same goes for F#

You write for example

type foo = { fooa : int; foob : string }

and some way down

let f x = { fooa = x; foob = x.ToString() }

and of course you want F# do know that you are creating a 'f : int -&gt; foo' 

I guess the overhead to run this type-checkers would just be to great to be used in any usefull way.

And after all - at some point you don't even notice this things anymore.

What I really hate on F# are indeed your other points and the fact that there is no R# for F# (seriously).
You get no support to structure your code better - not only are you limited with the ordering - so no you can't move your boiler-plate helper functions to the end - you can't even hide them with a simple #region (or can you with the new one?)
And why the heck can't we use t ? Why not replayce t with two or three spaces in a preprocessing stage?

And my No.1 Point:

WHY CAN'T WE HAVE TYPE-CLASSES - P L E A S E
(this point would benefit all the CLR - I give a shit about all those pesky dynamics - I wan't a CLR-Language that is indeed as powerfull and expressive as haskel and no - inline "duck typing" is not the answer)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-11 06:07:58</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>49</wp:comment_id>
    <wp:comment_author><![CDATA[ShuggyCoUk]]></wp:comment_author>
    <wp:comment_author_email>foo@shuggy.co.uk</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>212.187.205.2</wp:comment_author_IP>
    <wp:comment_date>2010-02-11 23:17:56</wp:comment_date>
    <wp:comment_date_gmt>2010-02-11 13:47:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The ordering is pretty mandatory for type inference to work.

I wholly agree that forcing this to mean no subfolders is a pain, though I am somewhat concerned that making the ordering less clear will be a source of confusion to some developers...

I totally agree about this x as this bit. some people in my team do it and it's a pita. 
"me" sounds like I solution I can sell them on cheers for the thought.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-11 13:47:56</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>51</wp:comment_id>
    <wp:comment_author><![CDATA[Onur Gumus]]></wp:comment_author>
    <wp:comment_author_email>emperon@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://reversblade.blogspot.com</wp:comment_author_url>
    <wp:comment_author_IP>88.247.135.110</wp:comment_author_IP>
    <wp:comment_date>2010-02-12 13:32:40</wp:comment_date>
    <wp:comment_date_gmt>2010-02-12 04:02:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You guys should check nemerle. It is a far superior functional language with meta programming support.
http://nemerle.rsdn.org. It is quite live too.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-12 04:02:40</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>52</wp:comment_id>
    <wp:comment_author><![CDATA[ShuggyCoUk]]></wp:comment_author>
    <wp:comment_author_email>foo@shuggy.co.uk</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>212.187.205.2</wp:comment_author_IP>
    <wp:comment_date>2010-02-12 23:30:24</wp:comment_date>
    <wp:comment_date_gmt>2010-02-12 14:00:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[nemerle is very interesting, but deploying serious (think millions of dollars worth importantance) pps on it is dangerous without it having some blessing from MSFT.

We started using f# when it was in beta, which was a big risk but we figured that it would be so compelling MS would make it a first class citizen. 

Doing the same on nemerle would be far more risky[1].

it's not that it needs to be *made* by MS, but it needs to be acknowledged as something that is sufficiently widespread for there to be value to them in keeping it working (IronPython and IronRuby for example almost certainly fall into this category since they included the DLR  by default in the 4.0)

As a side note at the time I write this nemerle.org has DNS issues :)

[1] for some people entirely acceptable and a good choice, not everyone's risk profile is the same]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-12 14:00:24</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>53</wp:comment_id>
    <wp:comment_author><![CDATA[Onur Gumus]]></wp:comment_author>
    <wp:comment_author_email>emperon@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://reversblade.blogspot.com</wp:comment_author_url>
    <wp:comment_author_IP>88.247.196.167</wp:comment_author_IP>
    <wp:comment_date>2010-02-12 23:38:13</wp:comment_date>
    <wp:comment_date_gmt>2010-02-12 14:08:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@ ShuggyCoUk: Good comment 

Nemerle has a lot of missing especially interms of VS support. However even in VS support Nemerle is better than F# i believe. 

But i believe there is also a bottleneck of bugs and usually that bottle neck points to our own code rather than the external frameworks/languages we use. So I generally believe it is not much dangerous to rely on such stuff. The problems are others. Using a non-mainstream language limits the help you can take and also limits people you can hire(although a good c# developer should grasp nemerle in a single day without much hiccups)

I am also one of the contributors to Nemerle. And these days i am working on some "pure" keyword (or as a macro) to the language that ensures method body is pure meaning: thread-safe and does not alter global state. Nothing tastes as good as you can shape the language without waiting microsoft. 

How long you will wait for AST macros in F# or C# ? Till 2012 ? My point is relying on MS is a two edged sword. 

And yeah nemerle site is going down once in a month:) Hopefully this will be the last time]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-12 14:08:13</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>54</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>203.171.197.246</wp:comment_author_IP>
    <wp:comment_date>2010-02-13 00:18:46</wp:comment_date>
    <wp:comment_date_gmt>2010-02-12 14:48:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the comments people! 

Regarding my last point, while file order is related to type order, I think it would still be possible for the project system to discover the file dependencies based on the code, and I strongly suspect this will be a focus of the F# team in the future.

It is possible to work around the IDE limitations:
http://cultivatingcode.com/2010/02/12/folders-in-f-projects/

Still not ideal, but its better than no folders at all :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-12 14:48:46</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>55</wp:comment_id>
    <wp:comment_author><![CDATA[Jerome Laban]]></wp:comment_author>
    <wp:comment_author_email>jlaban@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.jaylee.org</wp:comment_author_url>
    <wp:comment_author_IP>216.239.66.158</wp:comment_author_IP>
    <wp:comment_date>2010-02-15 04:44:50</wp:comment_date>
    <wp:comment_date_gmt>2010-02-14 19:14:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[About the point 4 on explicit implementation of interface methods, how about that :

--------------
[sourcecode language="fsharp"]
type IFoo =
  abstract Bar : string -&amp;gt; unit

type Foo() =
    interface IFoo with
        member x.Bar name = printfn &amp;quot;Hello explicit %s!&amp;quot; name    
    member x.Bar name = printfn &amp;quot;Hello implicit %s!&amp;quot; name
module Baz=
  let foo = new Foo()
  foo.Bar &amp;quot;jimbo&amp;quot;
  
  let ifoo = foo :&amp;gt; IFoo
  ifoo.Bar &amp;quot;jimbo&amp;quot;
[/sourcecode]
------------

That way you can implement the method both explicitly and implicitly.

I would have expected that it is possible to implement method both ways.

Cheers,

-- Jerome]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-14 19:14:50</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>56</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>150.101.101.66</wp:comment_author_IP>
    <wp:comment_date>2010-02-17 10:06:26</wp:comment_date>
    <wp:comment_date_gmt>2010-02-17 00:36:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks Jerome,

While the code you have written compiles, it is not really using an implicit implementation of IFoo::Bar, it is an instance method on Foo, completely unaware of the existence of IFoo.

That is to say: the implicit implementation *alone* should satisfy the following code:

[sourcecode language="fsharp"]
let foo = new Foo()
foo.Bar &amp;quot;jimbo&amp;quot;

let ifoo = foo :&amp;gt; IFoo
ifoo.Bar &amp;quot;jimbo&amp;quot;

[/sourcecode]

This would return:
<pre>
Hello implicit jimbo!
Hello implicit jimbo!
</pre>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>55</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-17 00:36:26</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>57</wp:comment_id>
    <wp:comment_author><![CDATA[Jerome Laban]]></wp:comment_author>
    <wp:comment_author_email>jlaban@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.jaylee.org</wp:comment_author_url>
    <wp:comment_author_IP>12.19.199.2</wp:comment_author_IP>
    <wp:comment_date>2010-02-17 17:08:33</wp:comment_date>
    <wp:comment_date_gmt>2010-02-17 07:38:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Indeed. (Found it there too http://msdn.microsoft.com/en-us/library/dd233207(VS.100).aspx)

That's good to know, and thanks for the article's heads up list !]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>56</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-17 07:38:33</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>58</wp:comment_id>
    <wp:comment_author><![CDATA[2010 in review &laquo; Cultivating code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://cultivatingcode.com/2011/01/06/2010-in-review/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.96.145</wp:comment_author_IP>
    <wp:comment_date>2011-01-06 08:35:28</wp:comment_date>
    <wp:comment_date_gmt>2011-01-05 23:05:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] The busiest day of the year was February 10th with 298 views. The most popular post that day was Five things I don&#8217;t like about F#. [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1294268728.3816";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-01-05 23:05:28</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1304644528</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1304644528.1771";s:7:"message";s:48:"Jim Burger changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"Jim Burger";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Maybe F# isn't for you...</title>
  <link>https://maintenancecoder.wordpress.com/2010/02/03/maybe-f-isnt-for-you/</link>
  <pubDate>Wed, 03 Feb 2010 07:54:03 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827013</guid>
  <description/>
  <content:encoded><![CDATA[In a <a href="http://rogeralsing.com/2009/12/27/i-still-dont-get-f/">short rant</a>, Roger declares that he doesn't "get" F#. There is no business case, no ROI, what can't I do in C# that is in F#. Etc.
<blockquote>I think that Microsoft are trying to sell F# to us as something new and awesome, but I’m having serious problems seeing the benefits over C#.</blockquote>
Roger wants us to prove to him that we actually all need F#. Well Roger, you are right, you probably don't need F#.

It can be hard to see the benefits over C#. If you aren't excited about new ways to tackle the concurrency problem, or new approaches to handling generic and mathematical problems, and if the thought of breaking out the shiny new lexer and parser don't give you a tingle, then maybe F# <em>isn't actually marketed at you at all.</em> Perhaps, just maybe, its for a group of programmers that are gagging to get their hands on a managed language to break new ground in their medical, pharmaceutical, mathematical and scientific fields - on Windows.

Heres a newsflash, <strong>not everybody is writing e-commerce applications.</strong>

The thing is, people who earn a living in these  alternative problem spaces typically use functional languages like Erlang, OCaml, Clojure, Scheme, Common Lisp and so on. The market (apparently) <em>is there,</em> and while some of them still love to use vim, many would like a decent IDE - and at the moment, that IDE is called Eclipse. What Microsoft is aiming for is to take a chunk out of the almost exclusive monopoly that the Java platform has on this segment of the developer population. <em>We don't have to get it</em>, any more than they don't have to get Visual Basic.

But back to Rogers rant, apparently, this is how these guys and gals should do currying, something they are used to in most functional languages:

[sourcecode language="csharp"]

string Foo(int a,bool b)
{
 //do stuff
}

void UseCurry()
{
Func curriedFooWithTrue = a =&gt; Foo(a,true);

//invoke curried function.
var res = curriedFooWithTrue(123);
}

[/sourcecode]

This apparently, is pipelining:

[sourcecode language="csharp"]

var listOfInts = new List {1,2,3,4,5,6};
Func&lt;int,int&gt; squared = x =&gt; x*x;
var squaredListOfInts = listOfInts.Select(x =&gt; squared).ToList();

[/sourcecode]

While sure, C# can do that - <strong>why would you?</strong> As soon as we want to use pipelining and currying <em>to increase the expressiveness of our code,</em> not just to use it for the sake of using it, we can start to write some fantastic internal DSLs.

[sourcecode language="fsharp"]

let should test actual =
  test actual

let equal expected actual =
  if expected &lt;&gt; actual then
    failwith &quot;Expected values to be equal&quot;

//usage
let sayHello name = &quot;Hello &quot; + name
  sayHello &quot;Roger&quot; |&gt; should equal &quot;Hello Roger&quot;

[/sourcecode]

Note that is a generic solution. The F# compiler also figured out that the generic function equal, will only work if its arguments are actually equatable. The generic type inference, complete with <a href="http://msdn.microsoft.com/en-us/library/dd233203%28VS.100%29.aspx">generic constraints far more powerful than in C#</a><em><a href="http://msdn.microsoft.com/en-us/library/dd233203%28VS.100%29.aspx"> </a>is just sublime</em>. Pipelining works in two directions, not just left to right.

So to continue, apparently <a href="http://msdn.microsoft.com/en-us/library/dd268536%28VS.100%29.aspx">tuples </a>are like meh..

...but F# uses them for things like grouping:

[sourcecode language="fsharp"]

type Person =
 {
    Name: string;
    Address: string;
    PostCode: string;
 }

let testData =
  Seq.init 10 (fun i -&gt;
  {
    Name = &quot;Name&quot; + i.ToString();
    Address = &quot;Address&quot; + i.ToString();
    PostCode = &quot;000&quot; + (i % 2).ToString();
  })

let frequencyByPostCode =
  testData
    |&gt; Seq.groupBy (fun person -&gt; person.PostCode) //seq&lt;Tuple&lt;string, Person&gt;&gt;&gt;
    |&gt; Seq.map (fun group -&gt;
        match group with
        | (pcode, people) -&gt; printfn &quot;%s - %d&quot; pcode (people.Count())
       )
[/sourcecode]

And before we start to moan that we could just use linq, this functionality existed before use of linq was actually possible.

So lets pretend for a moment, that if we were all sitting at PDC 2012 when the next release of C# comes out and there is the feature list in all its glory:
<ul>
	<li><a href="http://en.wikipedia.org/wiki/List_comprehension">list comprehension</a></li>
	<li>language keywords to support <a href="http://en.wikipedia.org/wiki/List_comprehension">asynchronous programming</a></li>
	<li><a href="http://codebetter.com/blogs/matthew.podwysocki/archive/2008/09/10/object-oriented-f-extension-everything.aspx">extension everything</a></li>
	<li>less curly braces, angle brackets and semi colons (my favourite)</li>
	<li><a href="http://msdn.microsoft.com/en-us/library/dd233180%28VS.100%29.aspx">Generic type inference</a></li>
	<li><a href="http://fortysix-and-two.blogspot.com/2009/06/traversing-and-transforming-f.html">operators to support the generation and substitution of Expressions</a></li>
	<li>first class functions and <a href="http://codebetter.com/blogs/matthew.podwysocki/archive/2009/10/19/f-october-2009-ctp-beta2-f-rx-together-at-last.aspx">events</a></li>
	<li><a href="http://msdn.microsoft.com/en-us/library/dd233204%28VS.100%29.aspx">operator creation</a></li>
	<li><a href="F# pattern matching">pattern matching</a></li>
	<li><a href="http://msdn.microsoft.com/en-us/library/dd233248%28VS.100%29.aspx">Active patterns</a></li>
	<li><a href="http://langexplr.blogspot.com/2008/10/using-f-computation-expressions-to-read.html">Computation expressions</a></li>
</ul>
I'm sure the blogosphere would be a light saying things like, "wow!", "cool!" and "look at all the new edge case programming problems we can solve in under two lines of code!". Some of us would like, do we need all that? Just like when Linq and Lambdas came to town.

To sum up, yes <em>there is </em>a business case for F#, just not in the classic sense. Will you write your next LOB app in it? That would probably be masochistic, and I would recommend against it. Will it make you money? Jury's still out, there are <a href="http://www.intellifactory.com/">successes</a> that indicate it can be done.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827222</wp:post_id>
  <wp:post_date>2010-02-03 17:24:03</wp:post_date>
  <wp:post_date_gmt>2010-02-03 07:54:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>maybe-f-isnt-for-you</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="fsharp"><![CDATA[FSharp]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827013]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827013]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>59</wp:comment_id>
    <wp:comment_author><![CDATA[Rick Minerich's Development Wonderland : F# Discoveries This Week 02/08/2010]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.atalasoft.com/cs/blogs/rickm/archive/2010/02/08/f-discoveries-this-week-02-08-2010.aspx</wp:comment_author_url>
    <wp:comment_author_IP>66.29.204.14</wp:comment_author_IP>
    <wp:comment_date>2010-02-09 04:59:09</wp:comment_date>
    <wp:comment_date_gmt>2010-02-08 19:29:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Jim Burger’s Maybe F# isn’t for you… [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-08 19:29:09</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>60</wp:comment_id>
    <wp:comment_author><![CDATA[Nick Gunn]]></wp:comment_author>
    <wp:comment_author_email>nagunn@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://iodyner.spaces.live.com</wp:comment_author_url>
    <wp:comment_author_IP>203.210.68.145</wp:comment_author_IP>
    <wp:comment_date>2010-02-09 07:32:47</wp:comment_date>
    <wp:comment_date_gmt>2010-02-08 22:02:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Don't forget 'units of measure' (http://blogs.msdn.com/andrewkennedy/archive/2008/08/29/units-of-measure-in-f-part-one-introducing-units.aspx)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-08 22:02:47</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>61</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>150.101.101.66</wp:comment_author_IP>
    <wp:comment_date>2010-02-09 08:59:22</wp:comment_date>
    <wp:comment_date_gmt>2010-02-08 23:29:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks @Nick, a glaring omission indeed! Units of measure are certainly one of the features that is not available in other mainstream .NET languages right now.

For those who haven't read Andrew's series on units of measure, it stands out as a 'must read' for applying F# in the real world.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>60</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-08 23:29:22</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>62</wp:comment_id>
    <wp:comment_author><![CDATA[The Morning Brew - Chris Alcock &raquo; The Morning Brew #536]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://blog.cwa.me.uk/2010/02/10/the-morning-brew-536/</wp:comment_author_url>
    <wp:comment_author_IP>212.227.118.27</wp:comment_author_IP>
    <wp:comment_date>2010-02-10 18:08:34</wp:comment_date>
    <wp:comment_date_gmt>2010-02-10 08:38:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] important, others are more involved. Jim also looks at the ROI and business case for F# in his post Maybe F# isn&#8217;t for you&#8230; concluding that for Line of Business / Ecommerce perhaps its not, but there are plenty of other [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-10 08:38:34</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>63</wp:comment_id>
    <wp:comment_author><![CDATA[MichaelGG]]></wp:comment_author>
    <wp:comment_author_email>mgg@giagnocavo.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>190.148.164.197</wp:comment_author_IP>
    <wp:comment_date>2010-02-13 06:50:36</wp:comment_date>
    <wp:comment_date_gmt>2010-02-12 21:20:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I'm curious about "Will you write your next LOB app in it? That would probably be masochistic, and I would recommend against it." -- what aspects about F# do you find problematic for "LOB" apps? 

Is it just the lack of designers/code generators?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-12 21:20:36</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>64</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>202.124.88.44</wp:comment_author_IP>
    <wp:comment_date>2010-02-13 08:34:36</wp:comment_date>
    <wp:comment_date_gmt>2010-02-12 23:04:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[First, let me qualify that I recognize that everyone has different thresholds of pain on this front. For me the productivity hit is not so much the lack of designers, but I do like to practice TDD, and I'm constantly refactoring. Refactoring tools would be my first desire. From a language perspective I'm finding that consuming things like moq &amp; nhibernate messy. The expression discrepancy hurts a little. I also find guys struggle to fit immutability into their Ideas on architecture, which can make selling the idea hard in the first place.
Last, it can be hard to find other F# programmers locally so projects typically need to spend money training or attracting the right people.  

Again, these are pain points - not blockages to writing a shopfront web site in f#. 
I'm also pretty confident that this will steadily improve. It won't be long before the tool market descends upon F# -it's anybodies game to win right now.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>63</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-12 23:04:36</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>65</wp:comment_id>
    <wp:comment_author><![CDATA[2010 in review &laquo; Cultivating code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://cultivatingcode.com/2011/01/06/2010-in-review/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.96.145</wp:comment_author_IP>
    <wp:comment_date>2011-01-06 08:35:37</wp:comment_date>
    <wp:comment_date_gmt>2011-01-05 23:05:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Maybe F# isn&#8217;t for you&#8230; February 2010 6 comments 5 [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1304644525</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1294268737.7531";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-01-05 23:05:37</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1304644525.7781";s:7:"message";s:48:"Jim Burger changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"Jim Burger";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>get-command</title>
  <link>https://maintenancecoder.wordpress.com/2010/01/06/a-match-made-in-heaven/get-command-2/</link>
  <pubDate>Tue, 05 Jan 2010 05:08:36 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/01/get-command1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827224</wp:post_id>
  <wp:post_date>2010-01-05 14:38:36</wp:post_date>
  <wp:post_date_gmt>2010-01-05 05:08:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>get-command-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827217</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/01/get-command1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827217]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[826897]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[826879]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/01/get-command1.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>get-command</title>
  <link>https://maintenancecoder.wordpress.com/2010/01/06/a-match-made-in-heaven/get-command/</link>
  <pubDate>Tue, 05 Jan 2010 05:08:07 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/01/get-command.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827225</wp:post_id>
  <wp:post_date>2010-01-05 14:38:07</wp:post_date>
  <wp:post_date_gmt>2010-01-05 05:08:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>get-command</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827217</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/01/get-command.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827217]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[826896]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[826879]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/01/get-command.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>omni-complete-ps1-example</title>
  <link>https://maintenancecoder.wordpress.com/2010/01/06/a-match-made-in-heaven/capture-4/</link>
  <pubDate>Tue, 05 Jan 2010 04:33:35 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/01/capture.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827226</wp:post_id>
  <wp:post_date>2010-01-05 14:03:35</wp:post_date>
  <wp:post_date_gmt>2010-01-05 04:33:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>capture-4</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827217</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/01/capture.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827217]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[826895]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[An example of omni completion with powershell in gvim]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[826879]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/01/capture.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Option Strict On Check In Policy</title>
  <link>https://maintenancecoder.wordpress.com/2008/03/14/option-strict-on-check-in-policy/</link>
  <pubDate>Thu, 13 Mar 2008 23:30:55 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827216</guid>
  <description/>
  <content:encoded><![CDATA[<span style="color:#0000ff;">NOTE ** This is a repost from my old blog, it may or may not be relevant any more, I'm posting it to keep it alive for people who may have been struggling to find it from </span><a href="http://blog.codeassassin.com/2008/04/09/custom-tfs-check-in-policy-responsiveness/"><span style="color:#800080;">other links</span></a><span style="color:#0000ff;"> on the web </span>**

Today I hope to clarify how one might go about implementing a check in policy which ensures that Option Strict is turned on for VB projects.

Rather than rehashing a perfectly good walk through, I suggest you read <a href="http://web.archive.org/web/20080531022519/http://msdn2.microsoft.com/en-us/library/bb668980.aspx">this article from MSDN</a> to get the basics of Check In Policy creation.

Once we have our check in policy project and have derived a class from Microsoft.TeamFoundation.VersionControl.Client.PolicyBase it is time to start overriding the behaviour of the base rule.

[sourcecode language="vb"]
Imports Microsoft.TeamFoundation.VersionControl.Client

&lt;Serializable()&gt; _
Public Class OptionStrictPolicy
    Inherits PolicyBase
[/sourcecode]

Once we are over that little hurdle we want to:
<ul>
	<li> Get the set of pending changes that have been selected by the user to check in</li>
	<li>For each pending change find the project file that the change belongs to</li>
	<li>For each VB project decide if Option Strict has been turned on</li>
	<li>For each project that hasn't got option strict turned on, create a policy warning.</li>
</ul>
For extra fun I'll do this all with VS2008 &amp; VB9. I love my C# but to be honest VB9 kicks its ass when dealing with XML.
<h3>1: Get the set of pending changes that have been selected by the user to check in</h3>
Everything from here on out extends the Evaluate method of PolicyBase. Getting the set pending changes selected by the user is a cinch. I've filtered by vb code files, but you could just as easily go for more file types.

[sourcecode language="vb"]

Public Overrides Function Evaluate() As PolicyFailure()

  Dim pendingChanges = PendingCheckin.PendingChanges.CheckedPendingChanges
  Dim vbCodeFiles = _
    From c In pendingChanges _
    Let extension = Path.GetExtension(c.FileName) _
    Where extension = _VBFileExtension OrElse extension = _VBProjectFileExtension _
    Select c.LocalOrServerFolder, c.FileName
[/sourcecode]
<h3>2: For each pending change find the project file that the change belongs to</h3>
This step is a little trickier and basically involves drilling up the folder structure until we find a project file, and then checking the project file for a compilation reference to the pending change. This seems like a good place to refactor into a recursive function...

*SIDE NOTE* Am thinking of starting a petition to all relevant Dictionary makers to make the word "Refactor" a real word. Whose with me?

I'm sure we are all capable of looking for .vbproj files recursively up the folder chain. However we do need to allow for the possibility that there may be two vbproj files in a folder and if so, is our pending change referenced by either of them? To do this I need to go through the project file looking for  tags that include my pending change. For example in C# we might do it like this

[sourcecode language="csharp"]
var doc = XDocument.Load(XmlReader.Create(projectFilename));
var compileItems =
    from e in doc.Descendants()
    where e.Name.LocalName == &quot;Compile&quot;
    select e;
return
    (from c in compileItems
     where c.Attribute(&quot;Include&quot;) != null &amp;&amp; c.Attribute(&quot;Include&quot;).Value.Contains(filename)
     select c).Any();
[/sourcecode]

But since Im using VB today I can do it like this...

[sourcecode language="vb"]
Dim doc = XDocument.Load(XmlReader.Create(projectFilename))
Return doc...&lt;Compile&gt;.@Include.Contains(filename)
[/sourcecode]

Not bad...but for this to work I do need to import the namespace of the project file schema, since the syntax that allows for &lt;Compile&gt; is checking qualified names, not local names.

[sourcecode language="vb"]
Imports &lt;xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;
[/sourcecode]
<h3>3: For each VB project decide if Option Strict has been turned on</h3>
Once I have a list of projects that are loosely associated with a check in, I can easily check for the existence of OptionStrict tags in the vbproj file. Option Strict still defaults to off, so a lack of OptionStrict tags implies the setting is OFF. However it is perfectly valid to have an OptionStrict tag that is set to OFF so I need to account for those.

[sourcecode language="vb"]
Private Shared Function IsOptionStrictOn(ByVal project As XDocument) As Boolean
    Return project...&lt;OptionStrict&gt;.Value = &quot;On&quot;
End Function
[/sourcecode]
<h3>4. For each project that hasn't got option strict turned on, create a policy warning.</h3>
Creating policy warnings is a breeze and you can return as many as you want, in this scenario I want to make sure that one is created for each project that is in violation of my rule. The Evaluate function looks like this...

[sourcecode language="vb"]
Public Overrides Function Evaluate() As Microsoft.TeamFoundation.VersionControl.Client.PolicyFailure()
  Dim pendingChanges = PendingCheckin.PendingChanges.CheckedPendingChanges

  Dim vbCodeFiles = _
    From c In pendingChanges _
    Let extension = Path.GetExtension(c.FileName) _
    Where extension = _VBFileExtension OrElse extension = _VBProjectFileExtension _
    Select c.LocalOrServerFolder, c.FileName

  Dim vbProjects = _
    From c In vbCodeFiles _
    Select GetProjectFile(c.LocalOrServerFolder, c.FileName)

  Dim strictOffprojects = _
    From p In vbProjects _
    Where Not IsOptionStrictOn(p)

  Dim policyFailures = New List(Of PolicyFailure)
  Dim messageFormat = &quot;Please turn option strict on in the project file: {0}&quot;

  For Each s In strictOffprojects.Distinct
    policyFailures.Add(New PolicyFailure(String.Format(CultureInfo.InvariantCulture, messageFormat, s), Me))
  Next

  Return policyFailures.ToArray()
End Function
[/sourcecode]

So there you have it, VB9 to make coding an Option Strict ON policy nice and easy. Seems appropriate doesn't it?]]></content:encoded>
  <excerpt:encoded><![CDATA[ I hope to clarify how one might go about implementing a check in policy which ensures that Option Strict is turned on for VB projects.]]></excerpt:encoded>
  <wp:post_id>827232</wp:post_id>
  <wp:post_date>2008-03-14 09:00:55</wp:post_date>
  <wp:post_date_gmt>2008-03-13 23:30:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>option-strict-on-check-in-policy</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="check-in-policies"><![CDATA[Check In Policies]]></category>
  <category domain="post_tag" nicename="coding"><![CDATA[Coding]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="source-control"><![CDATA[Source control]]></category>
  <category domain="post_tag" nicename="tfs"><![CDATA[TFS]]></category>
  <category domain="post_tag" nicename="vb9"><![CDATA[VB9]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827216]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827216]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>101</wp:comment_id>
    <wp:comment_author><![CDATA[Custom TFS Check In Policy Responsiveness &laquo; Code Assassin]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://blog.codeassassin.com/2008/04/09/custom-tfs-check-in-policy-responsiveness/</wp:comment_author_url>
    <wp:comment_author_IP>74.200.247.109</wp:comment_author_IP>
    <wp:comment_date>2010-08-12 09:12:58</wp:comment_date>
    <wp:comment_date_gmt>2010-08-11 23:42:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] recently followed Jim&#8217;s example Option Strict Check In Policy to write my own policy to prevent checking in code with the DataSet Designer ConnectionState Bug. [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281571816</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-08-11 23:42:58</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>F# UI Enhancements</title>
  <link>https://maintenancecoder.wordpress.com/2010/02/04/five-things-i-dont-like-about-f/uienhancements/</link>
  <pubDate>Thu, 04 Feb 2010 06:52:41 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/02/uienhancements.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Its a shame that we actually need these at all.]]></excerpt:encoded>
  <wp:post_id>827233</wp:post_id>
  <wp:post_date>2010-02-04 16:22:41</wp:post_date>
  <wp:post_date_gmt>2010-02-04 06:52:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>uienhancements</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827221</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/02/uienhancements.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827221]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827027]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Shows the F# UI Enhancements for handling file order]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827011]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/02/uienhancements.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Vim, Vim-Script and SCS</title>
  <link>https://maintenancecoder.wordpress.com/?p=827234</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827225</guid>
  <description/>
  <content:encoded><![CDATA[[sourcecode language="python"]
function HelloWorld()
    echo 'Hello World'
endfunction
[/sourcecode]
<h3>What is old is new again</h3>
The resurgence in interest in vim has been steadily gaining in pace and as such I thought I'd share some more ways to customize the editor and get the most out of it, for however you are choosing to use it.

I use vim for things like SQL scripts, Makefiles and build scripts, powershell, and web/app.config files, even Ruby development. More often than not, there is a source control system involved in processing these files.

Today I'm going to run through some vim-script basics. The mission is, if you choose to accept it, is to incorporate your favourite source control system into vim to make it quicker to for you to Get Things Done. Why shell out or fire up team explorer just to edit a configuration file?
<h3>Lets go for a browse</h3>
Before we get going, lets revisit a few ways to browse the file system from vim. Primarily, we can browse our filesystem using cd from the vim command prompt, but there is also the netrw tool:

<a href="http://cultivatingcode.files.wordpress.com/2010/08/netrw.png"><img class="aligncenter size-medium wp-image-827226" title="Netrw" src="http://cultivatingcode.files.wordpress.com/2010/08/netrw.png?w=300" alt="The netrw directory listing" width="300" height="196" /></a>

Netrw is an extensive file browsing tool worthy of its <a href="http://vim.runpaint.org/other-uses-vim/using-vim-as-file-manager/">own blog post</a>. I use this thing a fair bit, especially when working with unfamiliar source trees. To use netrw, type :E from the command prompt, and it will open in a split screen. :bd will terminate it and return you to your previously opened buffer.
<h3>Editing _vimrc</h3>
The place to put customizations for your vim instance is in your vimrc configuration file. The vimrc file uses Vim-script to provide you with hook in points.

<a href="http://vim.wikia.com/wiki/Write_your_own_Vim_function">Functions in vim</a> are pretty simple. Here is hello world...

[sourcecode language="python"]
function HelloWorld()
    echo 'Hello World'
endfunction
[/sourcecode]

A slightly more complicated example:
<pre>[sourcecode language="python"]
function HelloWorld(name)
    let argumentValue = a:name
endfunction
[/sourcecode]

</pre>
By adding this function in our vimrc, we can call it to do other vim operations. In our scenario, we want to map some user commands:

* Check]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827234</wp:post_id>
  <wp:post_date>2010-08-25 12:07:27</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general"><![CDATA[General]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827225]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827225]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Example of content controls</title>
  <link>https://maintenancecoder.wordpress.com/2010/10/13/generating-word-documents-p2/finalexample/</link>
  <pubDate>Tue, 29 Jun 2010 04:29:41 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/06/finalexample.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827235</wp:post_id>
  <wp:post_date>2010-06-29 13:59:41</wp:post_date>
  <wp:post_date_gmt>2010-06-29 04:29:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>finalexample</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827228</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/06/finalexample.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827130]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827106]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/06/finalexample.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Content Control Properties</title>
  <link>https://maintenancecoder.wordpress.com/2010/10/13/generating-word-documents-p2/cc-props-2/</link>
  <pubDate>Tue, 29 Jun 2010 04:28:13 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/06/cc-props1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827236</wp:post_id>
  <wp:post_date>2010-06-29 13:58:13</wp:post_date>
  <wp:post_date_gmt>2010-06-29 04:28:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cc-props-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827228</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/06/cc-props1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827129]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827106]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/06/cc-props1.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Oh Noes!</title>
  <link>https://maintenancecoder.wordpress.com/2010/10/13/generating-word-documents-p2/doh/</link>
  <pubDate>Tue, 08 Jun 2010 06:44:42 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/06/doh.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827237</wp:post_id>
  <wp:post_date>2010-06-08 16:14:42</wp:post_date>
  <wp:post_date_gmt>2010-06-08 06:44:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>doh</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827228</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/06/doh.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827112]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[A typical error message when databinding goes wrong in Word 2007]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827106]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/06/doh.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Content Control Properties</title>
  <link>https://maintenancecoder.wordpress.com/2010/10/13/generating-word-documents-p2/cc-props/</link>
  <pubDate>Tue, 29 Jun 2010 04:27:52 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/06/cc-props.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827238</wp:post_id>
  <wp:post_date>2010-06-29 13:57:52</wp:post_date>
  <wp:post_date_gmt>2010-06-29 04:27:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cc-props</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827228</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/06/cc-props.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827128]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827106]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/06/cc-props.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Generating Word Documents - Part 3 - Inserting Content</title>
  <link>https://maintenancecoder.wordpress.com/?p=827244</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827244</guid>
  <description/>
  <content:encoded><![CDATA[In part 1 of this series, I outlined how we might solve the problem of generating Word documents from a server without any Office products installed.

In part 2, I gave the simplest example of how to generate a data driven document. In this post I plan to show how off the other pillar of functionality used to create rich documents: composition.
<h3><strong>Meet AltChunk</strong></h3>
In short, we are going to insert one document into another and for this task the simplest approach is to use the AltChunk tag in WordML. To give a broader picture, I will use a Content Control as a marker for where I would like to insert some other document, and then manipulate the master documents DOM at runtime to effectively insert our sub document. To keep it simple I will take two static documents and put them together, however there is absolutely no reason why you cannot use data driven documents to compose.

So lets get started, here is our master document:

&nbsp;

[caption id="attachment_827248" align="aligncenter" width="300" caption="Our master document: a simple letter container. Highlighted is the content control where content will end up."]<a href="http://cultivatingcode.files.wordpress.com/2010/10/master_doc.png"><img class="size-medium wp-image-827248 " title="master_doc" src="http://cultivatingcode.files.wordpress.com/2010/10/master_doc.png?w=300" alt="A typical static master document" width="300" height="300" /></a>[/caption]

&nbsp;

Here  is the sub document to be composed:

&nbsp;

[caption id="attachment_827250" align="aligncenter" width="300" caption="The sub document to insert into our letter template"]<a href="http://cultivatingcode.files.wordpress.com/2010/10/sub_doc.png"><img class="size-medium wp-image-827250" title="sub_doc" src="http://cultivatingcode.files.wordpress.com/2010/10/sub_doc.png?w=300" alt="the sub document" width="300" height="221" /></a>[/caption]

&nbsp;

Now to the code to do this. Again I will stick to a very simple approach to give you a feel for the mechanics of what is going on. This will be a three step process: creating an AlternativeFormatImportPart and linking it to an AltChunk element. The final step is to put that altChunk element in place of the content control.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827244</wp:post_id>
  <wp:post_date>2010-10-15 12:09:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>generating-word-documents-p</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general"><![CDATA[General]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827244]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827244]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Folders in F# projects</title>
  <link>https://maintenancecoder.wordpress.com/2010/02/12/folders-in-f-projects/capture-2-2/</link>
  <pubDate>Fri, 12 Feb 2010 13:30:20 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/02/capture.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827245</wp:post_id>
  <wp:post_date>2010-02-12 23:00:20</wp:post_date>
  <wp:post_date_gmt>2010-02-12 13:30:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>capture-2-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827227</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/02/capture.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827227]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827064]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[A picture of a folder hierarchy in an F# 2.0 project]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827063]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/02/capture.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Databound template</title>
  <link>https://maintenancecoder.wordpress.com/2010/10/13/generating-word-documents-p2/databound-template-2/</link>
  <pubDate>Tue, 29 Jun 2010 04:59:44 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/06/databound-template1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827246</wp:post_id>
  <wp:post_date>2010-06-29 14:29:44</wp:post_date>
  <wp:post_date_gmt>2010-06-29 04:59:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>databound-template-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827228</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/06/databound-template1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827138]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827106]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/06/databound-template1.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>productivity Tool</title>
  <link>https://maintenancecoder.wordpress.com/2010/10/13/generating-word-documents-p2/productivitytool/</link>
  <pubDate>Tue, 29 Jun 2010 05:03:18 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/06/productivitytool.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827247</wp:post_id>
  <wp:post_date>2010-06-29 14:33:18</wp:post_date>
  <wp:post_date_gmt>2010-06-29 05:03:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>productivitytool</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827228</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/06/productivitytool.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827139]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827106]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/06/productivitytool.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Serious document is serious</title>
  <link>https://maintenancecoder.wordpress.com/2010/10/13/generating-word-documents-p2/serious-document-is-serious/</link>
  <pubDate>Tue, 29 Jun 2010 05:42:49 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/06/serious-document-is-serious.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827248</wp:post_id>
  <wp:post_date>2010-06-29 15:12:49</wp:post_date>
  <wp:post_date_gmt>2010-06-29 05:42:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>serious-document-is-serious</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827228</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/06/serious-document-is-serious.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827144]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Serious document is serious]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827106]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/06/serious-document-is-serious.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>sub_doc</title>
  <link>https://maintenancecoder.wordpress.com/?attachment_id=827250</link>
  <pubDate>Thu, 14 Oct 2010 06:31:43 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/10/sub_doc.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[The sub document to insert into our letter template]]></excerpt:encoded>
  <wp:post_id>827250</wp:post_id>
  <wp:post_date>2010-10-14 16:01:43</wp:post_date>
  <wp:post_date_gmt>2010-10-14 06:31:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sub_doc</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827244</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/10/sub_doc.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827244]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827250]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[the sub document]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827244]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/10/sub_doc.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>data bound</title>
  <link>https://maintenancecoder.wordpress.com/2010/10/13/generating-word-documents-p2/data-bound/</link>
  <pubDate>Tue, 29 Jun 2010 04:53:04 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/06/data-bound.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827252</wp:post_id>
  <wp:post_date>2010-06-29 14:23:04</wp:post_date>
  <wp:post_date_gmt>2010-06-29 04:53:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>data-bound</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827228</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/06/data-bound.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827136]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827106]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/06/data-bound.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Adding a content control</title>
  <link>https://maintenancecoder.wordpress.com/2010/10/13/generating-word-documents-p2/adding-a-content-control/</link>
  <pubDate>Tue, 29 Jun 2010 04:24:49 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/06/adding-a-content-control.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827253</wp:post_id>
  <wp:post_date>2010-06-29 13:54:49</wp:post_date>
  <wp:post_date_gmt>2010-06-29 04:24:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>adding-a-content-control</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827228</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/06/adding-a-content-control.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827126]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827106]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/06/adding-a-content-control.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Content control tool</title>
  <link>https://maintenancecoder.wordpress.com/2010/10/13/generating-word-documents-p2/content-control-tool/</link>
  <pubDate>Tue, 29 Jun 2010 04:40:00 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/06/content-control-tool.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827254</wp:post_id>
  <wp:post_date>2010-06-29 14:10:00</wp:post_date>
  <wp:post_date_gmt>2010-06-29 04:40:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>content-control-tool</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827228</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/06/content-control-tool.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827133]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827106]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/06/content-control-tool.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Databound template</title>
  <link>https://maintenancecoder.wordpress.com/2010/10/13/generating-word-documents-p2/databound-template/</link>
  <pubDate>Tue, 29 Jun 2010 04:58:29 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/06/databound-template.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827255</wp:post_id>
  <wp:post_date>2010-06-29 14:28:29</wp:post_date>
  <wp:post_date_gmt>2010-06-29 04:58:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>databound-template</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827228</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/06/databound-template.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827137]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827106]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/06/databound-template.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>QatsDocsJobProcessing</title>
  <link>https://maintenancecoder.wordpress.com/2010/07/08/generating-docs-with-open-xml/qatsdocsjobprocessing/</link>
  <pubDate>Tue, 06 Jul 2010 04:30:35 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/07/qatsdocsjobprocessing.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Depicts the transition of data into the job queue]]></excerpt:encoded>
  <wp:post_id>827298</wp:post_id>
  <wp:post_date>2010-07-06 14:00:35</wp:post_date>
  <wp:post_date_gmt>2010-07-06 04:30:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>qatsdocsjobprocessing</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827229</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/07/qatsdocsjobprocessing.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827229]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827160]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827153]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/07/qatsdocsjobprocessing.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Project_structure</title>
  <link>https://maintenancecoder.wordpress.com/2010/11/05/generating-word-documents-part-3-mail-merge/project_structure/</link>
  <pubDate>Fri, 29 Oct 2010 05:06:53 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/10/project_structure.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[The structure of our solution]]></excerpt:encoded>
  <wp:post_id>827300</wp:post_id>
  <wp:post_date>2010-10-29 14:36:53</wp:post_date>
  <wp:post_date_gmt>2010-10-29 05:06:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>project_structure</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827297</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/10/project_structure.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827300]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/10/project_structure.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Project_structure</title>
  <link>https://maintenancecoder.wordpress.com/2010/11/05/generating-word-documents-part-3-mail-merge/project_structure-2/</link>
  <pubDate>Fri, 29 Oct 2010 05:08:37 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/10/project_structure1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827301</wp:post_id>
  <wp:post_date>2010-10-29 14:38:37</wp:post_date>
  <wp:post_date_gmt>2010-10-29 05:08:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>project_structure-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827297</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/10/project_structure1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827301]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/10/project_structure1.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>object_browser</title>
  <link>https://maintenancecoder.wordpress.com/2010/11/05/generating-word-documents-part-3-mail-merge/object_browser/</link>
  <pubDate>Wed, 03 Nov 2010 07:59:43 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/11/object_browser.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[All Content Controls derive from OpenXmlCompositeElement]]></excerpt:encoded>
  <wp:post_id>827302</wp:post_id>
  <wp:post_date>2010-11-03 17:29:43</wp:post_date>
  <wp:post_date_gmt>2010-11-03 07:59:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>object_browser</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827297</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/11/object_browser.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827302]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/11/object_browser.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>ContentControlInfo</title>
  <link>https://maintenancecoder.wordpress.com/2010/11/05/generating-word-documents-part-3-mail-merge/contentcontrolinfo/</link>
  <pubDate>Wed, 03 Nov 2010 08:08:33 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/11/contentcontrolinfo.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827303</wp:post_id>
  <wp:post_date>2010-11-03 17:38:33</wp:post_date>
  <wp:post_date_gmt>2010-11-03 08:08:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>contentcontrolinfo</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827297</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/11/contentcontrolinfo.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827303]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/11/contentcontrolinfo.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>mail_merge_template1</title>
  <link>https://maintenancecoder.wordpress.com/2010/11/05/generating-word-documents-part-3-mail-merge/mail_merge_template1/</link>
  <pubDate>Fri, 05 Nov 2010 07:57:04 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/11/mail_merge_template1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[A simple template]]></excerpt:encoded>
  <wp:post_id>827306</wp:post_id>
  <wp:post_date>2010-11-05 17:27:04</wp:post_date>
  <wp:post_date_gmt>2010-11-05 07:57:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mail_merge_template1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827297</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/11/mail_merge_template1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827306]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/11/mail_merge_template1.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>MergeOutput</title>
  <link>https://maintenancecoder.wordpress.com/2010/11/05/generating-word-documents-part-3-mail-merge/mergeoutput/</link>
  <pubDate>Fri, 05 Nov 2010 09:19:03 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/11/mergeoutput.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[The final output]]></excerpt:encoded>
  <wp:post_id>827326</wp:post_id>
  <wp:post_date>2010-11-05 18:49:03</wp:post_date>
  <wp:post_date_gmt>2010-11-05 09:19:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mergeoutput</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827297</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/11/mergeoutput.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827326]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/11/mergeoutput.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>User interface driven document generation jobs</title>
  <link>https://maintenancecoder.wordpress.com/2010/07/08/generating-docs-with-open-xml/qatsdocsjobprocessing-2/</link>
  <pubDate>Tue, 06 Jul 2010 04:32:30 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/07/qatsdocsjobprocessing1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Our customers interact with our software to request document generation jobs.]]></excerpt:encoded>
  <wp:post_id>827334</wp:post_id>
  <wp:post_date>2010-07-06 14:02:30</wp:post_date>
  <wp:post_date_gmt>2010-07-06 04:32:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>qatsdocsjobprocessing-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827229</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/07/qatsdocsjobprocessing1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827229]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827161]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827153]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/07/qatsdocsjobprocessing1.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Job Procesing</title>
  <link>https://maintenancecoder.wordpress.com/2010/07/08/generating-docs-with-open-xml/qatsjobprocessor/</link>
  <pubDate>Tue, 06 Jul 2010 06:14:53 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/07/qatsjobprocessor.png</guid>
  <description/>
  <content:encoded><![CDATA[The job processing service polls the job queue for docgen jobs.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827335</wp:post_id>
  <wp:post_date>2010-07-06 15:44:53</wp:post_date>
  <wp:post_date_gmt>2010-07-06 06:14:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>qatsjobprocessor</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827229</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/07/qatsjobprocessor.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827229]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827163]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827153]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/07/qatsjobprocessor.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>UI interaction diagram</title>
  <link>https://maintenancecoder.wordpress.com/2010/07/08/generating-docs-with-open-xml/qatsdocsui/</link>
  <pubDate>Tue, 06 Jul 2010 01:13:29 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/07/qatsdocsui.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[A basic depiction of the user interaction.]]></excerpt:encoded>
  <wp:post_id>827336</wp:post_id>
  <wp:post_date>2010-07-06 10:43:29</wp:post_date>
  <wp:post_date_gmt>2010-07-06 01:13:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>qatsdocsui</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827229</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/07/qatsdocsui.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827229]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827157]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[The user interface interacts with existing data, as well as user input, to form Jobs, which are persisted into a Job Queue.]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827153]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/07/qatsdocsui.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Netrw</title>
  <link>https://maintenancecoder.wordpress.com/?attachment_id=827337</link>
  <pubDate>Wed, 25 Aug 2010 00:29:16 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/08/netrw.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827337</wp:post_id>
  <wp:post_date>2010-08-25 09:59:16</wp:post_date>
  <wp:post_date_gmt>2010-08-25 00:29:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>netrw</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827234</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/08/netrw.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827234]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827226]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[The netrw directory listing]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827225]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/08/netrw.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>master_doc</title>
  <link>https://maintenancecoder.wordpress.com/?attachment_id=827338</link>
  <pubDate>Thu, 14 Oct 2010 06:25:32 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/10/master_doc.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Our master document: a simple letter container.]]></excerpt:encoded>
  <wp:post_id>827338</wp:post_id>
  <wp:post_date>2010-10-14 15:55:32</wp:post_date>
  <wp:post_date_gmt>2010-10-14 06:25:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>master_doc</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827244</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/10/master_doc.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827244]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827248]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[A typical static master document]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827244]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/10/master_doc.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>ASP MVC 3 &amp; Ninject 2 - DI Containers made easy</title>
  <link>https://maintenancecoder.wordpress.com/?p=827352</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827352</guid>
  <description/>
  <content:encoded><![CDATA[If you're like me and have been waiting patiently for ASP MVC 3 to go RTM before diving into the new feature set, you may have gotten to the point where you were ready to get into hooking up DI and bumped into a tonne of blog posts referring to Beta this and RC that. All of which will lead you down a road of despair, running back to version 2 style Factories.

Well, its all very easy now thanks to <a href="http://commonservicelocator.codeplex.com/">http://commonservicelocator.codeplex.com/</a>

I'm going to use <a href="http://ninject.org/download">Ninject</a> - for no other reason than it has ninja's in it. However for any of the DI containers supporting the Common Service Locator library, the process should be much the same.

First up, reference two DLL's:
<ul>
	<li>Ninject.dll</li>
	<li>From the extensions directory... CommonServiceLocator.NinjectAdapter.Dll</li>
</ul>
[caption id="attachment_827353" align="aligncenter" width="514" caption="Add a reference to the Common Service Locator Adapter"]<a href="http://cultivatingcode.files.wordpress.com/2011/01/ninject.png"><img class="size-full wp-image-827353" title="Ninject" src="http://cultivatingcode.files.wordpress.com/2011/01/ninject.png" alt="" width="514" height="175" /></a>[/caption]

Now you just need to put the following in your Global.asax.cs to get started...

[sourcecode language="csharp"]
protected void Application_Start() {
  InitializeDependencyInjection();
  AreaRegistration.RegisterAllAreas();
  RegisterGlobalFilters(GlobalFilters.Filters);
  RegisterRoutes(RouteTable.Routes);
}
private static void InitializeDependencyInjection() {
  IKernel kernel = new StandardKernel();
  //custom bindings go here
  kernel.Bind&lt;IDataService&gt;().To&lt;DummyDataService&gt;();
  DependencyResolver.SetResolver(new NinjectServiceLocator(kernel));
}
[/sourcecode]

All done! DI bootstrapped, ninja style. What does this get us? Well the Common
<ul>
	<li>Controller</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827352</wp:post_id>
  <wp:post_date>2011-01-17 10:23:08</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general"><![CDATA[General]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827352]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827352]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Ninject</title>
  <link>https://maintenancecoder.wordpress.com/?attachment_id=827353</link>
  <pubDate>Mon, 17 Jan 2011 00:27:52 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/01/ninject.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Add a reference to the Common Service Locator Adapter]]></excerpt:encoded>
  <wp:post_id>827353</wp:post_id>
  <wp:post_date>2011-01-17 09:57:52</wp:post_date>
  <wp:post_date_gmt>2011-01-17 00:27:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ninject</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827352</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/01/ninject.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827352]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827353]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827352]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2011/01/ninject.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Translating imperative code to a functional style with LINQ</title>
  <link>https://maintenancecoder.wordpress.com/?p=827357</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827357</guid>
  <description/>
  <content:encoded><![CDATA[Just a few cases where the classic C style can be made more readable with declarative syntax made available via LINQ.
<h2>Case 1: Filtering results</h2>
This is a basic one, but its the first thing I look for when 'linqifying' code...

[caption id="attachment_827358" align="aligncenter" width="464" caption="The case of the for loop and if statement"]<a href="http://cultivatingcode.files.wordpress.com/2011/01/linq_ex_1.png"><img class="size-full wp-image-827358" title="Case 1: The case of the for loop and if statement" src="http://cultivatingcode.files.wordpress.com/2011/01/linq_ex_1.png" alt="" width="464" height="183" /></a>[/caption]

The first thing that should spring to mind when you see this pattern is "Where". Allow me to demonstrate:

[caption id="attachment_827360" align="aligncenter" width="465" caption="For loops with if statements inside them are usually equivalent to a Where clause."]<a href="http://cultivatingcode.files.wordpress.com/2011/01/linq_ex_2.png"><img class="size-full wp-image-827360" title="linq_ex_2" src="http://cultivatingcode.files.wordpress.com/2011/01/linq_ex_2.png" alt="" width="465" height="97" /></a>[/caption]

Case 2: Overuse of Count]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827357</wp:post_id>
  <wp:post_date>2011-05-20 11:27:06</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>translating-imperative-cod</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general"><![CDATA[General]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827357]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827357]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Case 1:</title>
  <link>https://maintenancecoder.wordpress.com/?attachment_id=827358</link>
  <pubDate>Thu, 20 Jan 2011 01:37:56 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/01/linq_ex_1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827358</wp:post_id>
  <wp:post_date>2011-01-20 11:07:56</wp:post_date>
  <wp:post_date_gmt>2011-01-20 01:37:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>linq_ex_1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827357</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/01/linq_ex_1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827357]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827358]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827357]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2011/01/linq_ex_1.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>linq_ex_2</title>
  <link>https://maintenancecoder.wordpress.com/?attachment_id=827360</link>
  <pubDate>Thu, 20 Jan 2011 04:08:40 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/01/linq_ex_2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[For loops with if statements inside them are usually equivalent to a Where clause.]]></excerpt:encoded>
  <wp:post_id>827360</wp:post_id>
  <wp:post_date>2011-01-20 13:38:40</wp:post_date>
  <wp:post_date_gmt>2011-01-20 04:08:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>linq_ex_2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827357</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/01/linq_ex_2.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827357]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827360]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827357]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2011/01/linq_ex_2.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Where puppies fear to tread</title>
  <link>https://maintenancecoder.wordpress.com/puppies/</link>
  <pubDate>Mon, 24 Jan 2011 05:49:01 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/01/puppies.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[You've been warned.]]></excerpt:encoded>
  <wp:post_id>827364</wp:post_id>
  <wp:post_date>2011-01-24 15:19:01</wp:post_date>
  <wp:post_date_gmt>2011-01-24 05:49:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>puppies</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/01/puppies.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827364]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Where puppies fear to tread]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2011/01/puppies.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>sinatra-test.rb</title>
  <link>https://maintenancecoder.wordpress.com/sinatra-test-rb/</link>
  <pubDate>Mon, 24 Jan 2011 06:36:44 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/01/sinatra-test-rb.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827368</wp:post_id>
  <wp:post_date>2011-01-24 16:06:44</wp:post_date>
  <wp:post_date_gmt>2011-01-24 06:36:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sinatra-test-rb</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/01/sinatra-test-rb.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827368]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2011/01/sinatra-test-rb.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>sinatra-singing</title>
  <link>https://maintenancecoder.wordpress.com/sinatra-singing/</link>
  <pubDate>Mon, 24 Jan 2011 06:38:14 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2011/01/sinatra-singing.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827369</wp:post_id>
  <wp:post_date>2011-01-24 16:08:14</wp:post_date>
  <wp:post_date_gmt>2011-01-24 06:38:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sinatra-singing</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2011/01/sinatra-singing.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827369]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2011/01/sinatra-singing.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Doing Everyday Things in F#: Creating a database</title>
  <link>https://maintenancecoder.wordpress.com/?p=827414</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827414</guid>
  <description/>
  <content:encoded><![CDATA[Most posts on F# focus on all the cool stuff F# can do. I can understand that - many people need convincing to try a new language and it seems obvious to tempt them with the fancy things. 

I guess this post is a reaction to a recent call to the F# community...

<blockquote>
I'd love to see a functional programming talk that wasn't all theory - e.g., why would I build a web app in F#?
    - @paulstovell via twitter
</blockquote>

I like to think the answer to that question is simply "because you can", not "because its a terse language that manipulates data in a functional way." 

The problem F# faces right now, is that it is a young language, that is different. While it is a legitimate .NET language, tooling support is in its infacy. Web development in F# is going to have a distinct DIY feel to it today, maybe that is for you, maybe it isn't.

In this post I hope to demonstrate how F# makes the everyday tasks in C# a joy to read and write. 

<h2>On the first day, the developer created the Database</h2>
So of all the boring, every day things one could do - the most obvious is the database. Since DataDude only works for lesser languages, we'll have to use a real database management tool: DbUp (obvious plug is obvious)

For users of VS 2010, Nuget support works well at time of writing, so in your package manager you can go ahead and include DbUp and plonk it into your nearest F# console application.





]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827414</wp:post_id>
  <wp:post_date>2011-05-20 13:12:24</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>everyday-things-in-fsharp-creating-dbase</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general"><![CDATA[General]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827414]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827414]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Getting started with node in a cloud IDE</title>
  <link>https://maintenancecoder.wordpress.com/?p=827422</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827422</guid>
  <description/>
  <content:encoded><![CDATA[Wanna play with node? Don't want to install an alpha version on your windows box? Dont want to create a Linux VM to play with the real stuff? Dont!

Instead... go here... http://cloud9ide.org/ get an account...create a project.... and create a &lt;awesome_node_appname_goes_here&gt;.js file.

<span class="Apple-style-span" style="font-size:15px;font-weight:bold;">Hello world</span>

The basic nodejs hello world can be found on the nodejs.org website and only needs slight modification to get to work in the Cloud9 environment. Cloud9 will expose a specific port and url for you to test against, should you need it. To refer to these things in code, you need to use the process.env.C9_PORT constant for the port and use the 0.0.0.0 as the IP address of your server. This means the hello world code would look like this:

[sourcecode language="javascript"]

var http = require('http');
http.createServer(function(res,req){
res.writeHead(200, {'Content-Type': 'text/plain'});
  res.end('Hello Worldn');
}).listen(process.env.C9_PORT, '0.0.0.0');

console.log('ready on: ' + process.env.C9_PORT);

[/sourcecode]
<h3>NPM</h3>
One of the main reasons that playing with node on windows is a little bit of a drag right now is that NPM, the 'community standard' package manager is a no-go at this point. Im certain this will change, but for now...Cloud9 will happily talk to npm. Lets use the console down the bottom of the IDE and type in:
<pre>'npm install socket.io'</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827422</wp:post_id>
  <wp:post_date>2011-09-02 16:42:33</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general"><![CDATA[General]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827422]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827422]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>mail_merge_template</title>
  <link>https://maintenancecoder.wordpress.com/2010/11/05/generating-word-documents-part-3-mail-merge/mail_merge_template/</link>
  <pubDate>Fri, 29 Oct 2010 04:58:09 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/10/mail_merge_template.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[A simple letter of arrears]]></excerpt:encoded>
  <wp:post_id>827423</wp:post_id>
  <wp:post_date>2010-10-29 14:28:09</wp:post_date>
  <wp:post_date_gmt>2010-10-29 04:58:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mail_merge_template</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827297</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/10/mail_merge_template.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827298]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/10/mail_merge_template.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>WEI</title>
  <link>https://maintenancecoder.wordpress.com/2010/11/09/tablet-pc-review-hp-elitebook/wei/</link>
  <pubDate>Tue, 09 Nov 2010 02:42:04 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2010/11/wei.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Not jawdropping - but good for a workhorse.]]></excerpt:encoded>
  <wp:post_id>827424</wp:post_id>
  <wp:post_date>2010-11-09 12:12:04</wp:post_date>
  <wp:post_date_gmt>2010-11-09 02:42:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>wei</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827333</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2010/11/wei.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_parent</wp:meta_key>
    <wp:meta_value><![CDATA[827333]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>pre_import_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827334]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[The windows experience index]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_attachment_original_parent_id</wp:meta_key>
    <wp:meta_value><![CDATA[827333]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_original_import_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://cultivatingcode.files.wordpress.com/2010/11/wei.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>IMG_0734</title>
  <link>https://maintenancecoder.wordpress.com/img_0734/</link>
  <pubDate>Wed, 19 Aug 2015 10:11:05 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/08/img_0734.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827438</wp:post_id>
  <wp:post_date>2015-08-19 19:41:05</wp:post_date>
  <wp:post_date_gmt>2015-08-19 10:11:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_0734</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/08/img_0734.jpg</wp:attachment_url>
</item>
<item>
  <title>IMG_20140629_151542</title>
  <link>https://maintenancecoder.wordpress.com/img_20140629_151542/</link>
  <pubDate>Wed, 19 Aug 2015 10:13:13 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/08/img_20140629_151542.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827439</wp:post_id>
  <wp:post_date>2015-08-19 19:43:13</wp:post_date>
  <wp:post_date_gmt>2015-08-19 10:13:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_20140629_151542</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/08/img_20140629_151542.jpg</wp:attachment_url>
</item>
<item>
  <title>foo</title>
  <link>https://maintenancecoder.wordpress.com/foo/</link>
  <pubDate>Wed, 19 Aug 2015 10:18:54 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/08/foo.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827440</wp:post_id>
  <wp:post_date>2015-08-19 19:48:54</wp:post_date>
  <wp:post_date_gmt>2015-08-19 10:18:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>foo</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/08/foo.jpg</wp:attachment_url>
</item>
<item>
  <title>cropped-foo.jpg</title>
  <link>https://maintenancecoder.wordpress.com/cropped-foo-jpg/</link>
  <pubDate>Wed, 19 Aug 2015 10:19:09 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/08/cropped-foo.jpg</guid>
  <description/>
  <content:encoded><![CDATA[http://maintenancecoder.files.wordpress.com/2015/08/cropped-foo.jpg]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827441</wp:post_id>
  <wp:post_date>2015-08-19 19:49:09</wp:post_date>
  <wp:post_date_gmt>2015-08-19 10:19:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cropped-foo-jpg</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/08/cropped-foo.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_custom_header_last_used_pub/argent</wp:meta_key>
    <wp:meta_value><![CDATA[1439979550]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
    <wp:meta_value><![CDATA[pub/argent]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>cropped-foo1.jpg</title>
  <link>https://maintenancecoder.wordpress.com/cropped-foo1-jpg/</link>
  <pubDate>Wed, 19 Aug 2015 10:20:02 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/08/cropped-foo1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[http://maintenancecoder.files.wordpress.com/2015/08/cropped-foo1.jpg]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827442</wp:post_id>
  <wp:post_date>2015-08-19 19:50:02</wp:post_date>
  <wp:post_date_gmt>2015-08-19 10:20:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cropped-foo1-jpg</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/08/cropped-foo1.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_custom_header_last_used_pub/argent</wp:meta_key>
    <wp:meta_value><![CDATA[1439979604]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
    <wp:meta_value><![CDATA[pub/argent]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>cropped-foo2.jpg</title>
  <link>https://maintenancecoder.wordpress.com/cropped-foo2-jpg/</link>
  <pubDate>Wed, 19 Aug 2015 10:21:54 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/08/cropped-foo2.jpg</guid>
  <description/>
  <content:encoded><![CDATA[http://maintenancecoder.files.wordpress.com/2015/08/cropped-foo2.jpg]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827443</wp:post_id>
  <wp:post_date>2015-08-19 19:51:54</wp:post_date>
  <wp:post_date_gmt>2015-08-19 10:21:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cropped-foo2-jpg</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/08/cropped-foo2.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_custom_header_last_used_pub/independent-publisher</wp:meta_key>
    <wp:meta_value><![CDATA[1439979715]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
    <wp:meta_value><![CDATA[pub/independent-publisher]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>cropped-foo3.jpg</title>
  <link>https://maintenancecoder.wordpress.com/cropped-foo3-jpg/</link>
  <pubDate>Wed, 19 Aug 2015 10:29:54 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/08/cropped-foo3.jpg</guid>
  <description/>
  <content:encoded><![CDATA[http://maintenancecoder.files.wordpress.com/2015/08/cropped-foo3.jpg]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827444</wp:post_id>
  <wp:post_date>2015-08-19 19:59:54</wp:post_date>
  <wp:post_date_gmt>2015-08-19 10:29:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cropped-foo3-jpg</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/08/cropped-foo3.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_custom_header_last_used_pub/coherent</wp:meta_key>
    <wp:meta_value><![CDATA[1439980195]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
    <wp:meta_value><![CDATA[pub/coherent]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>cropped-foo4.jpg</title>
  <link>https://maintenancecoder.wordpress.com/cropped-foo4-jpg/</link>
  <pubDate>Wed, 19 Aug 2015 10:30:17 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/08/cropped-foo4.jpg</guid>
  <description/>
  <content:encoded><![CDATA[http://maintenancecoder.files.wordpress.com/2015/08/cropped-foo4.jpg]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827445</wp:post_id>
  <wp:post_date>2015-08-19 20:00:17</wp:post_date>
  <wp:post_date_gmt>2015-08-19 10:30:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cropped-foo4-jpg</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/08/cropped-foo4.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_custom_header_last_used_pub/coherent</wp:meta_key>
    <wp:meta_value><![CDATA[1439980814]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
    <wp:meta_value><![CDATA[pub/coherent]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>thVKZBBCWY</title>
  <link>https://maintenancecoder.wordpress.com/thvkzbbcwy/</link>
  <pubDate>Wed, 19 Aug 2015 10:36:45 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/08/thvkzbbcwy.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827446</wp:post_id>
  <wp:post_date>2015-08-19 20:06:45</wp:post_date>
  <wp:post_date_gmt>2015-08-19 10:36:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>thvkzbbcwy</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/08/thvkzbbcwy.jpg</wp:attachment_url>
</item>
<item>
  <title>Rusty_tools</title>
  <link>https://maintenancecoder.wordpress.com/rusty_tools/</link>
  <pubDate>Wed, 19 Aug 2015 10:38:42 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/08/rusty_tools.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827447</wp:post_id>
  <wp:post_date>2015-08-19 20:08:42</wp:post_date>
  <wp:post_date_gmt>2015-08-19 10:38:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>rusty_tools</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/08/rusty_tools.jpg</wp:attachment_url>
</item>
<item>
  <title>cropped-rusty_tools.jpg</title>
  <link>https://maintenancecoder.wordpress.com/cropped-rusty_tools-jpg/</link>
  <pubDate>Wed, 19 Aug 2015 10:42:01 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/08/cropped-rusty_tools.jpg</guid>
  <description/>
  <content:encoded><![CDATA[http://maintenancecoder.files.wordpress.com/2015/08/cropped-rusty_tools.jpg]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827448</wp:post_id>
  <wp:post_date>2015-08-19 20:12:01</wp:post_date>
  <wp:post_date_gmt>2015-08-19 10:42:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cropped-rusty_tools-jpg</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/08/cropped-rusty_tools.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_custom_header_last_used_pub/coherent</wp:meta_key>
    <wp:meta_value><![CDATA[1439980965]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
    <wp:meta_value><![CDATA[pub/coherent]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>tool-icon</title>
  <link>https://maintenancecoder.wordpress.com/tool-icon/</link>
  <pubDate>Wed, 19 Aug 2015 10:54:51 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/08/tool-icon.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827450</wp:post_id>
  <wp:post_date>2015-08-19 20:24:51</wp:post_date>
  <wp:post_date_gmt>2015-08-19 10:54:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tool-icon</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/08/tool-icon.png</wp:attachment_url>
</item>
<item>
  <title>tool-icon2</title>
  <link>https://maintenancecoder.wordpress.com/tool-icon2/</link>
  <pubDate>Wed, 19 Aug 2015 10:58:13 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/08/tool-icon2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827451</wp:post_id>
  <wp:post_date>2015-08-19 20:28:13</wp:post_date>
  <wp:post_date_gmt>2015-08-19 10:58:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tool-icon2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/08/tool-icon2.png</wp:attachment_url>
</item>
<item>
  <title>tool-icon</title>
  <link>https://maintenancecoder.wordpress.com/tool-icon-2/</link>
  <pubDate>Wed, 19 Aug 2015 11:00:26 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/08/tool-icon1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827452</wp:post_id>
  <wp:post_date>2015-08-19 20:30:26</wp:post_date>
  <wp:post_date_gmt>2015-08-19 11:00:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tool-icon-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/08/tool-icon1.png</wp:attachment_url>
</item>
<item>
  <title>tool-icon</title>
  <link>https://maintenancecoder.wordpress.com/tool-icon-3/</link>
  <pubDate>Wed, 19 Aug 2015 11:00:53 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/08/tool-icon3.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827453</wp:post_id>
  <wp:post_date>2015-08-19 20:30:53</wp:post_date>
  <wp:post_date_gmt>2015-08-19 11:00:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tool-icon-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/08/tool-icon3.png</wp:attachment_url>
</item>
<item>
  <title>tool-icon</title>
  <link>https://maintenancecoder.wordpress.com/tool-icon-4/</link>
  <pubDate>Wed, 19 Aug 2015 11:01:53 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/08/tool-icon4.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827454</wp:post_id>
  <wp:post_date>2015-08-19 20:31:53</wp:post_date>
  <wp:post_date_gmt>2015-08-19 11:01:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tool-icon-4</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/08/tool-icon4.png</wp:attachment_url>
</item>
<item>
  <title>australia-head-in-sand-climate-change</title>
  <link>https://maintenancecoder.wordpress.com/2015/12/02/json-serialisation-of-circular-references/australia-head-in-sand-climate-change/</link>
  <pubDate>Wed, 02 Dec 2015 11:13:07 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/12/australia-head-in-sand-climate-change.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827700</wp:post_id>
  <wp:post_date>2015-12-02 20:43:07</wp:post_date>
  <wp:post_date_gmt>2015-12-02 11:13:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>australia-head-in-sand-climate-change</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827476</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/12/australia-head-in-sand-climate-change.jpg</wp:attachment_url>
</item>
<item>
  <title>australia-head-in-sand-climate-change</title>
  <link>https://maintenancecoder.wordpress.com/2015/12/02/json-serialisation-of-circular-references/australia-head-in-sand-climate-change-2/</link>
  <pubDate>Wed, 02 Dec 2015 11:13:38 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/12/australia-head-in-sand-climate-change1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827701</wp:post_id>
  <wp:post_date>2015-12-02 20:43:38</wp:post_date>
  <wp:post_date_gmt>2015-12-02 11:13:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>australia-head-in-sand-climate-change-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827476</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/12/australia-head-in-sand-climate-change1.jpg</wp:attachment_url>
</item>
<item>
  <title>Capture</title>
  <link>https://maintenancecoder.wordpress.com/2015/12/02/json-serialisation-of-circular-references/capture-5/</link>
  <pubDate>Wed, 02 Dec 2015 11:31:29 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.files.wordpress.com/2015/12/capture.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827709</wp:post_id>
  <wp:post_date>2015-12-02 21:01:29</wp:post_date>
  <wp:post_date_gmt>2015-12-02 11:31:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>capture-5</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>827476</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://maintenancecoder.files.wordpress.com/2015/12/capture.png</wp:attachment_url>
</item>
<item>
  <title>Getting Started With WCF over SSL</title>
  <link>https://maintenancecoder.wordpress.com/2011/12/05/getting-started-with-wcf-over-ssl-2/</link>
  <pubDate>Sun, 04 Dec 2011 23:55:31 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.wordpress.com/?p=826839</guid>
  <description/>
  <content:encoded><![CDATA[<h2>AIMS:</h2>
· To create an IIS Application that is accessed over SSL.

· Use the Wcf Test Client to connect and verify the service is running
<h2>YOU WILL NEED:</h2>
· SELFSSL7.exe available here: <a href="http://www.iisinformation.com/2010/05/self-signing-ssl-for-iis7-selfssl7/">http://www.iisinformation.com/2010/05/self-signing-ssl-for-iis7-selfssl7/</a>

· IIS instance installed locally

· Sufficient access to install certificates in root certificate authority store
<h2>STEPS</h2>
<h2>Self Signed Certificate Installation</h2>
1. Install SELFSSL7 to a convenient location

2. Open IIS7 management console as administrator

3. Open your ‘Default Web Site’ and create an application called TestSSL

a. use a physical path like C:inetpubwwwrootsecure

b. accept the other defaults and hit OK

4. Open a command line tool (e.g. powershell) as administrator

5. Run SelfSSL7.exe with the following command:
<p style="padding-left:30px;">selfssl7 /V 9999 /I /T /Q</p>
This command will create a 1024 bit strength certificate that is valid for 9999 days, bound to the “Default Web Site” website on all unassigned IP addresses for port 443, added to the local users “Trusted Certificates” list, named &lt;YOUR_PC_NAME&gt;. It will also override any binding on port 443.

<strong>One of the important things to remember about Self Signed certificates and WCF is that if the name on the certificate doesn’t match the name of the internet domain it is assigned to, then certificate validation <em>will fail</em>.</strong>
<h2>SSL application creation</h2>
1. Reopen the IIS7 management console and inspect the Secure web site SSL Settings

2. Tick the Require SSL option and hit Apply

<a href="http://maintenancecoder.files.wordpress.com/2011/12/image001.png"><img class="alignnone size-full wp-image-826840" title="image001" src="http://maintenancecoder.files.wordpress.com/2011/12/image001.png" alt="" width="579" height="390" /></a>

3. Open the Bindings for the ‘Default Web Site’ site, ensure there is a https binding.

<a href="http://maintenancecoder.files.wordpress.com/2011/12/image002.png"><img class="alignnone size-full wp-image-826841" title="image002" src="http://maintenancecoder.files.wordpress.com/2011/12/image002.png" alt="" width="600" height="232" /></a>

4. Edit the https binding and ensure that its using the YOUR_PC_NAME certificate

<a href="http://maintenancecoder.files.wordpress.com/2011/12/image003.png"><img class="alignnone size-full wp-image-826842" title="image003" src="http://maintenancecoder.files.wordpress.com/2011/12/image003.png" alt="" width="515" height="282" /></a>
<h2>Test WCF Service creation</h2>
1. Open Visual Studio 2010 and create a new WCF Service Application
<a href="http://maintenancecoder.files.wordpress.com/2011/12/image004.jpg"><img class="alignnone size-full wp-image-826843" title="image004" src="http://maintenancecoder.files.wordpress.com/2011/12/image004.jpg" alt="" width="544" height="373" /></a>

2. Open the web.config

Replace the system.serviceModel element with the following markup:

[sourcecode language="xml"]
&lt;system.serviceModel&gt;

  &lt;services&gt;

    &lt;service name=&quot;WcfService1.Service1&quot; behaviorConfiguration=&quot;https&quot;&gt;

      TestSSL/Service1.svc&quot; bindingConfiguration=&quot;TransportSecurity&quot; binding=&quot;wsHttpBinding&quot; contract=&quot;WcfService1.IService1&quot;/&gt;

      &lt;endpoint address=&quot;mex&quot; binding=&quot;mexHttpsBinding&quot; name=&quot;Metadata&quot; contract=&quot;IMetadataExchange&quot;/&gt;

    &lt;/service&gt;

  &lt;/services&gt;

  &lt;bindings&gt;

    &lt;wsHttpBinding&gt;

      &lt;binding name=&quot;TransportSecurity&quot;&gt;

        &lt;security mode=&quot;Transport&quot;&gt;

          &lt;transport clientCredentialType=&quot;None&quot; /&gt;

        &lt;/security&gt;

      &lt;/binding&gt;

    &lt;/wsHttpBinding&gt;

  &lt;/bindings&gt;

  &lt;behaviors&gt;

    &lt;serviceBehaviors&gt;

      &lt;behavior name=&quot;https&quot;&gt;

        &lt;serviceMetadata httpsGetEnabled=&quot;true&quot;/&gt;

        &lt;serviceDebug includeExceptionDetailInFaults=&quot;true&quot;/&gt;

      &lt;/behavior&gt;

    &lt;/serviceBehaviors&gt;

  &lt;/behaviors&gt;

  &lt;serviceHostingEnvironment multipleSiteBindingsEnabled=&quot;false&quot; /&gt;

&lt;/system.serviceModel&gt;

[/sourcecode]

This markup achieves several things, reading from top to bottom:

· It sets up two service endpoints: one foir https access and another for accessing metadata about the service, over SSL. Note the contracts used and the use of a QN (Qualified Name) to describe the service contract.

· It modifies the standard ‘wsHttpBinding’ to include transport level security using SSL certificates at the server only. This implies that the client must trust the server certificate. Labelled ‘TransportSecurity’

· Creates a service behaviour called ‘https’ and enables publishing of metadata (for service discovery) and debugging information.

· Finally it forces the use of absolute URLs by disabling the ‘multipleSiteBindingsEnabled’ attribute

· Note the service endpoint is configured to use the modified binding and behaviour through the use of the ‘bindingConfiguration’ &amp; the ‘behaviourConfiguration’ attributes, respectively.

3. Open the project properties and goto the ‘Package/Publish Web’ tab

<a href="http://maintenancecoder.files.wordpress.com/2011/12/image005.jpg"><img class="alignnone size-full wp-image-826844" title="image005" src="http://maintenancecoder.files.wordpress.com/2011/12/image005.jpg" alt="" width="539" height="298" /></a>

4. Change the IIS Web site/application name to ‘Secure/TestSSL’

<a href="http://maintenancecoder.files.wordpress.com/2011/12/image006.jpg"><img class="alignnone size-full wp-image-826845" title="image006" src="http://maintenancecoder.files.wordpress.com/2011/12/image006.jpg" alt="" width="546" height="228" /></a>

5. Save the properties

6. Right click the project in the Solution Explorer and choose ‘Build Deployment Package’. Wait for the package to be created

7. Right click the project again, this time selecting the Publish... menu item. You’ll see this window:
<a href="http://maintenancecoder.files.wordpress.com/2011/12/image007.png"><img class="alignnone size-full wp-image-826846" title="image007" src="http://maintenancecoder.files.wordpress.com/2011/12/image007.png" alt="" width="423" height="633" /></a>

8. Rename the profile to ‘FileSystem’, and change the publish method to ‘filesystem’.
Set the target location to the physical location of your web application, and set it to delete all existing files:
<a href="http://maintenancecoder.files.wordpress.com/2011/12/image008.png"><img class="alignnone size-full wp-image-826847" title="image008" src="http://maintenancecoder.files.wordpress.com/2011/12/image008.png" alt="" width="435" height="396" /></a>

Hit publish and wait for it to succeed. *NOTE* You may need to edit permissions for folders created under c:inetpubwwwroot

9. Double check your deployment by browsing to the physical location of your TestSSL site. You should see something like this:
<a href="http://maintenancecoder.files.wordpress.com/2011/12/image009.png"><img class="alignnone size-full wp-image-826848" title="image009" src="http://maintenancecoder.files.wordpress.com/2011/12/image009.png" alt="" width="454" height="191" /></a>

10. Check the service is up and running: goto <a href="https:/testssl/service1.svc">https:///testssl/service1.svc</a>

If you see a certificate warning in your browser or something like this:

<a href="http://maintenancecoder.files.wordpress.com/2011/12/image010.png"><img class="alignnone size-full wp-image-826849" title="image010" src="http://maintenancecoder.files.wordpress.com/2011/12/image010.png" alt="" width="396" height="318" /></a>

View the certificate and double check the certificate name matches the URL you’ve assigned the website...they must match. E.g. for a website on <a href="https://it-05/">https://it-05/</a> to work, you must name your certificate ‘it-05’
<h2>Using the WCF Test Client to Check your work</h2>
1. Generally the test client exists at the following location on 64 bit machines,
c:\program files (x86)\microsoft visual studio 10.0\common7\IDE\wcftestclient.exe

2. Find it and run it

3. Add an endpoint address (the address of your service)

<a href="http://maintenancecoder.files.wordpress.com/2011/12/image011.png"><img class="alignnone size-full wp-image-826850" title="image011" src="http://maintenancecoder.files.wordpress.com/2011/12/image011.png" alt="" width="600" height="377" /></a>

4. If everything went well, you should see a listing of the service operations on your service.

<a href="http://maintenancecoder.files.wordpress.com/2011/12/image012.png"><img class="alignnone size-full wp-image-826851" title="image012" src="http://maintenancecoder.files.wordpress.com/2011/12/image012.png" alt="" width="600" height="380" /></a>

This email may contain confidential information, which also may be legally privileged. Only the intended recipient(s) may access, use, distribute or copy this email. If this email is received in error, please inform the sender by return email and delete the original. If there are doubts about the validity of this message, please contact the sender by telephone. It is the recipients responsibility to check the email and any attached files for viruses.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>826839</wp:post_id>
  <wp:post_date>2011-12-05 09:25:31</wp:post_date>
  <wp:post_date_gmt>2011-12-04 23:55:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>getting-started-with-wcf-over-ssl-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[11285636]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e948c69d1e20e12b75ad12ff2c9ee5ec</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e560101c3e819b1f65f55f9b570a4a65</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_27cdaaaa44a2611b25bcc9a5710601e8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b25464bd8f770a248cef6ea6d3b68194</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_408d24235c6ef1dc75da921a85e09e31</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4f1273a199a0e7a0881317bdcc86d6a3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>twitter_cards_summary_img_size</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{i:0;i:579;i:1;i:390;i:2;i:3;i:3;s:24:"width="579" height="390"";s:4:"bits";i:8;s:4:"mime";s:9:"image/png";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Allowing Cross Domain AJAX</title>
  <link>https://maintenancecoder.wordpress.com/2011/12/13/cross-domain-ajax-chrome/</link>
  <pubDate>Tue, 13 Dec 2011 01:01:10 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.wordpress.com/?p=826871</guid>
  <description/>
  <content:encoded><![CDATA[Browsers traditionally, are a little particular about who you POST to.. For instance, using AJAX to post to a server from another domain can be blocked if the right headers are not included in the response. Some call this Cross Domain AJAX.

Simply put, you need to implement Cross-Origin Resource Sharing. In most browsers, that means including the following header:

<code>Access-Control-Allow-Origin: *</code>

You can also whitelist ...

<code>Access-Control-Allow-Origin: http://yourdomain.com, http://yourotherdomain.com</code>

For versions of internet explorer, you may need to use the <a href="http://msdn.microsoft.com/en-us/library/cc288060(v=vs.85).aspx">XDomainRequest </a>object. <a href="http://en.wikipedia.org/wiki/Cross-Origin_Resource_Sharing#Browser_support">Some browsers</a> simply dont support it and you need to use <a href="http://en.wikipedia.org/wiki/Cross-Origin_Resource_Sharing#CORS_relationship_to_JSONP">alternatives</a> to support them, however that comes with its own set of <a href="http://en.wikipedia.org/wiki/JSONP#Cross-site_request_forgery">security considerations</a>.

Good article here: <a href="http://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/">http://www.nczonline.net/blog/</a>

For the propellerheads: <a href="http://www.w3.org/TR/cors/">http://www.w3.org/TR/cors/</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>826871</wp:post_id>
  <wp:post_date>2011-12-13 10:31:10</wp:post_date>
  <wp:post_date_gmt>2011-12-13 01:01:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cross-domain-ajax-chrome</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="ajax"><![CDATA[AJAX]]></category>
  <category domain="post_tag" nicename="back2basics"><![CDATA[Back2Basics]]></category>
  <category domain="post_tag" nicename="cors"><![CDATA[CORS]]></category>
  <category domain="post_tag" nicename="http"><![CDATA[HTTP]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="xss"><![CDATA[XSS]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[11285636]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";s:1:"0";s:6:"author";s:8:"11285636";s:7:"blog_id";s:8:"10980428";s:9:"mod_stamp";s:19:"2011-12-13 01:04:23";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_73996e8233b19b8800bcea62aa564a33</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5acdd4b31ed7e211d63c655cf981eab7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Container Lifetime and web requests</title>
  <link>https://maintenancecoder.wordpress.com/2011/12/22/container-lifetime-and-web-requests/</link>
  <pubDate>Thu, 22 Dec 2011 04:17:12 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.wordpress.com/2011/12/22/container-lifetime-and-web-requests/</guid>
  <description/>
  <content:encoded><![CDATA[<p>I recently encountered a strange issue with a WCF service I'm helping to develop. Subsequent requests to a service operation was returning the same results, regardless of input.</p><p>When debugging this service in Visual Studio it worked fine (using the internal web server), but as soon as I deployed it to a staging environment (IIS 7.5, SSL &amp; Message level security turned on) the service started to appear to cache responses.</p><p>To cut a long story short: it was our DI container not creating objects per web request, but per application lifetime. If you use autofac for ASP MVC, you're probably used to it having a per request lifetime: the autofac integration rigs this up for you. If you try this in a web service though, you'll need to go and DIY.</p><p>This <a href="http://nblumhardt.com/2011/01/an-autofac-lifetime-primer/">comprehensive article</a> explains it all better than I can, but if its a case of tl;dr....here is a good takeaway straight from Nicks playbook:</p><p><strong>Don’t resolve from the root container. Always resolve from and then release a lifetime scope.</strong></p><p>...good advice!</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827026</wp:post_id>
  <wp:post_date>2011-12-22 13:47:12</wp:post_date>
  <wp:post_date_gmt>2011-12-22 04:17:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>container-lifetime-and-web-requests</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Username Token Profile With WCF over HTTP with no code required</title>
  <link>https://maintenancecoder.wordpress.com/2012/11/27/username-token-profile-with-wcf-over-http-with-no-code-required/</link>
  <pubDate>Tue, 27 Nov 2012 09:41:18 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.wordpress.com/?p=827191</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://social.msdn.microsoft.com/Forums/en-US/wcf/thread/d55349cf-0fe8-4791-b868-58e4de66768c">WCF does not make Username Tokens over HTTP easy</a>. For <a href="http://www.w3.org/2001/tag/doc/passwordsInTheClear-52">good reason</a> too. People who pass credentials in the clear <a href="http://plaintextoffenders.com/">must be judged</a>!

One day, you may find yourself forced into a corner, with a gun to your head,  having to break the rules and create a client to follow the <a href="http://docs.oasis-open.org/wss/v1.1/wss-v1.1-spec-os-UsernameTokenProfile.pdf">WS-S Username Token Profile</a> without transport level security. Like I did today.

Initially, as most people do, I figured it would be a simple case of tweaking an 'out of the box' WCF binding like wsHttpBinding or basicHttpBinding. Some people put in <a href="http://stackoverflow.com/questions/7247536/creating-headers-wsse-section-of-wcf-client-programatically-in-c-sharp">herculean </a>efforts to fit their scenarios into the customBinding approach.

An even less obvious approach is to turn to the WCF's <a href="http://msdn.microsoft.com/en-us/library/aa717047.aspx">message inspector</a> extensibility point. This by the way, works like a charm, as long as you are OK with using what amounts might as well be a loose wrapper around <a href="http://msdn.microsoft.com/en-us/library/system.text.stringbuilder.aspx">StringBuilder</a> to complete the task. Good enough if you need run time flexibility.

I <a href="http://stackoverflow.com/a/5858286">dug further</a> and found that it is really easy to <a href="http://www.hanselman.com/blog/BreakingAllTheRulesWithWCF.aspx">break the rules</a> when it comes to SOAP Headers and the <a href="http://msdn.microsoft.com/en-us/library/ms731361.aspx">basicHttpBinding</a>. Often forgotten, the <a href="http://msdn.microsoft.com/en-us/library/ms731749(v=vs.110).aspx">&lt;headers&gt;</a> configuration element to the rescue (namespaces &amp; prefixes removed for brevity):

[sourcecode language="xml"]

&lt;endpoint ... &gt;
&lt;headers&gt;
  &lt;Security mustUnderstand=&quot;0&quot;&gt;
    &lt;UsernameToken Id=&quot;ABC-123&quot;&gt;
      &lt;Username&gt;username&lt;/Username&gt;
      &lt;Password&gt;password&lt;/Password&gt;
    &lt;/UsernameToken&gt;
  &lt;/Security&gt;
&lt;/headers&gt;
&lt;/endpoint&gt;

[/sourcecode]

So this may not give you much run time flexibility, but it's good to know that adding SOAP headers is not difficult at all. I wish I had known about the headers element a long time ago.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827191</wp:post_id>
  <wp:post_date>2012-11-27 19:11:18</wp:post_date>
  <wp:post_date_gmt>2012-11-27 09:41:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>username-token-profile-with-wcf-over-http-with-no-code-required</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[11285636]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>41</wp:comment_id>
    <wp:comment_author><![CDATA[Calling a SOAP 1.1 Web Service using WS-Security and HTTPS | Avin&#039;s Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://avinmathew.com/calling-a-soap-1-1-web-service-using-ws-security-and-https/</wp:comment_author_url>
    <wp:comment_author_IP>104.236.132.246</wp:comment_author_IP>
    <wp:comment_date>2015-01-19 08:15:47</wp:comment_date>
    <wp:comment_date_gmt>2015-01-18 22:45:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] simplest way of adding credentials to every request is to add the SOAP header XML in your [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1421625239.95726490020751953125;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1421621148.2791988849639892578125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1421745526</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1421745526.1301429271697998046875;s:7:"message";s:48:"Jim Burger changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"Jim Burger";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Exposing .NET Classes to a Classic ASP web page via COM</title>
  <link>https://maintenancecoder.wordpress.com/2013/06/20/exposing-dot-net-to-asp-via-com/</link>
  <pubDate>Thu, 20 Jun 2013 04:12:25 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://maintenancecoder.wordpress.com/?p=827198</guid>
  <description/>
  <content:encoded><![CDATA[There are already heaps of posts and guidance on how to make COM Callable wrappers out there but it would seem there is a lack of posts on how to then consume and use your API from Classic ASP
<h3>Recipe for success:</h3>
<ul>
	<li>A .NET API that you would like to expose</li>
	<li>regasm.exe (normally part of the Windows SDK, or as part of a standard Visual Studio installation)</li>
	<li>A Classic ASP web site up and running</li>
</ul>
<h3>.NET API</h3>
So our .NET API is simple, but complex enough to show up a particular nuance to COM in VBScript. Two classes - one is used as a the parameter to a method on another:

[code language="csharp"]
var class1 = new Class1();
var class2 = new Class2();
class1.Method1(class2);
[/code]

So the key with your API is that if you are going to expose this stuff over COM you'll need to decorate your wrapper in such a way that a VBSCript client can deal with it.

[code language="csharp"]
using System.Runtime.InteropServices;
namespace ClassLibrary1
{
  [ClassInterface(ClassInterfaceType.None)]
  [ProgId(&quot;ClassLibrary1.Class1&quot;)]
  [Guid(&quot;004F61C7-5159-4812-B20A-68A537C33164&quot;)]
  [ComVisible(true)]
  public class Class1
  {
    public string Method1(Class2 foo)
    {
      return foo.Property1 + foo.Property2 + &quot;1&quot;;
    }
  }

  [ClassInterface(ClassInterfaceType.None)]
  [ProgId(&quot;ClassLibrary1.Class2&quot;)]
  [Guid(&quot;FF4B4FB3-98D2-4D0A-A4E3-94F64D0D5F77&quot;)]
  [ComVisible(true)]
  public class Class2
  {
    public string Property1
    {
      get { return &quot;Hello &quot;; }
    }
    public string Property2
    {
      get { return &quot;Complex Parameterization&quot;; }
    }
  }
}[/code]

Some things to note from the above code:
<ul>
	<li>Each class should be marked as COM Visible and have its own GUID attribute</li>
	<li>ProgID is optional, but it allows you to set how the VBScript client will create teh object by name.</li>
	<li>Set the class interface type to none.</li>
</ul>
<h3>Registering and unregistering the .dll</h3>
Registration can get painful when you don't know what is going on. If you get weird behaviour while registering and unregistering, you will probably need to go and edit your registry to remove orphaned entries. In my experience this is only an issue if you aren't supplying your own GUIDs and Visual studio is generating new ones for you (via the Register for COM project setting - just turn it off) or you havent locked in your version number and that is going up every time you build.
<h4>Registation</h4>
<pre>regasm.exe "classlibrary1.dll" /tlb: "classlibrary1.tlb" /codebase</pre>
<h4>Unregistering</h4>
<pre>regasm.exe /u "classlibrary1.dll"</pre>
<h3>Incorporating into Classic ASP</h3>
Finally your classic ASP needs to look like this in order to access your COM library:

[code language="vb"]
Dim obj
Dim obj2
Dim parameter
Dim result

Set obj = Server.CreateObject(&quot;ClassLibrary1.Class1&quot;)
Set obj2 = Server.CreateObject(&quot;ClassLibrary1.Class2&quot;)

result = obj.Method1((obj2))
[/code]

Please note the double braces around the parameter on the final line there - my experience was that if you do not pass this by reference, then the following error will occur:
<pre>Microsoft VBScript runtime error: Invalid procedure call or argument: 'Method1'</pre>
Note that the permissions that IIS runs with will dictate access to your library location. Make sure it has read permissions. If that freaks you out, then use the GAC (see gacutil). If that freaks you out, then maybe COM &amp; ClassicASP isn't for you. If passing by reference freaks you out, then you can instead change the type of Method1's parameter to dynamic (assuming your are on .NET 4+) and access it in a late bound fashion instead. Hope this saves somebody else some time, and that its saves some freaking out (because nobody wants that).]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827198</wp:post_id>
  <wp:post_date>2013-06-20 13:42:25</wp:post_date>
  <wp:post_date_gmt>2013-06-20 04:12:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>exposing-dot-net-to-asp-via-com</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="asp"><![CDATA[ASP]]></category>
  <category domain="post_tag" nicename="com"><![CDATA[COM]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="vbscript"><![CDATA[VBScript]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[11285636]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[writing-a-com-client-for-a-classic-asp-web-page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>tagazine-media</wp:meta_key>
    <wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"11285636";s:7:"blog_id";s:8:"10980428";s:9:"mod_stamp";s:19:"2013-06-20 04:15:47";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[writing-a-com-lib-for-classic-asp-web-page]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>The state of BDD frameworks</title>
  <link>https://maintenancecoder.wordpress.com/2010/04/27/the-state-of-bdd-frameworks/</link>
  <pubDate>Tue, 27 Apr 2010 02:39:14 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=826940</guid>
  <description/>
  <content:encoded><![CDATA[These are the kinds of issues BDD attempts (but I feel fails) to solve.
<ul>
	<li>To produce tests that are useful.</li>
	<li>To produce tests you can trust.</li>
	<li>To produce loosely coupled tests.</li>
</ul>
The failure of BDD is that it forces a cubersome semantic around these issues. The developer has to think about how to coerce their intent into the BDD 'language'. Really, what is more important, is that the TDD'er understands why these issues are important, and how to avoid falling into the classic testing traps. That has to be learned through experience, and no framework is going to get those ideas through to anybody.

Hence, frameworks like <a href="http://elegantcode.com/2009/07/05/mspec-take-2/" target="_blank">Machine.Specificaitons</a>, <a href="http://code.google.com/p/specunit-net/" target="_blank">SpecUnit</a>, <a href="http://nbehave.codeplex.com/wikipage?title=Getting%20started&amp;referringTitle=latest%20release" target="_blank">NBehave</a>, <a href="http://www.ohloh.net/p/tinybdd" target="_blank">TinyBDD </a>and <a href="http://bitbucket.org/forki/naturalspec/wiki/Home" target="_blank">NaturalSpec</a>, all irk me a little. There intentions are pure, but I feel the need to lump them into the the category of 'teaching aid'. These frameworks want to teach you how to test correctly. They don't care that they get inyour way.

Amnogst other problems, the general assumption is that BDD is not possible with a standard framework and that devs need to be funnelled into good practices. This isn't true though, I can behave myself in MSTest if I know how:

[sourcecode language="csharp"]

namespace My.App.Model
{
    [TestClass]
    public class When_processing_a_payment : behaves_like_a_customer_with_an_invoice
    {
        [TestMethod]
        public void should_publish_an_invoice_paid_event()
        {
              var output =
                    paymentProcessor.PayInvoice(customer.Invoice);
              Assert.AreEqual(OutCome.Success, output);
              eventAggregator.verifyWasCalled(d =&amp;gt; d.PublishEvent&amp;lt;InvoicePaidEvent&amp;gt;());
        }
    }
}

[/sourcecode]

So what do I think is wrong with testing like this?
<ul>
	<li> Use of underscores is a poor solution to the naming problem.</li>
	<li> Use of metaprogramming is messy and provides no real value to the document.</li>
	<li> Use of inheritance to achieve reusability is the [potential] beginnings of a code smell. Ideally, composition would beused to provide test setup.</li>
	<li> The assertion syntax doesn't read very well.</li>
</ul>
So with all of this in mind, I want:
<ul>
	<li> Tests *anybody* can read</li>
	<li> A framework that supports me in my decision to apply any testing paradigm that I want. Ideally in any .NET language that I want.</li>
	<li> Zero voodoo (setup/teardown)</li>
	<li> Zero ceremony (metaprogramming)</li>
	<li> Supports me in my decision to bring in the code smells of my choice, not force me down a particular track.</li>
	<li> When used in the above manner, produces an output document similar to that of most BDD frameworks, that can be used for manual acceptance testing.</li>
</ul>
So, as a good programmer should, I decided to experiment with a few ideas and roll my own. Thankfully, with the advent of the Gallio framework, this wasn't the massive undertaking it once was. While not still not what I consider ideal, my framework (based on F#) allows for a neat, unrestrictive testing workflow.

[sourcecode language="fsharp"]
namespace ``Concerns my payment system``

module ``When used to process a payment for a customer``=
    open ``A customer with an invoice``

    let ``it publish an invoice paid event``()=
        paymentProcessor.PayInvoice customer.Invoice |&amp;amp;gt; should.equal Success
        eventAggregator.verifyWasCalled(fun d -&amp;amp;gt; d.PublishEvent&amp;amp;lt;InvoicePaidEvent&amp;amp;gt;())

[/sourcecode]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827219</wp:post_id>
  <wp:post_date>2010-04-27 12:09:14</wp:post_date>
  <wp:post_date_gmt>2010-04-27 02:39:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-state-of-bdd-frameworks</wp:post_name>
  <wp:status>trash</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="general"><![CDATA[General]]></category>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[826940]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[826940]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Resharper live templates: drop down lists</title>
  <link>https://maintenancecoder.wordpress.com/2010/02/10/resharper-live-templates-drop-down-lists/</link>
  <pubDate>Wed, 10 Feb 2010 08:04:21 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827048</guid>
  <description/>
  <content:encoded><![CDATA[Just as <a href="http://msdn.microsoft.com/en-us/vstudio/dd582936.aspx">VS2010 has gone RC</a>, I've noticed that R# 5 <a href="http://confluence.jetbrains.net/display/ReSharper/ReSharper+5.0+Nightly+Builds">has released a compatible build</a>. Today I thought I'd highlight a simple, yet useful feature that doesn't currently receive much press: Custom <a href="http://www.jetbrains.com/resharper/features/codeTemplate.html">Live templates</a> can now use drop down lists.

As an example of how to take advantage of this feature, I'm going to cleanup my collection of unit testing templates. I have to write tests for MbUnit, NUnit, xUnit.NET and MSTest for various projects, and until now, I've used a separate template for each of them.

[caption id="attachment_827052" align="alignnone" width="274" caption="Remembering different shortcuts is a pain."]<a href="http://cultivatingcode.files.wordpress.com/2010/02/myorginalsetofuttemplates1.png"><img class="size-full wp-image-827052" title="MyOrginalSetOfUTTemplates" src="http://cultivatingcode.files.wordpress.com/2010/02/myorginalsetofuttemplates1.png" alt="" width="274" height="274" /></a>[/caption]

With R# 5 I can have one template <em>to rule them all</em>, by using the 'Comma-delimited list of values' macro, we can supply... er... a comma-delimited list of values:

<a href="http://cultivatingcode.files.wordpress.com/2010/02/frameworkagnostictesttemplate1.png"><img class="alignnone size-full wp-image-827050" title="Framework Agnostic Test Template" src="http://cultivatingcode.files.wordpress.com/2010/02/frameworkagnostictesttemplate1.png" alt="" width="500" height="329" /></a>

In the code editor, we now get a nice drop down to choose what value we want to use and viola!

<a href="http://cultivatingcode.files.wordpress.com/2010/02/rsdropdownlist.png"><img class="alignnone size-full wp-image-827053" title="RSDropDownList" src="http://cultivatingcode.files.wordpress.com/2010/02/rsdropdownlist.png" alt="Viola!" width="284" height="209" /></a>

Finally, a word about using this feature in VB - it doesn't seem to work as advertised - so hopefully that will get rectified before release!

<a href="http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fcultivatingcode.com%2f2010%2f02%2f10%2fresharper-live-templates-drop-down-lists%2f"><img src="http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fcultivatingcode.com%2f2010%2f02%2f10%2fresharper-live-templates-drop-down-lists%2f" border="0" alt="kick it on DotNetKicks.com" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827223</wp:post_id>
  <wp:post_date>2010-02-10 17:34:21</wp:post_date>
  <wp:post_date_gmt>2010-02-10 08:04:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>resharper-live-templates-drop-down-lists</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="coding"><![CDATA[Coding]]></category>
  <category domain="post_tag" nicename="csharp"><![CDATA[CSharp]]></category>
  <category domain="post_tag" nicename="resharper"><![CDATA[Resharper]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="tools"><![CDATA[Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827048]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827048]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Folders in F# Projects</title>
  <link>https://maintenancecoder.wordpress.com/2010/02/12/folders-in-f-projects/</link>
  <pubDate>Fri, 12 Feb 2010 13:47:28 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827063</guid>
  <description/>
  <content:encoded><![CDATA[While there is no IDE support for folders in F# projects, the .fsproj file is <em>still just a build script</em>. So as long as you are prepared to manage things on both your file system and in your solution explorer, then folders are actually possible.

To do this, right-click the project file in solution explorer, unload the project file. Now right-click the project again and hit edit. You can then add folders like this:

[sourcecode language="xml"]
&lt;ItemGroup&gt;
    &lt;Compile Include=&quot;typeA.fs&quot; /&gt;
    &lt;Compile Include=&quot;FoldertypeB.fs&quot; /&gt;
    &lt;Compile Include=&quot;typeC.fs&quot; /&gt;
&lt;/ItemGroup&gt;
[/sourcecode]

Yielding the following result:
<a href="http://cultivatingcode.files.wordpress.com/2010/02/capture.png"><img class="size-full wp-image-827064" title="Folders in F# projects" src="http://cultivatingcode.files.wordpress.com/2010/02/capture.png" alt="A picture of a folder hierarchy in an F# 2.0 project" width="203" height="176" /></a>

To reiterate, hacking the .fsproj file in this way means you have to make the folders and move the files around yourself. Another important point is that order is still relevant, if type C depends on A &amp; B in the above example, then it still must appear last - files will be processed from top to bottom still. Also the solution explorer context menu items 'add [above|below]' displays unexpected behaviour when folders are in play, files get added to the end of the project, ignoring the directive.

All things considered though, I think in large, fairly static code bases, tidying things up into folders would be a good move, and the maintenance programmers that move in after you've long gone will probably thank you for taking the time.

A big thanks to <a href="http://blogs.msdn.com/chrsmith/about.aspx">Chris Smith</a> from the F# team for bringing this workaround to my attention.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827227</wp:post_id>
  <wp:post_date>2010-02-12 23:17:28</wp:post_date>
  <wp:post_date_gmt>2010-02-12 13:47:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>folders-in-f-projects</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="coding"><![CDATA[Coding]]></category>
  <category domain="post_tag" nicename="fsharp"><![CDATA[FSharp]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827063]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827063]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>66</wp:comment_id>
    <wp:comment_author><![CDATA[ShuggyCoUk]]></wp:comment_author>
    <wp:comment_author_email>foo@shuggy.co.uk</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>79.123.78.25</wp:comment_author_IP>
    <wp:comment_date>2010-02-13 09:13:45</wp:comment_date>
    <wp:comment_date_gmt>2010-02-12 23:43:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hmmmm I think this is more likely to confuse the hell out of later developers myself.

nice to see it is feasable if desired though...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-02-12 23:43:45</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>67</wp:comment_id>
    <wp:comment_author><![CDATA[jburger]]></wp:comment_author>
    <wp:comment_author_email>jburg79@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>219.90.164.249</wp:comment_author_IP>
    <wp:comment_date>2010-04-23 09:44:09</wp:comment_date>
    <wp:comment_date_gmt>2010-04-23 00:14:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I've never met a developer who got confused by a hierarchical folder structure, but thats just my experience :)

A good example of where this can work nicely is managing localization resources in a Resources folder.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-04-23 00:14:09</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>68</wp:comment_id>
    <wp:comment_author><![CDATA[Mo Flanagan]]></wp:comment_author>
    <wp:comment_author_email>mo@bemosoftware.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>72.80.156.177</wp:comment_author_IP>
    <wp:comment_date>2010-08-07 01:56:42</wp:comment_date>
    <wp:comment_date_gmt>2010-08-06 16:26:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thank's, just what I was looking for!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281137323</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-08-06 16:26:42</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Generating Word Documents - Part 2: Simple Databinding</title>
  <link>https://maintenancecoder.wordpress.com/2010/10/13/generating-word-documents-p2/</link>
  <pubDate>Wed, 13 Oct 2010 07:19:17 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827106</guid>
  <description/>
  <content:encoded><![CDATA[In <a href="http://cultivatingcode.com/2010/07/08/generating-docs-with-open-xml/">Part 1</a> we covered the problem of generating word documents from a high level perspective. In this instalment, I'll walk through some lower level concepts. I'll show how Content Controls can be used to inject data into our templates.

<strong>A Simple Template</strong>

Depending on the source, this can either be the most tedious, or most pleasurable part of the pipeline. Upon receiving a 20-year-old document that was probably converted from WordStar 1.0 back in the summer of '87, you'll need to weigh up the benefits of cleaning it up or starting from scratch. <em>(More on automating that in a future episode.)</em>

So what are <a href="http://msdn.microsoft.com/en-us/library/bb157891.aspx">Content Controls</a>? Basically they are a handy placeholder that serve a dual purpose. You can validate <strong>manual input</strong> into them, through schema binding (handy for Sharepoint documents), another feature is that you can bind data to them using embedded XML and XPath.

Creating Content Controls is easily done; the first step is ensuring the <a href="http://msdn.microsoft.com/en-us/library/bb608625.aspx">Developer tab</a> is on, and for extra visibility, turn on the design mode.

&nbsp;

[caption id="attachment_827126" align="alignnone" width="500" caption="The Office Ribbon, Showing the Developer Tab. The &#039;Rich Text Content Control&#039; &amp; &#039;Design Mode&#039; buttons are highlighted."]<a href="http://cultivatingcode.files.wordpress.com/2010/06/adding-a-content-control.png"><img class="size-full wp-image-827126  " title="Adding a content control" src="http://cultivatingcode.files.wordpress.com/2010/06/adding-a-content-control.png" alt="" width="500" height="198" /></a>[/caption]

&nbsp;

You can click the 'Rich Text Content Control' icon (highlighted in the above picture) to create placeholders for data in your document.

Personally, I like to use keyboard short-cuts where possible; in this case Alt+L, Alt+Q will create a custom control at the current selection and Alt+L, Alt+L will access a selected controls properties, shown below...

&nbsp;

[caption id="attachment_827129" align="alignnone" width="440" caption="The Property Page for the Rich Text Content Control."]<a href="http://cultivatingcode.files.wordpress.com/2010/06/cc-props1.png"><img class="size-full wp-image-827129 " title="Content Control Properties" src="http://cultivatingcode.files.wordpress.com/2010/06/cc-props1.png" alt="" width="440" height="415" /></a>[/caption]

&nbsp;

After a few minutes you can end up with a pretty rich document. For this post, my example document looks like this:

<a href="http://cultivatingcode.files.wordpress.com/2010/06/finalexample.png"><img class="size-full wp-image-827130 alignnone" title="Example of content controls" src="http://cultivatingcode.files.wordpress.com/2010/06/finalexample.png" alt="" width="500" height="338" /></a>
<h3>Have Data. Will Databind.</h3>
<p style="text-align:left;">Now that we have place holders for data, we need to get data into them. The easiest way to do this is with the <a href="http://dbe.codeplex.com/">Content Control Toolkit</a>. Close the template from Word and open it in this application. You will be presented with a list of the  content controls you created in the template.</p>
<p style="text-align:left;"><a href="http://cultivatingcode.files.wordpress.com/2010/06/content-control-tool.png"><img class="alignnone size-full wp-image-827133" title="Content control tool" src="http://cultivatingcode.files.wordpress.com/2010/06/content-control-tool.png" alt="" width="500" height="327" /></a></p>
<p style="text-align:left;">Notice that the right hand pane is largely dedicated to the addition and edition of Custom XML parts. We will be inserting our data into the document via this tool. For starters, lets hand craft some XML satisfy this documents needs. Click the 'Create a new Custom XML Part' link under Actions, switch to the edit tab and enter the following XML:</p>
<p style="text-align:left;"><span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;"> </span></p>

[sourcecode language="xml"]
&lt;data&gt;
  &lt;title&gt;Hello Content Controls&lt;/title&gt;
  &lt;subtitle&gt;Testing content controls in MS Office Word&lt;/subtitle&gt;
  Cpt. James T. Kirk
  &lt;address&gt;No fixed address&lt;/address&gt;
  &lt;phone&gt;555-8735&lt;/phone&gt;
&lt;/data&gt;
[/sourcecode]

Now switch to the bind tab, and start dragging the data points across to the relevant content controls with your mouse. This will decide the correct XPath required to bind to the data and update the content controls properties. Alternatively, if you dream in XPath then you can double-click each content control on the left and enter the XPath in directly. The finished result will look like this:

<a href="http://cultivatingcode.files.wordpress.com/2010/06/data-bound.png"><img class="alignnone size-full wp-image-827136" title="data bound" src="http://cultivatingcode.files.wordpress.com/2010/06/data-bound.png" alt="" width="500" height="373" /></a>

Upon saving and exiting, we can reopen our template and find that our content controls are now bound to our design time data:

<a href="http://cultivatingcode.files.wordpress.com/2010/06/databound-template1.png"><img class="alignnone size-medium wp-image-827138" title="Databound template" src="http://cultivatingcode.files.wordpress.com/2010/06/databound-template1.png?w=300" alt="" width="300" height="184" /></a>

That really is the most simplest example I can show you - unfortunately, doing anything more complicated than this requires code. As you have probably surmised, that really means; <em>to do anything useful - </em>you need to write code<em>.</em>

However, we now have a usable template, that has not only 'design time' data embedded into it, but has XPath expressions attached to our content controls such that we can throw runtime data at it.

<span style="font-size:15px;font-weight:bold;">Boot strapping</span>

The point of the exercise is to create these things in a programmatic fashion. For various reasons, including revision history, template management &amp; automated testing, I decided to store my templates in a class library and write a small framework to manage the life-cycle of a document: from being sourced on the filesystem, to being injected with Xml data, to being rendered to a file. In Part 1 I eluded to a DocumentBuilder Class.

To keep things simple for now, I'll show you the bare minimum, using the <a href="http://www.microsoft.com/downloads/en/details.aspx?FamilyId=C6E744E5-36E9-45F5-8D8C-331DF206E0D0&amp;displaylang=en">Open XML API</a>. Note that I've referenced WindowsBase.dll and DocumentFormat.OpenXml.dll.

The following example code injects some static XML into the word document at runtime:

[sourcecode language="csharp"]
using System.Diagnostics;
using System.IO;
using System.Xml.Linq;
using DocumentFormat.OpenXml.Packaging;

namespace DocGenExample
{
    class Program
    {
        static void Main(string[] args)
        {
            var template = &quot;Example.docx&quot;;
            var outputFile = &quot;HelloContentControls.docx&quot;;

            //copy the file to the output location
            File.Copy(template, outputFile, true);

            //open the 'package'
            using (var wpd = WordprocessingDocument.Open(outputFile, true))
            {
                //get at the document part of the package
                var mainDoc = wpd.MainDocumentPart;

                //get rid of design time data
                mainDoc.DeleteParts(mainDoc.CustomXmlParts);

                //create runtime data
                var data = XElement.Parse(@&quot;
&lt;data&gt;
  &lt;title&gt;Serious Title&lt;/title&gt;
  The creation of TPS reports is SERIOUS!
  &lt;name&gt;Mr. John Smith&lt;/name&gt;
  &lt;address&gt;12 Capital Hill, Canberra&lt;/address&gt;
  &lt;phone&gt;555-8735&lt;/phone&gt;
&lt;/data&gt;
                &quot;); //this could just as easily be a serialized object..

                //create a new customXmlpart
                var xmlPart = mainDoc.AddCustomXmlPart(CustomXmlPartType.CustomXml);

                //stream data into the part
                using (var partStream = xmlPart.GetStream(FileMode.Create, FileAccess.Write))
                    using (var outputStream = new StreamWriter(partStream))
                        outputStream.Write(data);

            }
        }
    }
}

[/sourcecode]

This console app copies our template to a destination, cracks it open and fills it with our runtime data and stitches things back up again. Our output looks like a 'real' document:

<a href="http://cultivatingcode.files.wordpress.com/2010/06/serious-document-is-serious.png"><img class="alignleft size-medium wp-image-827144" style="margin-left:25px;margin-right:25px;" title="Serious document is serious" src="http://cultivatingcode.files.wordpress.com/2010/06/serious-document-is-serious.png?w=300" alt="Serious document is serious" width="300" height="272" /></a>
<h2>In Summary</h2>
The code is a lot simpler than the COM Interop code for office in my opinion, and the fact that it doesn't leave instances of word hanging around in the background is a real bonus.

I will be following this post up with examples of how to tackle trickier topics like tables, repeating sections and showing/hiding sections of content, and how to make this all happen without violating every OO design principle in the book.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827228</wp:post_id>
  <wp:post_date>2010-10-13 16:49:17</wp:post_date>
  <wp:post_date_gmt>2010-10-13 07:19:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>generating-word-documents-p2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="coding"><![CDATA[Coding]]></category>
  <category domain="post_tag" nicename="content-controls"><![CDATA[Content Controls]]></category>
  <category domain="post_tag" nicename="openxml"><![CDATA[OpenXml]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827106]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827106]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>69</wp:comment_id>
    <wp:comment_author><![CDATA[Generating Documents with the Open XML SDK &#8211; Part 1 &laquo; Cultivating code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://cultivatingcode.com/2010/07/08/generating-docs-with-open-xml/</wp:comment_author_url>
    <wp:comment_author_IP>74.200.246.90</wp:comment_author_IP>
    <wp:comment_date>2010-10-14 09:08:40</wp:comment_date>
    <wp:comment_date_gmt>2010-10-13 23:38:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Part two &#8211; Databinding with ContentControls is now [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1287013124</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-10-13 23:38:40</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>70</wp:comment_id>
    <wp:comment_author><![CDATA[PhilM]]></wp:comment_author>
    <wp:comment_author_email>philm@cottagecomputing.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>142.47.128.36</wp:comment_author_IP>
    <wp:comment_date>2010-10-27 13:22:49</wp:comment_date>
    <wp:comment_date_gmt>2010-10-27 03:52:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good stuff... still here watching for more... Phil

PS are you concerned about the lack of a future for Custom XML..basically you have gone around this problem by the use of content controls, right?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1288152330</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-10-27 03:52:49</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>71</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>202.6.153.92</wp:comment_author_IP>
    <wp:comment_date>2010-10-27 14:31:26</wp:comment_date>
    <wp:comment_date_gmt>2010-10-27 05:01:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I'm not all that concerned - at least from the perspective that there are plenty of ways around this. 

I'm still using custom XML for databinding in my project, since we never open our outputted documents in Word 2007.. they get passed to a PDF renderer which still respects Custom XML. 

For those who desperately need it there is always <a href="http://www.i4i.com/x4w.htm" rel="nofollow">x4w</a>

Finally, using content controls, you can inject data, other documents and the like, even cook up a homegrown databinding API if you want.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>70</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-10-27 05:01:26</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1288155686</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>72</wp:comment_id>
    <wp:comment_author><![CDATA[PhilM]]></wp:comment_author>
    <wp:comment_author_email>philm@cottagecomputing.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>142.47.128.36</wp:comment_author_IP>
    <wp:comment_date>2010-10-28 00:33:31</wp:comment_date>
    <wp:comment_date_gmt>2010-10-27 15:03:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the pointer.. didn't know i4i was doing that. Problem I immediately see with it is that every Word user who plans to open such a document would need the $150 add-in... you don't have the problem due to the PDF rendering, which I admit, is a good way around it if you're done editing.
There a cope plex project called FlexDoc which builds an API around custom XML, but the project has gone somewhat dormant as the author contemplates converting it to content controls.
Problem for a coder like me is the XML learning curve is high, and there are virtually no examples of integrating a database with a Word template (server-side, without Word). (E.g. exactly like a mail merge where the database has many names and addresses and you want to mail a latter to each with their data in it, and the starting point is a one-page template).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1288191811</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-10-27 15:03:31</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>73</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>202.6.153.92</wp:comment_author_IP>
    <wp:comment_date>2010-10-29 10:12:08</wp:comment_date>
    <wp:comment_date_gmt>2010-10-29 00:42:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[No problem! Thanks for contributing your thoughts. I'm glad you highlighted the need for a mail merge story. I think I'll focus a blog post to that very end and see what we can come up with.

I hadn't seen FlexDoc, if I had've started this thing earlier I would probably be in the same boat.

I'd have to agree that there is precious little documentation about constructing word documents from data, but I guess that there is a fine line between data driven documents and client side reporting (there is usually a case for training end users on something like crystal reports). Having said that - it would be awesome to empower our users with tools they already have!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>72</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1288312929</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-10-29 00:42:08</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>74</wp:comment_id>
    <wp:comment_author><![CDATA[PhilM]]></wp:comment_author>
    <wp:comment_author_email>philm@cottagecomputing.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>142.47.128.36</wp:comment_author_IP>
    <wp:comment_date>2010-10-29 11:33:12</wp:comment_date>
    <wp:comment_date_gmt>2010-10-29 02:03:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[(sorry to keep posting to you, thoughts occur to me one by one)
It seems the OPENXML SDK has been put to rest at Version 2.... nothing new coming. That said, they've done a good job of extending a bit past the packaging API. However, it's nothing like the object model available inside Word itself, and I guess it shouldn't be.
Everything I've seen on mail merge or repeating content controls just misses the real point of mail merge, i.e. one template repeated over and over for each row of data.
Beyond that, I'd like to be able to construct a whole report, inserting images, other templates, etc., which is what FlexDoc does, it's just it rests on Custom XML so I fear using it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1288317795</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-10-29 02:03:12</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>75</wp:comment_id>
    <wp:comment_author><![CDATA[Generating Word Documents Part 3 &#8211; Mail Merge without Word &laquo; Cultivating code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://cultivatingcode.com/2010/11/05/generating-word-documents-part-3-mail-merge/</wp:comment_author_url>
    <wp:comment_author_IP>69.170.134.47</wp:comment_author_IP>
    <wp:comment_date>2010-11-05 18:59:39</wp:comment_date>
    <wp:comment_date_gmt>2010-11-05 09:29:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] by Jim Burger    In previous installments I covered the use of XML databinding. This time around I thought I&#8217;d concentrate purely on [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1288949380</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-11-05 09:29:39</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>76</wp:comment_id>
    <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
    <wp:comment_author_email>jason@plutext.org</wp:comment_author_email>
    <wp:comment_author_url>http://dev.plutext.org</wp:comment_author_url>
    <wp:comment_author_IP>203.206.209.27</wp:comment_author_IP>
    <wp:comment_date>2010-11-20 08:40:26</wp:comment_date>
    <wp:comment_date_gmt>2010-11-19 23:10:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["custom xml" actually has two meanings, only one of which is impugned by the silly i4i patent.

Data binding a content control to a custom xml *part* is perfectly fine.

What you can't do anymore with new copies of Word 2007, owing to i4i, is markup the Word document with your own XML tags ("custom xml *markup*").  See http://blogs.technet.com/b/gray_knowlton/archive/2009/12/23/what-is-custom-xml-and-the-impact-of-the-i4i-judgment-on-word.aspx]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>71</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1290377557</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-11-19 23:10:26</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>77</wp:comment_id>
    <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
    <wp:comment_author_email>jason@plutext.org</wp:comment_author_email>
    <wp:comment_author_url>http://dev.plutext.org</wp:comment_author_url>
    <wp:comment_author_IP>203.206.209.27</wp:comment_author_IP>
    <wp:comment_date>2010-11-20 08:42:12</wp:comment_date>
    <wp:comment_date_gmt>2010-11-19 23:12:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice post :-)

When you get to posting about repeating sections, you might care to consider the approach I advocate at dev.plutext.org/svn/docx4j/trunk/docx4j/sample-docs/databinding/conventions.html]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-11-19 23:12:12</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1290377618</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>78</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>202.6.153.92</wp:comment_author_IP>
    <wp:comment_date>2010-11-22 07:43:20</wp:comment_date>
    <wp:comment_date_gmt>2010-11-21 22:13:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks Jason for the clarification, that is good news indeed!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>76</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1290377600</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-11-21 22:13:20</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>79</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>202.6.153.92</wp:comment_author_IP>
    <wp:comment_date>2010-11-22 07:44:38</wp:comment_date>
    <wp:comment_date_gmt>2010-11-21 22:14:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Cheers :)

Thanks for the link, I'll be sure to do that shortly.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>77</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-11-21 22:14:38</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1290377682</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Generating Documents with the Open XML SDK - Part 1</title>
  <link>https://maintenancecoder.wordpress.com/2010/07/08/generating-docs-with-open-xml/</link>
  <pubDate>Wed, 07 Jul 2010 22:41:37 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827153</guid>
  <description/>
  <content:encoded><![CDATA[Recently I was asked to create a document generation engine for a loan application and quote system at work. Our customers needed to enter some basic information about a loan applicant, and at a later time receive a URL to the bundle of PDF's which represented the data rich documents they needed to send to their client.
<h3>The problem outlined:</h3>
Generally speaking, the templates were already in .rtf, .doc or .docx form. Many included old mail merge and form fields, as well as embedded formulas and the like. Additionally, the following cases  needed to be catered for:
<ul>
	<li>Repeating sections</li>
	<li>Data-bound tables</li>
	<li>Template composition</li>
	<li>Turning sections on and off based on data</li>
	<li>Image injection</li>
	<li>Data-bound fields</li>
</ul>
Several documents need to be created at once, then zipped up to form a downloadable bundle for the end user to consume. The killer was that the end users wanted to make templates using familiar tools.

With a variety of options at our disposal; <a href="http://en.wikipedia.org/wiki/XSL_Formatting_Objects">XSL:FO</a> , HTML via a view engine like <a href="http://sparkviewengine.com/">Spark</a>, <a href="http://office.microsoft.com/en-au/infopath/">InfoPath</a>, or even <a href="http://www.adobe.com/products/livecycle/forms/">Adobe Forms</a> the determining factor for us was that when end users want to design documents, 90% of the time, they want to do it in MS Word. Generally speaking, our users were familiar with defining 'what they want' in Word. As a design tool, Word's typographic capabilities lie somewhere between XSL:FO and <a href="http://www.adobe.com/products/indesign/">Adobe InDesign</a> or <a href="http://www.quark.com/index2.html">QuarkXPress</a>.

Unfortunately, using Word has its drawbacks. Given source documents that contain various conflicting methods of data binding, domain logic on the form of formulas and form fields, as well as having file creation dates in the early 90's; the potential for <a href="http://en.wikipedia.org/wiki/Unusual_software_bug">mandelbugs</a> is extremely high.

In the past, automating word server-side with .NET meant hacking about with <a href="http://www.developerdotstar.com/community/automate_excel_dotnet">COM Interop</a> or VBA or both. While it was a practical approach, it often meant a number of things:
<ul>
	<li>Server side installation and licensing of Office products</li>
	<li>Difficulties in managing instances of winword.exe, excel.exe etc.</li>
	<li>COM Interop libraries were designed with Visual Basic making development in C# difficult.</li>
	<li>Generally high levels of excruciating, eye-popping, pain.</li>
</ul>
<h2>A new solution</h2>
The Open XML SDK, now in its second version, is a suite of tools including a flexible API to generate documents, and a reflectoresque tool that shows how an office document is constructed. This suite is designed to cater for document creation; it will not automate user interactions to Powerpoint, but it will make awesome documents from scratch, and it will do it faster than you can say "No more PIA's!".

This <a href="http://msdn.microsoft.com/en-us/library/dd608815(office.14).aspx">comprehensive</a> API gives you the flexibility to inject content as XML directly, or to create content using typed classes. Finally, <a href="http://msdn.microsoft.com/en-us/library/bb387098.aspx">LINQ to XML</a> works brilliantly, and VB developers could even take full advantage of <a href="http://geekswithblogs.net/Silverlight2/archive/2008/03/30/xml-literals-and-embedded-expressions.aspx">XML literals</a>, and <a href="http://msdn.microsoft.com/en-us/library/bb531325.aspx">intellisense for XML Schemas</a> if desired.
<h3>Developer prerequisites:</h3>
<ul>
	<li><a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=C6E744E5-36E9-45F5-8D8C-331DF206E0D0&amp;displaylang=en">Open XML SDK v2.0</a> ( get the productivity tool here too)</li>
	<li><a href="http://dbe.codeplex.com/">Content Control Toolkit</a></li>
	<li><a href="http://www.microsoft.com/express/">Visual Studio</a> 2008 or above</li>
</ul>
<h3>Benefits</h3>
<ul>
	<li>No need to have licenced products installed on servers to generate templates.</li>
	<li>Templating in a familiar editor</li>
	<li>Can convert various formats of documents into templates</li>
	<li><em>Super awesome fast</em></li>
	<li>Verifiable output - output can be schema verified</li>
	<li>Extensible</li>
	<li>Testable, maintainable code</li>
</ul>
<h3>Drawbacks</h3>
<ul>
	<li>No ability to automate Word itself, or inspecting paginated output.</li>
	<li>Requires a basic understanding of XML &amp; XPath queries</li>
	<li>Code required.</li>
</ul>
<h2>A design emerges</h2>
<h3>User interaction</h3>
The process begins when a customer interacts with the user interface to enter relevant information about the documents to be created. Additional information about the request is sourced from any existing data available. The interface stores these requests for documents as jobs in a queue.

&nbsp;

[caption id="attachment_827161" align="alignnone" width="500" caption="Our customers interact with our software to request a bundle of generated, data-rich documents. These are stored as jobs in a queue."]<a href="http://cultivatingcode.files.wordpress.com/2010/07/qatsdocsjobprocessing1.png"><img class="size-full wp-image-827161" title="User interface driven document generation jobs" src="http://cultivatingcode.files.wordpress.com/2010/07/qatsdocsjobprocessing1.png" alt="" width="500" height="154" /></a>[/caption]

&nbsp;
<h3>Job processing</h3>
A separate job service polls this collection of jobs for new work to perform, fetches any required data, flattens the data into presentation models, and delegates to relevant 'DocumentBuilders' to create the documents themselves.

The last stage involves converting the documents to PDF, moving the resultant documents into a folder structure which is then zipped, moved and linked to.

&nbsp;

[caption id="attachment_827163" align="alignnone" width="500" caption="The job processor polls the job queue for docgen jobs, and chooses the required document builder(s) to execute the job."]<a href="http://cultivatingcode.files.wordpress.com/2010/07/qatsjobprocessor.png"><img class="size-full wp-image-827163" title="Job Procesing" src="http://cultivatingcode.files.wordpress.com/2010/07/qatsjobprocessor.png" alt="" width="500" height="498" /></a>[/caption]

&nbsp;
<h3>Document Building</h3>
The document builders create a word document based on a template document and an XML representation of the data to be injected. They do this following an <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC pattern of sorts</a>; the template is just a view, it has knowledge of data-bindings and that's about it. The document builder is the controller, it initializes the process and passes data to the template, as well as orchestrating post-data-binding manipulations of the template. The model, comes in the form of a <a href="http://en.wikipedia.org/wiki/Plain_Old_CLR_Object">POCO</a> which is ultimately serialized to XML and injected into the view by the controller.

To clarify, each document builder is responsible for generating one type of document. They may have intimate knowledge of the view and the model; they are by no means generic. However, there are generic patterns we can apply to common design issues and I will get to those in a later post.
<h3>Content Controls and CustomXmlParts</h3>
At the heart of the design is the concept of <a href="http://blogs.msdn.com/b/mikeormond/archive/2006/08/10/694173.aspx">content controls</a>: these are a feature of MS Word that allow us to use place holders in a document and bind data to them. I also use them to allow manipulations to the document beyond simple data-binding.

<a href="http://msdn.microsoft.com/en-us/library/bb608618.aspx">CustomXmlParts</a> are equally integral; these are the buckets in which we pour our view models into. Once hydrated, the content controls in a word document can data bind to nodes in the CustomXmlPart via XPath queries.
<h2>Where to go from here</h2>
In my next few posts, I'll dive deeper into the preparation of templates, data binding them to XML, various tools I use, and the Document Builders themselves. Along the way I'll be solving some common issues like tables and composing templates. Finally, I'll broach the topic of automated testing and potential for a TDD like approach.

UPDATE: <a href="http://cultivatingcode.com/2010/10/13/generating-word-documents-p2/">Part two - Databinding with ContentControls</a> is now published.

In the meantime, I'd like to direct you to the sources of information I used to become familiar with Open XML:
<ul>
	<li><a href="http://msdn.microsoft.com/en-us/office/bb265236.aspx">Open XML Developer Centre</a></li>
	<li><a href="http://blogs.msdn.com/b/brian_jones/archive/tags/open+xml+sdk/">Brian Jones on Open XML</a></li>
	<li><a href="http://blogs.msdn.com/b/ericwhite/archive/tags/openxmlsdk/">Eric White on Open XML</a></li>
</ul>
While I'm here, I'll just make a quick shout out to my new colleagues on this project George and Paul, whose hard work underpins a lot of the ideas you see here. A special thanks to <a href="http://2010wave.blogspot.com/">Darren</a> for encouraging me to get this stuff out in the form of a blog, and challenging my thinking every step of the way. Thanks guys, this is a direct result of your hard work and advice.
<a href="http://www.dotnetkicks.com/kick/?url=http://cultivatingcode.com/2010/07/08/generating-docs-with-open-xml/"><img src="http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http://cultivatingcode.com/2010/07/08/generating-docs-with-open-xml/" border="0" alt="kick it on DotNetKicks.com" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827229</wp:post_id>
  <wp:post_date>2010-07-08 08:11:37</wp:post_date>
  <wp:post_date_gmt>2010-07-07 22:41:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>generating-docs-with-open-xml</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="coding"><![CDATA[Coding]]></category>
  <category domain="post_tag" nicename="documentgeneration"><![CDATA[DocumentGeneration]]></category>
  <category domain="post_tag" nicename="openxmlsdk"><![CDATA[OpenXMLSdk]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="word"><![CDATA[Word]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827153]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827153]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>81</wp:comment_id>
    <wp:comment_author><![CDATA[Phil M]]></wp:comment_author>
    <wp:comment_author_email>philm@cottagecomputing.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>74.210.120.213</wp:comment_author_IP>
    <wp:comment_date>2010-08-07 01:16:46</wp:comment_date>
    <wp:comment_date_gmt>2010-08-06 15:46:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good start. Did you ever get back to building the Document Builder.
Where's part 2, 3 etc????
I want to do server-side mail-merge from a Word template using the OpenXML SDK, replacing content controls with data from a SQL Server query and producing repeated pages as many as the query needs.
This allows the user to create word templates with embedded content controls, and thus manage the design.
There is much about this on the net. But nothing showing how to actually write a class that allows one to find a content control and replace it with data, and do it page after page.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281136522</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-08-06 15:46:46</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>82</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>219.90.171.117</wp:comment_author_IP>
    <wp:comment_date>2010-08-07 08:56:52</wp:comment_date>
    <wp:comment_date_gmt>2010-08-06 23:26:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks Phil, 
Part 2 &amp; 3 aren't far off - Im hoping to polish 2 off very soon. Stay tuned!
Rest assured you can achieve server side document building and I'll show you how it can be done.

Cheers,
JB]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>81</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1281137212</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-08-06 23:26:52</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>83</wp:comment_id>
    <wp:comment_author><![CDATA[Adam]]></wp:comment_author>
    <wp:comment_author_email>amorris@tycothermal.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>212.189.6.203</wp:comment_author_IP>
    <wp:comment_date>2010-08-20 00:14:12</wp:comment_date>
    <wp:comment_date_gmt>2010-08-19 14:44:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yes, interesting - Looking forward to reading part 2 &amp; 3 also. 

My company is working on an in house MS Access application (client front and server backend) that is currently using bookmarks to export data to a variety of word 2k7 templates depending on the user requirement. And now also looks like additional documents will also be required to create a final document package.

We also have users complain that they cannot adjust the templates without causing issues. I think somewhere in what you describe there is something allowing us to be much more flexible.

I'm not an expert or developer but I am awaiting the next steps to see if this is something we can use. if so I will be forwarding this info to my colleagues for review.

Thanks for the info so far, keep up the good work.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1282777741</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-08-19 14:44:12</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>84</wp:comment_id>
    <wp:comment_author><![CDATA[Tim H]]></wp:comment_author>
    <wp:comment_author_email>tim.hurring@finzsoft.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>122.56.121.170</wp:comment_author_IP>
    <wp:comment_date>2010-08-26 06:13:06</wp:comment_date>
    <wp:comment_date_gmt>2010-08-25 20:43:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Excellent article Jim. We're attempting to do something very similar but from a Java angle. We're having good early results using the DocX4J toolkit instead of the Open XML SDK. The problem area seems to be achieving an accurate conversion of the Docx file to Pdf.

Have you reached the 'convert to pdf' stage of your project yet? What conversion solution are you planning to use? I really hope that SharePoint 2010 Word Automation Services is not the only practical solution here - having to licence expensive SharePoint servers just to do a Pdf conversion seem ridiculous.

Thanks,
Tim H]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-08-25 20:43:06</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1282777725</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>85</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>202.6.153.92</wp:comment_author_IP>
    <wp:comment_date>2010-08-26 08:47:10</wp:comment_date>
    <wp:comment_date_gmt>2010-08-25 23:17:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks Tim!

We are getting some great results using a 3rd party server utility called Ecrion XF Rendering Server. Two main benefits: it was fastest in our internal trials against a few other major competitors, and it doesn't rely on an instance of Word being installed on the server. I believe it uses XSL:FO under the covers. Additionally, we have encountered a few issues with the use of afChunks, font rendering issues and the like and their support has been fantastic. It is one of the more expensive players in the market (AUD$1500), however it fares favourably when put up against a sharepoint 2010 instance.

Hope that helps, and good luck :)
JB]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>84</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1282778232</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-08-25 23:17:10</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>86</wp:comment_id>
    <wp:comment_author><![CDATA[Tim H]]></wp:comment_author>
    <wp:comment_author_email>tim.hurring@finzsoft.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>122.56.121.170</wp:comment_author_IP>
    <wp:comment_date>2010-08-26 10:08:04</wp:comment_date>
    <wp:comment_date_gmt>2010-08-26 00:38:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Jim,

Thanks for your prompt reply. I'll have a closer look at the Ecrion solution. Interesting that you quoted licence costs in Australian dollars!

Regards,
Grateful Kiwi.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1282783087</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-08-26 00:38:04</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>87</wp:comment_id>
    <wp:comment_author><![CDATA[Generating Word Documents &#8211; Part 2: Simple Databinding &laquo; Cultivating code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://cultivatingcode.com/2010/10/13/generating-word-documents-p2/</wp:comment_author_url>
    <wp:comment_author_IP>74.200.245.252</wp:comment_author_IP>
    <wp:comment_date>2010-10-13 16:49:29</wp:comment_date>
    <wp:comment_date_gmt>2010-10-13 07:19:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] by Jim Burger    In Part 1 we covered the problem of generating word documents from a high level perspective. In [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1286954372</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-10-13 07:19:29</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>88</wp:comment_id>
    <wp:comment_author><![CDATA[Generating Word Documents Part 3 &#8211; Mail Merge without Word &laquo; Cultivating code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://cultivatingcode.com/2010/11/05/generating-word-documents-part-3-mail-merge/</wp:comment_author_url>
    <wp:comment_author_IP>69.170.134.47</wp:comment_author_IP>
    <wp:comment_date>2010-11-05 18:59:32</wp:comment_date>
    <wp:comment_date_gmt>2010-11-05 09:29:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] by Jim Burger    In previous installments I covered the use of XML databinding. This time around I thought I&#8217;d concentrate [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1288949375</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-11-05 09:29:32</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>89</wp:comment_id>
    <wp:comment_author><![CDATA[2010 in review &laquo; Cultivating code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://cultivatingcode.com/2011/01/06/2010-in-review/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.96.145</wp:comment_author_IP>
    <wp:comment_date>2011-01-06 08:35:35</wp:comment_date>
    <wp:comment_date_gmt>2011-01-05 23:05:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Generating Documents with the Open XML SDK &#8211; Part 1 July 2010 8 comments 4 [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1294268735.3817";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1304644524</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1304644524.7642";s:7:"message";s:48:"Jim Burger changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"Jim Burger";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-01-05 23:05:35</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Removing the Ceremony from C#</title>
  <link>https://maintenancecoder.wordpress.com/2010/07/09/removing-csharp-ceremony/</link>
  <pubDate>Thu, 08 Jul 2010 15:11:10 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827166</guid>
  <description/>
  <content:encoded><![CDATA[Ceremony. <a href="http://www.google.com.au/search?q=+c%23+ceremony">More and more </a>I see comments about there being too much ceremony in C#. That is, it isn't terse enough and that we should be spending less time worrying about typing brackets and parenthesis and more time worrying about the customer's problem. Yanno, like them dynamic, skivvy wearin, <a href="http://blog.wekeroad.com/2010/06/28/ruby-and-csharp-walk-into-a-bar">popular-with-the-girls</a> Ruby folk are doing, with <a href="http://www.engineyard.com/blog/2010/rails-and-merb-merge-rack-part-6-of-6/">Merb on Rack</a> or whatever its called now.

I'm inclined to agree; it's why code templating <a href="http://www.jetbrains.com/resharper/">plugins</a> exist for C#, yet there is not really a Ruby equivalent (though TextMate comes close). <a href="http://www.kodefuguru.com/post/2010/01/07/Null-Coalescing-Assignment-Operator-for-CSharp-5.aspx">Some people</a> are asking what can we add to the language, <a href="http://davesbox.com/archive/2009/02/22/do-we-need-both-visual-basic-and-c.aspx">some wonder if we need it</a>, and some are asking 'maybe we should take stuff out'?

Allow me to join in, get all misty and say...
<div><span style="font-size:medium;"><strong><span style="font-size:small;"><span style="font-weight:normal;"><a href="http://www.flickr.com/photos/libraryman/3708545743/"><img class="alignnone" title="What if?" src="http://farm3.static.flickr.com/2615/3708545743_028b315f3e.jpg" alt="What if?" width="500" height="356" /></a></span></span></strong></span></div>
So at the moment we can easily write in a functional style like this:
<div id="_mcePaste">[sourcecode language="csharp"]
var foo = SomeList.Select(c =&gt; c.ToString());
[/sourcecode]

</div>
In this case, foo is inferred as being an IEnumerable. I was thrilled when var became available, it was a massive code cleanup.

Well, what if the inferencing engine could <em>go deeper</em>? You might write code like this:
<div>[sourcecode language="csharp"]
var result =
    if (someBoolean)
      return &quot;Jim&quot;;
    else
      return &quot;Jam&quot;;
[/sourcecode]

</div>
Assuming we could put an if statement on the RHS like this, the typed variable result can be inferred as returning string, since both outcomes return this type.

So what if we might want to return different types? Perhaps we could return a common base class instead...
<div id="_mcePaste">[sourcecode language="csharp"]
var conn =
  if (isFooDb)
    return new FooDbConnection();
  else
    return new SqlDbConnection();
[/sourcecode]

</div>
Our var conn is typed as IDbConnection, a common base type between the two potential return types. But why stop there? We could have our functions infer their return types and parameter types as well:
<div id="_mcePaste">[sourcecode language="csharp"]
public SomeFunction(someInt)
{
    return &quot;Hello world&quot;.ElementAt(someInt);
}
[/sourcecode]

</div>
Here, someInt is inferred as Int32, since that is what the extension method ElementAt takes as a parameter. Since ElementAt returns char in this case, that would be the return type of the function.
<div id="_mcePaste">This all leads up to a concept known as automatic generalization:</div>
<div id="_mcePaste">[sourcecode language="csharp"]
public IsGreater(first, second)
{
    return first &gt; second;
}
[/sourcecode]

</div>
The parameters first and second become inferred as being generic types, that have the generic constraint of implementing IComparable etc. Obviously, the return type is boolean.

Of course, this is all <strong>pie in the sky</strong> for C# right now, and I would be astounded if it made the <a href="http://www.infoq.com/news/2009/03/CSharp-4-5">next version</a>. To be honest, I think we would need to give up certain other freedoms in order for this to be a reality. However, if you can't wait for C# X and want to use this kind of type inference now, with full IDE, compiler, debugger and intellisense support, <a href="http://msdn.microsoft.com/en-us/fsharp/default.aspx">start coding in F# today!</a>

PS. Kind of looks JavaScripty in retrospect.]]></content:encoded>
  <excerpt:encoded><![CDATA[While some people are asking what can we add to C#, some are asking 'maybe we should take stuff out'? Well, perhaps we could do both...]]></excerpt:encoded>
  <wp:post_id>827230</wp:post_id>
  <wp:post_date>2010-07-09 00:41:10</wp:post_date>
  <wp:post_date_gmt>2010-07-08 15:11:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>removing-csharp-ceremony</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="coding"><![CDATA[Coding]]></category>
  <category domain="post_tag" nicename="csharp"><![CDATA[CSharp]]></category>
  <category domain="post_tag" nicename="fsharp"><![CDATA[FSharp]]></category>
  <category domain="post_tag" nicename="functional-programming"><![CDATA[functional programming]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827166]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827166]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>90</wp:comment_id>
    <wp:comment_author><![CDATA[Steve Gilham]]></wp:comment_author>
    <wp:comment_author_email>blog@stevegilham.com</wp:comment_author_email>
    <wp:comment_author_url>http://stevegilham.blogspot.com</wp:comment_author_url>
    <wp:comment_author_IP>62.200.22.2</wp:comment_author_IP>
    <wp:comment_date>2010-07-09 02:20:56</wp:comment_date>
    <wp:comment_date_gmt>2010-07-08 16:50:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It does feel that C# is trying to creep up on JavaScript in a sideways sort of fashion, and it would be more likely for it to end up there -- with a greater degree of dynamic typing rather than type inference -- if source forward compatibility is to be maintained.

The reason that languages like F# and Scala put the usually inferred but occasionally necessary type declarations with punctuation after the identifier, rather than before (e.g. thing : Int) is to make the parser's job more tractable.  

The bit of ceremony that I find most in the way these days  in languages like C# or Python is the need to explicitly put a return statement rather than just inferring the value from the last expression evaluated.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1278621080</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-07-08 16:50:56</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>91</wp:comment_id>
    <wp:comment_author><![CDATA[Brian]]></wp:comment_author>
    <wp:comment_author_email>foo@bar.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>131.107.0.105</wp:comment_author_IP>
    <wp:comment_date>2010-07-09 04:44:12</wp:comment_date>
    <wp:comment_date_gmt>2010-07-08 19:14:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I love F#, but F# inference can only do 2.5 of your 4 examples.  I don't think your second example can be inferred in the general case in any reasonable nominal type system with multiple inheritance of interfaces.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1278620929</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-07-08 19:14:12</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>92</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>219.90.218.163</wp:comment_author_IP>
    <wp:comment_date>2010-07-09 06:06:04</wp:comment_date>
    <wp:comment_date_gmt>2010-07-08 20:36:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Totally correct Brian, I'm just 'what if'ing' in all directions, while trying to nudge the C# only guys to think about the possibilities, certainly intended to be a cheeky suggestion. Nice to see people are awake ;)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>91</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1278621364</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-07-08 20:36:04</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>93</wp:comment_id>
    <wp:comment_author><![CDATA[catbert]]></wp:comment_author>
    <wp:comment_author_email>catbertsis@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.nemerle.org</wp:comment_author_url>
    <wp:comment_author_IP>81.95.178.159</wp:comment_author_IP>
    <wp:comment_date>2010-07-09 06:24:31</wp:comment_date>
    <wp:comment_date_gmt>2010-07-08 20:54:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Just try Nemerle (www.nemerle.org), that has powerful type inference algorithms, more functional programming features, and metaprogramming - which allows to integrate most design patterns in language, which leads to even less "ceremony".

To illustrate type inference, I'll show this code:

def x = Dictionary(); // C#: var x = new Dictionary();
unless (x.Contains("a")) // first type parameter inferred
{
   x["a"] = 3; // now we know that x is Dictionary
}

This all works and is statically typed altogether. It is even more powerful than F#'s inference, and the syntax is much closer to C#.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1278622949</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-07-08 20:54:31</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>94</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>219.90.218.163</wp:comment_author_IP>
    <wp:comment_date>2010-07-09 06:30:49</wp:comment_date>
    <wp:comment_date_gmt>2010-07-08 21:00:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I agree thats a more likely outcome, opt in dynamism and the DLR are pretty big hints to the directions of C# in the future. Compatibility (and serious technical) issues aside, I would still prefer type inferencing over better dynamism, its useful to force typing when you need it.

I really like the idea of turfing return -- would make for a whole lot less cruft.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>90</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1278622849</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-07-08 21:00:49</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>95</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>219.90.218.163</wp:comment_author_IP>
    <wp:comment_date>2010-07-09 06:33:22</wp:comment_date>
    <wp:comment_date_gmt>2010-07-08 21:03:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks, I will be having a close look, cheers!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>93</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1278623003</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-07-08 21:03:22</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>96</wp:comment_id>
    <wp:comment_author><![CDATA[Dew Drop &ndash; July 9, 2010 | Alvin Ashcraft&#039;s Morning Dew]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.alvinashcraft.com/2010/07/09/dew-drop-july-9-2010/</wp:comment_author_url>
    <wp:comment_author_IP>72.47.228.26</wp:comment_author_IP>
    <wp:comment_date>2010-07-09 22:47:23</wp:comment_date>
    <wp:comment_date_gmt>2010-07-09 13:17:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Removing the Ceremony from C# (Jim Burger) [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1278765028</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-07-09 13:17:23</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>97</wp:comment_id>
    <wp:comment_author><![CDATA[wezeku]]></wp:comment_author>
    <wp:comment_author_email>john.rnolds@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://wezeku.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>85.224.199.136</wp:comment_author_IP>
    <wp:comment_date>2010-07-12 00:36:39</wp:comment_date>
    <wp:comment_date_gmt>2010-07-11 15:06:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Couldn't wou write the first example as 
var result = someBoolean ? "Jim" : "Jam";

I rarely used '? :' in C++ before I learned Haskell, but used it a lot afterwards. 

BTW, I totally agree with your conclusion; dive head first into F# this very day!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1278886535</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-07-11 15:06:39</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>98</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>202.6.153.92</wp:comment_author_IP>
    <wp:comment_date>2010-07-12 07:50:54</wp:comment_date>
    <wp:comment_date_gmt>2010-07-11 22:20:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Actually, yes you can use the conditional operator. I missed that one, thanks for pointing it out!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>97</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1278886855</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-07-11 22:20:54</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>99</wp:comment_id>
    <wp:comment_author><![CDATA[2010 in review &laquo; Cultivating code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://cultivatingcode.com/2011/01/06/2010-in-review/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.96.145</wp:comment_author_IP>
    <wp:comment_date>2011-01-06 08:35:32</wp:comment_date>
    <wp:comment_date_gmt>2011-01-05 23:05:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Removing the Ceremony from C# July 2010 9 comments 3 [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1304644526</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1304644526.5698";s:7:"message";s:48:"Jim Burger changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"Jim Burger";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1294268732.5023";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-01-05 23:05:32</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Removing un-versioned files with SVN and powershell</title>
  <link>https://maintenancecoder.wordpress.com/2010/07/20/svn-tree-clean-posh/</link>
  <pubDate>Tue, 20 Jul 2010 02:41:29 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827206</guid>
  <description/>
  <content:encoded><![CDATA[Today I wanted to do a 'treeclean', i.e. remove all un-versioned files from my working copy of a source controlled project. I've been using<a href="http://www.sliksvn.com/"> SlikSVN</a>'s <a href="http://www.sliksvn.com/en/download">command line tools</a> for managing SVN stuff. However, there are some things a GUI client will do for you OOTB, and a treeclean is generally one of them.

Rather than installing a GUI tool just for this 'once in a blue moon' functionality -- I ran with what I had; powershell, slik &amp; regex:

[sourcecode language="powershell"]
#shorthand
(svn st &quot;--no-ignore&quot;) -match '^[I?]' -replace '^.s+','' | rm -fo]
#longhand
(svn status &quot;--no-ignore&quot;) -match '^[I?]' -replace '^.s+','' | Remove-Item -Force
[/sourcecode]

Optionally, you could set the recurse option to rm if you were confident to do so.]]></content:encoded>
  <excerpt:encoded><![CDATA[I've been using SlikSVN's command line tools for managing SVN stuff. However, there are some things a GUI client will do for you OOTB, and a treeclean is generally one of them.]]></excerpt:encoded>
  <wp:post_id>827231</wp:post_id>
  <wp:post_date>2010-07-20 12:11:29</wp:post_date>
  <wp:post_date_gmt>2010-07-20 02:41:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>svn-tree-clean-posh</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="coding"><![CDATA[Coding]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[Powershell]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="source-control"><![CDATA[Source control]]></category>
  <category domain="post_tag" nicename="svn"><![CDATA[SVN]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827206]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827206]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>100</wp:comment_id>
    <wp:comment_author><![CDATA[Yesterday's news | SVN Switch and working copy cleanup]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://zvolkov.com/blog/post/2010/11/12/SVN-Switch-and-working-copy-cleanup.aspx</wp:comment_author_url>
    <wp:comment_author_IP>97.74.215.89</wp:comment_author_IP>
    <wp:comment_date>2010-11-13 03:42:22</wp:comment_date>
    <wp:comment_date_gmt>2010-11-12 18:12:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Here&#039;s the equivalent for Powershell-minded folks (from cultivating code&nbsp;blog): [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1289632370</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-11-12 18:12:22</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>The Coin Change Kata - In F#</title>
  <link>https://maintenancecoder.wordpress.com/2010/10/22/the-coin-change-kata-in-f/</link>
  <pubDate>Fri, 22 Oct 2010 03:51:55 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827251</guid>
  <description/>
  <content:encoded><![CDATA[After having read and done <a href="http://matthamilton.net/">Matt Hamilton</a>'s <a href="http://matthamilton.net/coin-change-code-kata">Coin Change Kata</a>, I thought I would share one of my solutions to the kata and also some refinements to the kata itself.

I split the kata over two scenarios, the intention being that I start with the first scenario for a given language / approach and then move on to including the second scenario as I feel comfortable.

As a bit of fun I thought I'd share how I use <a href="http://code.google.com/p/fspec/">fspec</a> to drive out the algorithm. Fspec is a small experiment I started for writing specifications. Its very much a WIP, but I'm keen to get some feedback on its use[less|ful]ness, especially from fellow F# developers.

<span style="font-size:20px;font-weight:bold;">Goal</span>

As per Matt's original idea, the goal is to simply return a viable set of coins or notes for a given amount. You need to return the least amount of coins or notes possible to achieve that amount.

<span style="font-size:15px;font-weight:bold;">Scenario one - basic ATM</span>

1. Our basic ATM is only capable of dispensing $20 &amp; $50 notes.
2. It can only accept positive integer amounts, multiples of 10, no less than $40, no greater than $2000.

Your output should be a list of tuples (denomination x qty)

E.G. in F# - For an amount of $90

[sourcecode language="fsharp"]

let result = [
(20, 2);
(50, 1);
] // two twenties and a fifty

[/sourcecode]

HINT: Perhaps start by writing a specification that ensures that a zero dollar amount returns an empty list.
<h3>Scenario Two - coping with changing requirements:</h3>
1. ATM v2 has been released and is now capable of dispensing coin change. You need to adapt your program accordingly.
2. Denominations = 0.2, 0.5, 1, 2, 5, 10, 20, 50
3. Only accept positive numbers, multiples of 0.2, no less than 0.4, and no greater than $2000.00
<h3>How I approached the problem</h3>
Here are some  specifications in F# to satisfy the first scenario. Hopefully readable enough for anybody to grok...

[sourcecode language="fsharp"]
namespace ``Concerning an automatic teller machine``

open FSpec

module ``When providing change in notes`` =
    open TellerMachine.ChangeProvider

    let ``it return a non result when given a zero amount``() =
        getNotesFor 0 |&gt; should.equal []

    let ``it return the least amount of notes for a small amount``() =
        getNotesFor 40 |&gt; should.equal [ (20, 2); ]

    let ``it return the least amount of notes for a medium amount``() =
        getNotesFor 200 |&gt; should.equal [ (50, 4) ]

    let ``it return the least amount of notes for a large amount``() =
         getNotesFor 1890 |&gt; should.equal [
            (20, 2);
            (50, 37);
         ]

    let ``it fail if the input is lower than $40 or lower``() =
        should.failWith &quot;Please enter a multiple of $10 no less than $40.&quot; (fun() -&gt;
            getNotesFor 30
        )

    let ``it fail if the input is higher than $2000``() =
        should.failWith &quot;The maximum withdrawal is $2000.&quot; (fun() -&gt;
            getNotesFor 2010
        )

    let ``it fail if the input is not a multiple of 10``() =
        should.failWith &quot;Please enter a multiple of $10.&quot; (fun() -&gt;
           getNotesFor 19
        )
[/sourcecode]

I've also provided a possible implementation. I aimed to produce a solution that used recursion, without any mutable state...

[sourcecode language="fsharp"]
namespace TellerMachine

module ChangeProvider =
    let denominations = [ 20; 50; ]

    let rec calculateQuantities amount notes results =
        match notes with
        | [] -&gt; results
        | _ -&gt;
            let note = notes.Head
            let result = (note, amount / note)
            calculateQuantities
                (amount % note)
                (notes.Tail)
                (List.Cons(result, results))

    let getNotesFor (amount:int)  =
        match amount with
            | 0 -&gt; []
            | i when not(i % 10 = 0) -&gt;
                failwith(&quot;Please enter a multiple of $10.&quot;)
            | i when i &lt; 40 -&gt;
                failwith(&quot;Please enter a multiple of $10 no less than $40.&quot;)
            | i when i &gt; 2000 -&gt;
                failwith(&quot;The maximum withdrawal is $2000.&quot;)
            | _ -&gt;
                calculateQuantities amount (denominations |&gt; List.rev)[]
                |&gt; List.filter(fun (a, b) -&gt; b &gt; 0)
[/sourcecode]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827251</wp:post_id>
  <wp:post_date>2010-10-22 13:21:55</wp:post_date>
  <wp:post_date_gmt>2010-10-22 03:51:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-coin-change-kata-in-f</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="coding"><![CDATA[Coding]]></category>
  <category domain="post_tag" nicename="fsharp"><![CDATA[FSharp]]></category>
  <category domain="post_tag" nicename="kata"><![CDATA[kata]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827251]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827251]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Generating Word Documents Part 3 - Mail Merge without Word</title>
  <link>https://maintenancecoder.wordpress.com/2010/11/05/generating-word-documents-part-3-mail-merge/</link>
  <pubDate>Fri, 05 Nov 2010 09:29:14 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827297</guid>
  <description/>
  <content:encoded><![CDATA[In <a href="http://cultivatingcode.com/2010/07/08/generating-docs-with-open-xml/">previous</a> <a href="http://cultivatingcode.com/2010/10/13/generating-word-documents-p2/">installments</a> I covered the use of XML databinding. This time around I thought I'd concentrate purely on manipulating content controls. It should be noted that, technically, Custom XML parts days are<a href="http://www.zdnet.com/blog/microsoft/custom-xml-the-key-to-patent-suit-over-microsoft-word/3712"> numbered</a>, and I want to show how to side step this potential problem.

In this instalment, we'll begin to form an infrastructure around Content Controls that we can use for all kinds of handy tricks. It will include:
<ul>
	<li>A notion of a 'DocumentModel' - data to drive our document</li>
	<li>The DocumentBuilder class - this class is responsible for constructing the document at large</li>
	<li>Replacing Content Controls with Content without XML data binding</li>
	<li>Use of AltChunk tags to compose templates together</li>
</ul>
At the end of this post we will use these four concepts to build a simple mail merge engine that will take some data from and turn it into a print run of letters. It will not require Word installed to run, (only to read the output), nor will it use any Custom XML.
<h2><span style="font-weight:normal;font-size:13px;">If you want to skip the chat, and go straight to the code - here tis... <a href="http://code.google.com/p/word-merge/">http://code.google.com/p/word-merge/</a></span></h2>
So we've looked at the Content Control from a high level, but what is it exactly? Well, quite simply it is a cluster of XML inside a WordML document. Specifically, Content Controls are  tags. In turn they have a properties tag, and a content tag.

Unfortunately, there is no simple Content Control object provided for in the Open XML SDK. In order to make working with Content Controls easy - we need to roll our own.
<h2>Introducing the ContentControl Abstraction</h2>
We want to get at content controls quickly and easily, and to do that it would be nice to address them by their tag or title (I chose tag) as we set them in Word. It would also be nice to say "Hey word document, gimme all your content controls!". As it turns out, that requires a bit of code. Content controls are represented by many different types in the Open XML API depending on their placement in the DOM. Luckily, all of these types derive from a base called OpenXmlCompositeElement:

&nbsp;

[caption id="attachment_827302" align="aligncenter" width="273" caption="All Content Controls derive from OpenXmlCompositeElement"]<a href="http://cultivatingcode.files.wordpress.com/2010/11/object_browser.png"><img class="size-full wp-image-827302" title="object_browser" src="http://cultivatingcode.files.wordpress.com/2010/11/object_browser.png" alt="" width="273" height="161" /></a>[/caption]

&nbsp;

Of course, there are other composite elements used in a word document, the distinguishing feature of content controls is that their first element is a set of properties; Tag, Title, et al. We can leverage this fact to provide a useful abstraction.

﻿<a href="http://cultivatingcode.files.wordpress.com/2010/11/contentcontrolinfo.png"><img class="aligncenter size-full wp-image-827303" title="ContentControlInfo" src="http://cultivatingcode.files.wordpress.com/2010/11/contentcontrolinfo.png" alt="" width="449" height="284" /></a>
<h2>Building a document</h2>
Building a single data driven document is pretty easy, as long as we follow some conventions. I use what roughly equates to an MVC pattern to begin with. For each type of document I want to build, I have a triad of elements; a Word document forms the Template, a class that represents all the data that will go into the template (I call it a ViewModel so I can hang with the cool kids) and a class that takes the data and throws it at the template and saves the result.

Where the convention kicks in is that I make sure the names of the properties on ViewModel are the same as the tagnames in the template. Can you see where I'm going with this?

So lets have a look at our template,

&nbsp;

[caption id="attachment_827306" align="aligncenter" width="500" caption="A simple template"]<a href="http://cultivatingcode.files.wordpress.com/2010/11/mail_merge_template1.png"><img class="size-full wp-image-827306" title="mail_merge_template1" src="http://cultivatingcode.files.wordpress.com/2010/11/mail_merge_template1.png" alt="" width="500" height="501" /></a>[/caption]

&nbsp;

Here is the matching ViewModel...

<span style="font-family:Consolas, Monaco, 'Courier New', Courier, monospace;line-height:18px;font-size:12px;white-space:pre;"> </span>

[sourcecode language="csharp"]
public class ArrearsModel
{
    public string Address { get; set; }
    public string Salutation { get; set; }
    public string ArrearsAmount { get; set; }
}
[/sourcecode]

As you can imagine, the document builder can now use reflection to map from the properties on a view model to the content controls on the page. This is where our ContentControlInfo abstraction comes in handy - we can find content controls really easily now. Imagine something like this inside your builder class:

[sourcecode language="csharp"]

private void BindModel(ArrearsModel model)
{
    //more on this later ;)
    var allContent = Document.GetContentControls();

    var modelProperties = typeof (ArrearsModel).GetProperties();
    foreach (var modelProperty in modelProperties)
    {
        var value = modelProperty.GetValue(model, null);
        var name = modelProperty.Name;
        var matchingContentControls = allContent.Where(cc =&gt; cc.Tag == name);

        foreach (var contentControl in matchingContentControls)
            contentControl.OverwriteText((string) value); //see code for details
    }
}
[/sourcecode]

The hard part here is cracking open a document and looking at its content controls. For that I wrote this simple extension method on the WordprocessingDocument object, which represents the entry point into the ContentControlInfo abstraction:

[sourcecode language="csharp"]
public static IEnumerable GetContentControls(this WordprocessingDocument doc)
{
  var rootElement = doc.MainDocumentPart.Document;

  var contentControls =
    from sdt in rootElement.Descendants()
    let properties = sdt.GetFirstChild()
    let content = sdt.GetFirstChild&lt;SdtContentBlock&gt;()
    where properties != null
    select new ContentControlInfo(sdt);

  return contentControls;
}
[/sourcecode]

From this simple extension we can now leverage LINQ to give us a variety of ways of collecting Content Controls. For instance:

[sourcecode language="csharp"]
//get a single content control
Document.GetContentControls().Single(cc =&gt; cc.Tag == &quot;MyControl&quot;);
//get a bunch of like controls
Document.GetContentControls().Where(cc =&gt; cc.Tag.StartsWith == &quot;FooTable&quot;);

[/sourcecode]

<span style="font-size:20px;font-weight:bold;">Composing documents with altChunk</span>

Our next move is to insert one document into another. Once we have a built a document, complete with data, we can plonk it into another document using the <a href="http://msdn.microsoft.com/en-us/library/documentformat.openxml.wordprocessing.altchunk.aspx">altChunk</a> tag. In essence the altChunk tag acts as a placeholder, and you stream the actual data into another portion of the document package, the altChunk tag references this location and at runtime the rendering engine (usually Word) expands the altChunk tag with the datastream.

Since we can't use Word to insert altChunk tags I use a content control to mark where I want the altChunk tag to go. The following code replaces a placeholding Content control with an altChunk tag:

[sourcecode language="csharp"]
var doc = placeholder.Ancestors&lt;Document&gt;().Single();
var altChunk = GetAltChunk(doc, altChunkId, pathToContent);
placeholder.InsertAfterSelf(altChunk);
placeholder.Remove();

private static AltChunk GetAltChunk(Document doc, string altChunkId, string pathToContent)
{
  var mainPart = doc.MainDocumentPart;
  var chunk =
    mainPart.AddAlternativeFormatImportPart(
      AlternativeFormatImportPartType.WordprocessingML,
      altChunkId
    );
  using (var fs = File.OpenRead(pathToContent)) chunk.FeedData(fs);

  var altChunk = new AltChunk() { Id = altChunkId };
  altChunk
    .AppendChild(new AltChunkProperties())
    .AppendChild(new MatchSource() { Val = true });
  return altChunk;
}
[/sourcecode]
<h2>Bringing it all together</h2>
So the final step in the process is to create a container document for our merge, and get its builder to take care of iterating over a list of ViewModels to create each document in the mail merge. This will result in one great big word document with our merge results. Alternatively you could skip this step and just pump out individual documents.

The following is how I generally achieved this end for our arrears scenario:

[sourcecode language="csharp"]
var placeHolder = Document.GetContentControls().Single(cc =&gt; cc.Tag == &quot;Page&quot;);

for (int index = 0; index &lt; Model.Count; index++)
{
  var arrearsModel = Model[index];
  var tempfile = Path.GetRandomFileName();

  using (var builder = new ArrearsBuilder(arrearsModel))
    builder.Build(tempfile);
  placeHolder.Self.ReplaceContent(tempfile, &quot;arrears&quot; + index);
  File.Delete(tempfile);
}

placeHolder.Self.Remove();
[/sourcecode]

&nbsp;

[caption id="attachment_827326" align="aligncenter" width="500" caption="The final output"]<a href="http://cultivatingcode.files.wordpress.com/2010/11/mergeoutput.png"><img class="size-full wp-image-827326" title="MergeOutput" src="http://cultivatingcode.files.wordpress.com/2010/11/mergeoutput.png" alt="" width="500" height="290" /></a>[/caption]

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827297</wp:post_id>
  <wp:post_date>2010-11-05 18:59:14</wp:post_date>
  <wp:post_date_gmt>2010-11-05 09:29:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>generating-word-documents-part-3-mail-merge</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="csharp"><![CDATA[CSharp]]></category>
  <category domain="post_tag" nicename="openxml"><![CDATA[OpenXml]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="word"><![CDATA[Word]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_e53f598c392aa63c477f45d84a614d90</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827297]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>102</wp:comment_id>
    <wp:comment_author><![CDATA[Jason]]></wp:comment_author>
    <wp:comment_author_email>jason@plutext.org</wp:comment_author_email>
    <wp:comment_author_url>http://dev.plutext.org</wp:comment_author_url>
    <wp:comment_author_IP>203.206.209.27</wp:comment_author_IP>
    <wp:comment_date>2010-11-20 08:49:47</wp:comment_date>
    <wp:comment_date_gmt>2010-11-19 23:19:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[How exactly are you using the content control to mark where you want the altChunk tag to go?

Word 2007 limits the tag and title to 64 chars, which could well be too short.

And putting the path or url in the body of the content control means Word could break it up into separate w:t elements.

For these reasons, I suggest storing the path/url in a standalone custom xml part, which your content control tag refers to.

For further detail, see dev.plutext.org/svn/docx4j/trunk/docx4j/sample-docs/databinding/conventions.html

cheers .. Jason]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1290377718</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-11-19 23:19:47</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>103</wp:comment_id>
    <wp:comment_author><![CDATA[Tad]]></wp:comment_author>
    <wp:comment_author_email>tadesset@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.165.85.85</wp:comment_author_IP>
    <wp:comment_date>2010-12-14 01:42:52</wp:comment_date>
    <wp:comment_date_gmt>2010-12-13 16:12:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Jason,

Thanks for sharing this important info.  

I found it very interesting and want to try your code in my side; however, could not be able find it in http://code.google.com/p/word-merge/ as noted in your article: 
"If you want to skip the chat, and go straight to the code – here tis… http://code.google.com/p/word-merge/)".

Greatly appreciate if you could provide me with the complete code for the sample you presented.

Thanks!

Tad]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>102</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1292256772.9548";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1292381519</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1292381520.1974";s:7:"message";s:48:"Jim Burger changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"Jim Burger";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-12-13 16:12:52</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>104</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>202.6.153.92</wp:comment_author_IP>
    <wp:comment_date>2010-12-15 12:26:49</wp:comment_date>
    <wp:comment_date_gmt>2010-12-15 02:56:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[No prob Tad,

You can browse the source by going here: http://code.google.com/p/word-merge/source/browse/

You can also obtain a copy of the source by cloning it with mercurial. For this you will need mercurial installed: http://mercurial.selenic.com/downloads/

Once installed you should be able to issue the following command:

hg clone https://word-merge.googlecode.com/hg/ word-merge

And that will pull down the source for you.

Hope that helps,

Jim]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>103</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1292381810</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1292381811.1107";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"Jim Burger";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-12-15 02:56:49</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>105</wp:comment_id>
    <wp:comment_author><![CDATA[Marcin]]></wp:comment_author>
    <wp:comment_author_email>marcin@epgmbh.de</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.206.85.106</wp:comment_author_IP>
    <wp:comment_date>2011-01-18 19:04:21</wp:comment_date>
    <wp:comment_date_gmt>2011-01-18 09:34:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Jim,
great work, thanks!

I would like to implement parts of Your solution in our company, but... We have still MS Word 2003 in use for templates and merged letters. Is it worth trying?

Greetings from Germany,
Marcin]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1295358262</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1295358263.0566";s:7:"message";s:48:"Jim Burger changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"Jim Burger";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1295343261.7958";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-01-18 09:34:21</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>106</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>219.90.168.41</wp:comment_author_IP>
    <wp:comment_date>2011-01-18 23:28:27</wp:comment_date>
    <wp:comment_date_gmt>2011-01-18 13:58:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Marcin, thanks for reading,

The techniques you see here will not work with 2003, even with the patch to open 2007 files. That update converts 2007 documents back into word 2003 format, dropping the content control features (and databinding along with it).

For Office 2003 you have two options, design your templates to use VSTO 1.0 and VS 2005 (http://msdn.microsoft.com/en-us/library/wfk2wb04(v=VS.80).aspx), or you could try using XSLT transforms: (http://msdn.microsoft.com/en-us/library/aa223584(v=office.11).aspx)

Hope that helps!

Jim]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>105</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1295359107</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1295359107.3948";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"Jim Burger";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-01-18 13:58:27</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>107</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>219.90.168.41</wp:comment_author_IP>
    <wp:comment_date>2011-01-18 23:31:00</wp:comment_date>
    <wp:comment_date_gmt>2011-01-18 14:01:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[PS Watch out for those links - msdn links seem to fool wordpress pretty nicely: here are some shortened links:
VSTO 1.0 Data driven documents: http://bit.ly/hV8HSP
XSLT and WordML: http://bit.ly/hJZH0R]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>106</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1295359260</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:14:"1295359260.195";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"Jim Burger";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-01-18 14:01:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Tablet PC Review: HP EliteBook</title>
  <link>https://maintenancecoder.wordpress.com/2010/11/09/tablet-pc-review-hp-elitebook/</link>
  <pubDate>Tue, 09 Nov 2010 06:20:27 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827333</guid>
  <description/>
  <content:encoded><![CDATA[Today I thought I'd take some time out to put down some thoughts about a piece of hardware I've had the pleasure of road testing at work. As such, this blog post is brought to you today by the <a href="http://h10010.www1.hp.com/wwpc/au/en/sm/WF25a/321957-321957-64295-3955549-3955549-4145567.html">HP EliteBook 2740p</a> :)
<p style="text-align:center;"><img class="aligncenter" title="EliteBook" src="http://pixelcoblog.com/wp-content/uploads/2010/03/3-HP-EliteBook-2740p-tablet-hp-new.jpg" alt="HP ELiteBook 2470p" width="418" height="340" /></p>
So first things first, what is it packing?

In short its an i7 620M @ 2.66Ghz with 4GB of reasonably quick DDR3 RAM. While it is rated at 1333Mhz, the bus runs at 1033Mhz, but its no biggy. The processor is backed by a 160GB SSD and pixels are pumped out via a 12.1" LED Backlit WXGA display.

[caption id="attachment_827334" align="aligncenter" width="500" caption="Not jawdropping - but good for a workhorse."]<a href="http://cultivatingcode.files.wordpress.com/2010/11/wei.png"><img class="size-full wp-image-827334" title="WEI" src="http://cultivatingcode.files.wordpress.com/2010/11/wei.png" alt="The windows experience index" width="500" height="176" /></a>[/caption]

In terms of WEI it earns 7.7 for HDD perf and 6.5 for CPU. Memory and video perf is lower at 5.5 and 3.9 respectively, which is disappointing but with onboard Intel graphics, not surprising. That said, this is no gaming laptop, what sets this puppy apart from the litter is that it operates as a Laptop, a Tablet PC and a Slate.
<h2>First Impressions</h2>
Initially, I was a little disappointed I have to admit. I guess I expected a game changing device like the iPad to rock my world in such a fundemental way that I had to run out and own one. That wasn't the case at all.  The stylus doesn't seem to calibrate very nicely, yielding a weird parallax effect as you attempt to clumsily click things. The stylus itself is small and flimsy (I'm used to Wacom styli which have the weight and feel of a real pen) and the button to right click doesn't seem to be positioned very well for my hands at least.

On the other hand the touch experience is great while browsing websites or PDF's. Resizing using pinch gestures can be jerky at times though. It's got what we've come to expect connectivity-wise: Bluetooth, Wifi, 3G, USB, eSATA, LAN etc. The dock houses a DVD RW and provides even more connection points.

I think I was disappointed because my expectations where unrealistic; this is more of a baby step for Windows devices, since we dont yet have a desktop OS, or an ecosystem of matching applications that truly take advantage of multitouch. It is a natural evolution of the Tablet computer, rather than a Hybrid Slate. The addition of multitouch capabilities is welcome, but it isn't the focus.
<h2>It grows on you</h2>
<em>As a laptop</em>, I quickly became accustomed to the keyboard layout. The letter keys have been optimized to be full size, as are the shift keys. This displaces page up and down, insert and delete, home and end to the top of the key surface. Those familiar with Macbooks will feel at home with the Function key wedged in between the left CTRL &amp; ALT keys, but thankfully, you don't need to press this one unless you want the <em>alternative </em>functions (this infuriates me no end with macbooks).

The trackpad is tiny yet useable enough for those times in which you need it. Additionally a finger pointer is installed on the home row in case you prefer that mousing paradigm. After a while I found myself naturally manipulating the screen by touch regardless of whether it was in slate mode or not. Some things work great - scrolling web pages for instance. Another welcome bonus is the LED backlit screen that performs awesomely in direct sunlight. This became a huge bonus while coding on the bus to and from work.
<h2>Running Visual Studio</h2>
For me, the acid test of any device is how quickly I can get things done in Visual Studio. For this, I installed the <a href="http://www.microsoft.com/express/Phone/">Express Edition for Phone Applications</a> and reacquainted myself with Silverlight and XNA for a few hours. Performance-wise it is more than up to the task of running VS and Blend - its actually quicker than my current work PC. Real estate wise - it's OK for punching out a simple Phone App, but I think the 12.1" screen would take some getting used to for long coding hauls.

A multitouch capable PC should be on the shopping list of any would be phone / touch application developer. You can run your phone emulator and interact with it using multitouch just as if you had the phone there in front of you; it was a sublime development experience. Combine that need with being particularly mobile - and I'd say this is definitely your laptop.

Aside: I'd love to know if iPad developers can run XCode on their iPads.
<h2>Howmuchizzit?</h2>
Honestly, this is the biggest drawback. The price is just way too high. Australian consumers can expect to pay nearly $5000 for one at the moment, while the US price tag is around the $1500 mark. Although, in light of current events, this could change any day now. Here's hoping.
<h2>The verdict</h2>
I could really see myself hauling this thing around, the versatility is great, and since my bus ride is about an hour each way it would be a perfect way to maximize my productivity. I would also like to write more touch enabled applications and this device is an excellent workhorse on that front. I do wish the stylus was nicer, and that it was a little lighter, but these are minor gripes. When you really need it - you can draw, you can pinch and flick, you can type. The perf is excellent for work, though its not the sort of PC you would throw the latest video games at.

The price is just stupendous for me, and kills the joy somewhat. If I wanted to spend $5k on a PC (and I don't) it would probably have an 'off the charts' WEI and come with an array of 30" widescreen monitors hanging off of it. If HP can bring the price down to around $AUD 1500 then I think we could have a deal ;)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827333</wp:post_id>
  <wp:post_date>2010-11-09 15:50:27</wp:post_date>
  <wp:post_date_gmt>2010-11-09 06:20:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tablet-pc-review-hp-elitebook</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="laptop"><![CDATA[Laptop]]></category>
  <category domain="post_tag" nicename="review"><![CDATA[Review]]></category>
  <category domain="category" nicename="reviews"><![CDATA[Reviews]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827333]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827333]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>2010 in review</title>
  <link>https://maintenancecoder.wordpress.com/2011/01/06/2010-in-review/</link>
  <pubDate>Wed, 05 Jan 2011 23:05:21 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827348</guid>
  <description/>
  <content:encoded><![CDATA[Hey everyone, I recieved this in the mail the other night, so I thought I would share the data with those who made it all possible -- you! Thanks for a great 2010, and I hope to make more sense this year !

...

The stats helper monkeys at WordPress.com mulled over how this blog did in 2010, and here's a high level summary of its overall blog health:

<img style="border:1px solid #ddd;background:#f5f5f5;padding:20px;" src="http://s0.wp.com/i/annual-recap/meter-healthy5.gif" alt="Healthy blog!" width="250" height="183" />

The <em>Blog-Health-o-Meter™</em> reads Wow.
<h2>Crunchy numbers</h2>
<a href="http://cultivatingcode.files.wordpress.com/2010/02/uienhancements.png"><img style="max-height:230px;float:right;border:1px solid #ddd;background:#fff;margin:0 0 1em 1em;padding:6px;" src="http://cultivatingcode.files.wordpress.com/2010/02/uienhancements.png?w=288" alt="Featured image" /></a>

A Boeing 747-400 passenger jet can hold 416 passengers.  This blog was viewed about <strong>5,200</strong> times in 2010.  That's about 13 full 747s.

&nbsp;

In 2010, there were <strong>14</strong> new posts, growing the total archive of this blog to 23 posts. There were <strong>36</strong> pictures uploaded, taking up a total of 2mb. That's about 3 pictures per month.

The busiest day of the year was February 10th with <strong>298</strong> views. The most popular post that day was <a style="color:#08c;" href="http://cultivatingcode.com/2010/02/04/five-things-i-dont-like-about-f/">Five things I don't like about F#</a>.
<h2>Where did they come from?</h2>
The top referring sites in 2010 were <strong>msdn.microsoft.com</strong>, <strong>Google Reader</strong>, <strong>blog.cwa.me.uk</strong>, <strong>alvinashcraft.com</strong>, and <strong>dotnetkicks.com</strong>.

Some visitors came searching, mostly for <strong>vim diff powershell</strong>, <strong>f# file order</strong>, <strong>f# folders</strong>, <strong>svn remove unversioned files</strong>, and <strong>what if</strong>.
<h2>Attractions in 2010</h2>
These are the posts and pages that got the most views in 2010.
<div style="clear:left;float:left;font-size:24pt;line-height:1em;margin:-5px 10px 20px 0;">1</div>
<a style="margin-right:10px;" href="http://cultivatingcode.com/2010/02/04/five-things-i-dont-like-about-f/">Five things I don't like about F#</a> <span style="color:#999;font-size:8pt;">February 2010</span>
12 comments
<div style="clear:left;float:left;font-size:24pt;line-height:1em;margin:-5px 10px 20px 0;">2</div>
<a style="margin-right:10px;" href="http://cultivatingcode.com/2010/07/09/removing-csharp-ceremony/">Removing the Ceremony from C#</a> <span style="color:#999;font-size:8pt;">July 2010</span>
9 comments
<div style="clear:left;float:left;font-size:24pt;line-height:1em;margin:-5px 10px 20px 0;">3</div>
<a style="margin-right:10px;" href="http://cultivatingcode.com/2010/07/08/generating-docs-with-open-xml/">Generating Documents with the Open XML SDK - Part 1</a> <span style="color:#999;font-size:8pt;">July 2010</span>
8 comments
<div style="clear:left;float:left;font-size:24pt;line-height:1em;margin:-5px 10px 20px 0;">4</div>
<a style="margin-right:10px;" href="http://cultivatingcode.com/2010/02/03/maybe-f-isnt-for-you/">Maybe F# isn't for you...</a> <span style="color:#999;font-size:8pt;">February 2010</span>
6 comments
<div style="clear:left;float:left;font-size:24pt;line-height:1em;margin:-5px 10px 20px 0;">5</div>
<a style="margin-right:10px;" href="http://cultivatingcode.com/2010/01/27/translating-lambda-expressions/">Translating lambda expressions</a> <span style="color:#999;font-size:8pt;">January 2010</span>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827348</wp:post_id>
  <wp:post_date>2011-01-06 08:35:21</wp:post_date>
  <wp:post_date_gmt>2011-01-05 23:05:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2010-in-review</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="reviews"><![CDATA[Reviews]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>wpcom_recap</wp:meta_key>
    <wp:meta_value><![CDATA[2010]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827348]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827348]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Using the Telerik Controls from ASP MVC via Nuget</title>
  <link>https://maintenancecoder.wordpress.com/2011/04/15/using-the-telerik-controls-from-asp-mvc-via-nuget/</link>
  <pubDate>Fri, 15 Apr 2011 02:32:21 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827377</guid>
  <description/>
  <content:encoded><![CDATA[Recently, Telerik started providing their open source controls over nuget, and I happened to be on an ASP MVC 3 project that is potentially going to consume them, so I thought I'd look into the nuget support.

As it turns out merely installing the extensions via nuget will not magically turn your boring ASP MVC 3 Solution into a magic fun house of fancy pants controls. I needed to sprinkle in some fairy dust to get things to work correctly.

In particular I had to add the following XML to my web.config ( all of it! )

[sourcecode language="xml"]
&lt;!-- under the configuration tag --&gt;
&lt;configSections&gt;
    &lt;sectionGroup name=&quot;telerik&quot;&gt;
      &lt;section
        name=&quot;webAssets&quot;
        type=&quot;Telerik.Web.Mvc.Configuration.WebAssetConfigurationSection, Telerik.Web.Mvc&quot;
        requirePermission=&quot;false&quot; /&gt;
    &lt;!--&lt;span class=&quot;hiddenSpellError&quot; pre=&quot;&quot;--&gt;sectionGroup&gt;
    &lt;sectionGroup
      name=&quot;system.web.webPages.razor&quot;
      type=&quot;System.Web.WebPages.Razor.Configuration.RazorWebSectionGroup, System.Web.WebPages.Razor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot;&gt;
      &lt;section
        name=&quot;host&quot;
        type=&quot;System.Web.WebPages.Razor.Configuration.HostSection, System.Web.WebPages.Razor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot;
        requirePermission=&quot;false&quot; /&gt;
      &lt;section
        name=&quot;pages&quot;
        type=&quot;System.Web.WebPages.Razor.Configuration.RazorPagesSection, System.Web.WebPages.Razor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot;
        requirePermission=&quot;false&quot; /&gt;
    &lt;/sectionGroup&gt;
&lt;/configSections&gt;
&lt;system.web.webPages.razor&gt;
    &lt;host
        factoryType=&quot;System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot; /&gt;
    &lt;pages
      pageBaseType=&quot;System.Web.Mvc.WebViewPage&quot;&gt;
      &lt;namespaces&gt;
        &lt;add namespace=&quot;System.Web.Mvc&quot; /&gt;
        &lt;add namespace=&quot;System.Web.Mvc.Ajax&quot; /&gt;
        &lt;add namespace=&quot;System.Web.Mvc.Html&quot; /&gt;
        &lt;add namespace=&quot;System.Web.Routing&quot; /&gt;
        &lt;add namespace=&quot;System.Collections&quot; /&gt;
        &lt;add namespace=&quot;Telerik.Web.Mvc.UI&quot; /&gt;
      &lt;/namespaces&gt;
    &lt;/pages&gt;
  &lt;/system.web.webPages.razor&gt;
[/sourcecode]

Incidentally, this meant I had to add a reference to the System.Web.WebPages.Razor assembly as well.

After that, it all worked nicely.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827377</wp:post_id>
  <wp:post_date>2011-04-15 12:02:21</wp:post_date>
  <wp:post_date_gmt>2011-04-15 02:32:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-the-telerik-controls-from-asp-mvc-via-nuget</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="asp-mvc-3"><![CDATA[ASP MVC 3]]></category>
  <category domain="post_tag" nicename="coding"><![CDATA[Coding]]></category>
  <category domain="post_tag" nicename="configuration"><![CDATA[Configuration]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="telerik"><![CDATA[Telerik]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827377]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827377]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Optional Parameters, Polymorphism &amp; F#</title>
  <link>https://maintenancecoder.wordpress.com/2011/05/06/optional-parameters-polymorphism-f/</link>
  <pubDate>Thu, 05 May 2011 23:27:40 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">http://cultivatingcode.com/?p=827387</guid>
  <description/>
  <content:encoded><![CDATA[Optional parameters are one of those things. Love them or hate them they have their place. Generally, F# style dictates using optional parameters over overloaded methods. From <a href="http://msdn.microsoft.com/en-us/library/dd483468.aspx">MSDN</a>
<blockquote>In F#, optional arguments are usually used instead of overloaded methods. However, overloaded methods are permitted in the language</blockquote>
<p style="display:inline !important;">Briefly, the way to declare optional parameters in F# <a href="http://msdn.microsoft.com/en-us/library/dd233213.aspx">is as follows</a>:</p>

[sourcecode language="fsharp"]
type Person() =
    ///&lt;summary&gt;Pants are optional&lt;/summary&gt;
    member this.WearClothes(top, shoes, ?pants) = ignore()
[/sourcecode]

When we need to find the value of an optional we can use a function called defaultArg. It checks the call and if no value was passed, the value provided is used. 

[sourcecode language="fsharp"]
type Person() =
    member this.Say(message, ?name) =
         let who = defaultArg name &quot;nobody&quot; 
         printfn &quot;You said: '%s', to %s&quot; message who
[/sourcecode]
 
When using polymorphism in F#, you declare the type signature, and optionally, a default implementation (equivalent to a virtual method in C#). If you intend to use optional parameters, in this case you'll need to use labels for optional parameters in your abstract declaration. You cannot use curried arguments either, so you must tuple your signature. Like so...

[sourcecode language="fsharp"]
type Person() =
    abstract Say :  'a * ?name : string -&gt; unit
    default this.Say (message, ?name) =
        (* and so on *)
[/sourcecode]


Aside: both optional parameters and parameter arrays must be used last in a method signature in F#. In the case you use both, the compiler fails unless the optional parameters go last. Those familiar with C# in this instance will know the opposite is true in that language. Odd?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827387</wp:post_id>
  <wp:post_date>2011-05-06 08:57:40</wp:post_date>
  <wp:post_date_gmt>2011-05-05 23:27:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>optional-parameters-polymorphism-f</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="coding"><![CDATA[Coding]]></category>
  <category domain="post_tag" nicename="fsharp"><![CDATA[FSharp]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>original_post_id</wp:meta_key>
    <wp:meta_value><![CDATA[827387]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[827387]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Configuring WPA/WPA2 wifi on Ubuntu 14.04 LTS</title>
  <link>https://maintenancecoder.wordpress.com/2015/01/21/configuring-wpawpa2-wifi-on-ubuntu-14-04-lts/</link>
  <pubDate>Wed, 21 Jan 2015 13:00:32 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">https://maintenancecoder.wordpress.com/?p=827425</guid>
  <description/>
  <content:encoded><![CDATA[I'm not really sure how it happened, but after installing <a title="Ubuntu 14.04.01 LTS Trusty Tahr" href="https://wiki.ubuntu.com/TrustyTahr/ReleaseNotes" target="_blank">14.04 LTS</a> I couldn't connect to my network over wifi.

I ran the LTS install from my CDROM - it walked me through connecting to my wifi ap. The installer uses this to initiate apt-get to download additional packages. All went well.

When I log in I found that there was no wifi configured and was left with a relatively empty /etc/network/interfaces file. So maybe I did it wrong - *shrugs*. If you happen to know what I did wrong - I'd be grateful for the answer!

If you find yourself in this position then my condolences to you. Here's what worked for me...please note I'm assuming you need to use a passphrase.

1. Check how far your install got, type this into your console to check if you ended up with some configuration:
<pre>ls /etc/wpa_supplicant.conf</pre>
If you dont have that file like me - then this post might be useful - now check if wpa_supplicant is installed ... try..
<pre>wpa_supplicant</pre>
If this doesn't return with some usage tips - then <strong>this post will not help you as wpa_supplicant is not installed.</strong> My fix relies on it's existence. You may want to troubleshoot that, or decide if you even need to use it.

However, if it does exist, then you ended up like I did. While you are staring at the usage tips - take note of the drivers section. It will look a little bit like this:
<pre>drivers:
  nl80211 = Linux nl80211/cfg80211
  wext = Linux wireless extensions (generic)
  wired = Wired Ethernet driver
  none = no dirver (RADIUS server/WPS ER)</pre>
I can't tell you what driver is right for you, but <strong>wext</strong> is what worked for me.

2. I'm using a root session for brevity. If you choose not to do this - please use sudo on each line that requires access to /etc/:
<pre>sudo -i
</pre>
3. back up the network interfaces configuration file (/etc/network/interfaces) and then edit it
<pre>cp /etc/network/interfaces /etc/network/interfaces.old
vi /etc/network/interfaces
</pre>
Use nano or something other than vi if thats your thing. But make the file look like this..
<pre>auto wlan0
iface wlan0 inet dhcp
wpa-driver wext
wpa-conf /etc/wpa_supplicant.conf</pre>
If your don't want to use dhcp - swap that out on line 2 for 'static'. Just be sure to add an address netmask and gateway line. See the <a title="man interfaces" href="http://manpages.ubuntu.com/manpages/utopic/en/man5/interfaces.5.html">man page</a> for more on that... Note that I chose the <strong>wext</strong> driver (see step 1). You might need to select a more appropriate value for wpa-driver.

4. Now create /etc/wpa_supplicant.conf using the wpa_passphrase tool:
<pre>wpa_passphrase "YOUR_SSID_GOES_HERE" "YOUR SECRET_GOES_HERE" &gt; /etc/wpa_supplicant.conf</pre>
<pre>vi /etc/wpa_supplicant.conf</pre>
If not, your file will look something like this...
<pre>network={
    ssid="YOUR_SSID_GOES_HERE"
    #psk="YOUR SECRET_GOES_HERE"
    psk=a7564765f685765d76575e76576c786b
}</pre>
Note that the #psk line, is actually a comment to help jog your memory. I prefer to use a password manager, so I generally turf that line. I made my file look more like this...
<pre>ctrl_interface=/var/run/wpa_supplicant
network={
    ssid="YOUR_SSID_GOES_HERE"
    scan_ssid=1
    proto=WPA RSN
    key_mgmt=WPA-PSK
    pairwise=CCMP TKIP
    group=CCMP TKIP
    psk=a7564765f685765d76575e76576c786b
}
</pre>
..now would be a good time to consult the <a title="man pages" href="http://manpages.ubuntu.com/manpages/trusty/man8/wpa_supplicant.8.html">man page</a> for wpa_supplicant, because what you see above is a very generic take on the possible settings. It will ask your wifi card to try WPA/WPA2 and AES or TKIP crypto. In particular, scan_ssid is what tells the tool if you intend to use hidden SSIDs or not. Keep it set as above if you are connecting to a publicly visible SSID.

Whats the deal with the hexified psk? Well, even if you use a passphrase, supplicant encodes that before sending over the airwaves. You are cutting out the middle man here by pre-enconding the passphrase.

Now try cycling your wifi adapter:
<pre>ifdown wlan0
ifup wlan0</pre>
Hopefully you saw something like...
<pre>Listening on LPF/wlan0/12:23:34:45:56:67
Sending on LPF/wlan0/12:23:34:45:56:67
.
.
</pre>
Final confirmation with a ping to your wifi router should let you know that it worked or not. Oh before you bail, you might want to tidy up any cleartext passes in your ~/.bash_history (and don't forget to log out from root if you copied my second step when your done)

HTH]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827425</wp:post_id>
  <wp:post_date>2015-01-21 22:30:32</wp:post_date>
  <wp:post_date_gmt>2015-01-21 13:00:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>configuring-wpawpa2-wifi-on-ubuntu-14-04-lts</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>sharing_disabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>111</wp:comment_id>
    <wp:comment_author><![CDATA[Henry]]></wp:comment_author>
    <wp:comment_author_email>henryparra400@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>201.244.252.107</wp:comment_author_IP>
    <wp:comment_date>2015-08-02 12:23:53</wp:comment_date>
    <wp:comment_date_gmt>2015-08-02 02:53:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Mil Graciaaaasss!!!!!!!!
Busqué una solución por horas y con ayuda de tu artículo lo logré solucionar, ahora estoy conectado mediante wifi.

Un saludo!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1438489073</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1438489073.051930904388427734375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"Jim Burger";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1438484034.1243269443511962890625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1438489073</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1438489021.66707897186279296875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>112</wp:comment_id>
    <wp:comment_author><![CDATA[Jim Burger]]></wp:comment_author>
    <wp:comment_author_email>the-burge@outlook.com</wp:comment_author_email>
    <wp:comment_author_url>http://cultivatingcode.com</wp:comment_author_url>
    <wp:comment_author_IP>118.211.87.59</wp:comment_author_IP>
    <wp:comment_date>2015-08-02 13:48:56</wp:comment_date>
    <wp:comment_date_gmt>2015-08-02 04:18:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[De nada, feliz de ayudar!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>111</wp:comment_parent>
    <wp:comment_user_id>11285636</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1438489136</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1438489136</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1438489136.57518100738525390625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"Jim Burger";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Enable ES6 support in VS code</title>
  <link>https://maintenancecoder.wordpress.com/2015/08/19/enable-es6-support-in-vs-code/</link>
  <pubDate>Wed, 19 Aug 2015 10:03:51 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">https://maintenancecoder.wordpress.com/?p=827434</guid>
  <description/>
  <content:encoded><![CDATA[<p>I've recently been playing with <a href="http://koajs.com">koa.js</a> - which happens to lean on ES6 features quite heavily. Also using this as an opportunity to learn to use <a href="https://code.visualstudio.com/">VS Code</a>. Loving both tools incidentally.</p>
<p>Code supports ES6 nicely, however you do need to configure your working directory to tell the IDE that you want to use it. Just add a jsconfig.json file to your directory root and add the following:</p>
<pre>
{
  "compilerOptions": {
    "target": "ES6"
  }
}
</pre>
While you are there you may want to <a href="https://code.visualstudio.com/Docs/languages/javascript#_javascript-projects-jsconfigjson">setup other features!</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827434</wp:post_id>
  <wp:post_date>2015-08-19 19:33:51</wp:post_date>
  <wp:post_date_gmt>2015-08-19 10:03:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>enable-es6-support-in-vs-code</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[13878085323]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>sharing_disabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>JSON Serialisation of Circular References</title>
  <link>https://maintenancecoder.wordpress.com/2015/12/02/json-serialisation-of-circular-references/</link>
  <pubDate>Wed, 02 Dec 2015 11:49:44 +0000</pubDate>
  <dc:creator>Jim Burger</dc:creator>
  <guid isPermaLink="false">https://maintenancecoder.wordpress.com/?p=827476</guid>
  <description/>
  <content:encoded><![CDATA[Circular references make me cringe and shudder. Its not that they are bad per se, <em>its what we do with them that counts.</em>

Now, the .NET garbage collector avoids memory issues with destroying circular references and we don't have to worry as much as <a href="https://msdn.microsoft.com/en-us/library/aa716190(v=vs.60).aspx">days of yore</a>, though I still can't help the shudder. I guess I'm getting old or something.

When dealing with data over REST services in .NET it's hard to pass by the great JSON.NET library: Newtonsoft.Json which makes object serialisation of both typed and dynamic objects really simple.

Knowing that circular references are somewhat of an inevitability, the library can handle these reference loops through serialisation configuration for you

[code language="csharp"]
//domain classes
public class Parent
{
  public string Name { get; }
  public List&lt;Child&gt;; Children { get; } = new List&lt;Child&gt;();
  public Parent(string name)
  {
    Name = name;
  }
}

public class Child
{
  public string Name { get; set; }
  public Parent Parent { get; set; }
}

//in an action, far far away...

public IActionResult Get()
{
  var vader = new Parent(&quot;Anakin&quot;);
  var luke = new Child() { Parent = vader, Name = &quot;Luke&quot; };
  var leia = new Child() { Parent = vader, Name = &quot;Leia&quot; };

  vader.Children.AddRange(new[] { luke, leia });

  return Json(luke);
}

[/code]

This code will throw an exception, as Newtonsoft rightly avoids a potential overflow during serialisation by <a href="https://en.wikipedia.org/wiki/Fail-fast">failing fast</a>.
<h3>Just ignore it and it will go away...</h3>
By setting up Newtonsoft.Json to ignore these 'reference loops' it will avoid the exception and life can apparently move on.

[code language="csharp"]
.
.
.
var settings = new JsonSerializerSettings()
{
  ReferenceLoopHandling = ReferenceLoopHandling.Ignore
}
return Json(luke, settings);
[/code]
<h3>Its all relative</h3>
So while the above piece of code appears to be innocent enough, it harbours a runtime issue for the trusting developer.

[caption id="attachment_827701" align="alignnone" width="742"]<img class="alignnone size-full wp-image-827701" src="https://maintenancecoder.files.wordpress.com/2015/12/australia-head-in-sand-climate-change1.jpg" alt="australia-head-in-sand-climate-change" width="742" height="404" /> The further you stick your head in the sand, the more exposed your butt becomes.[/caption]

How is this library ignoring reference loops? Turns out, if we execute the above snippet we end up with the following JSON:

[code language="javascript"]
{
  &quot;Name&quot;:&quot;Luke&quot;,
  &quot;Parent&quot;:{
    &quot;Name&quot;:&quot;Anakin&quot;,
    &quot;Children&quot;:[
      {&quot;Name&quot;:&quot;Leia&quot;}
      /*... I find your lack of objects, disturbing ... */
    ]
  }
}
[/code]

If we're leaning on the above to retrieve a parent's children from a child reference - we'd in trouble, as the serialiser will have ignored 'luke' the second time it encounters it. You just shouldn't do it. The documentation is pretty clear:

"Json.NET will ignore objects in reference loops and not serialise them. The first time an object is encountered it will be serialised as usual but if the object is encountered as a child object of itself the serialiser will skip serialising it."

If you were particularly keen to teach the serialiser new tricks, you can of course go ahead and <a href="http://www.newtonsoft.com/json/help/html/ConditionalProperties.htm">derive your own IContractResolver</a>.
<h3>If latency is King, then order of complexity is Queen.</h3>
This also brings up the question of performance: if it is actively tracking and matching each new object, surely this is slow? What if we avoided circular references?

[code language="csharp"]
//domain classes
public class Parent
{
  public string Name { get; }
  public List&lt;string&gt; Children { get; } = new List&lt;string&gt;();
  public Parent(string name)
  {
    Name = name;
  }
}

public class Child
{
  public string Name { get; set; }
  public Parent Parent { get; set; }
}

var parent = new Parent(&quot;Padme&quot;);
parent.Children.Add(luke.Name, leia.Name);

[/code]

Turns out of we avoid the circular reference by leaning on some kind of natural key, we can decrease processing time by a lot:
<h2><img class="alignnone size-full wp-image-827709" src="https://maintenancecoder.files.wordpress.com/2015/12/capture.png" alt="Capture" width="1267" height="699" /></h2>
I'm no expert on #perfmatters, but my rudimentary test loads up a parent object with several million children and then checks the time taken to serialize that parent, using similar approaches to what you've read above. It would seem that avoiding circular references prior to serialization <strong><em>has some impact.</em></strong>
<h3>TL;DR</h3>
When serialising domain models with circular references, care must be taken to respect that serialisers can't magic away all the problems for you and you'll need to be aware of the downstream implications for your API, both from a correctness standpoint, and a performance one.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>827476</wp:post_id>
  <wp:post_date>2015-12-02 21:19:44</wp:post_date>
  <wp:post_date_gmt>2015-12-02 11:49:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>json-serialisation-of-circular-references</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[17400621220]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
